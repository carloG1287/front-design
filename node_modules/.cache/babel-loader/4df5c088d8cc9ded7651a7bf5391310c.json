{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\carli\\\\OneDrive\\\\Escritorio\\\\Dev\\\\astrid\\\\InteriorDesing\\\\src\\\\Components\\\\TextureList\\\\WallTextureList.jsx\";\n\nimport React, { Component } from \"react\";\nimport TextureList from \"./TextureList.jsx\";\nimport { BASE_URL, TEXTURES, WALL_CATEGORY, WALL_SOLID_CATEGORY, WALL_TILE_CATEGORY, RESOURCES, GET_FREE_RESOURCES, GET_RESOURCES, FIND } from \"../../Constants.js\";\nimport axios from \"axios\";\nimport { inject, observer } from \"mobx-react\";\nlet WallTextureList = (_dec = inject(\"store\"), _dec(_class = observer(_class = (_temp = class WallTextureList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTextureSelection = textureName => {\n      // AÃ±adir la textura seleccionada al store\n      this.props.store.addFloorTexture(textureName); // Solo actualiza el estado local si realmente lo necesitas para el componente\n\n      if (this.state.selectedFloorTexture !== textureName) {\n        this.setState({\n          selectedFloorTexture: textureName\n        });\n      }\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      textureList: [],\n      textureListSolid: [],\n      textureListTile: []\n    };\n    this.getUserList = this.getUserList.bind(this);\n    this.getFreeList = this.getFreeList.bind(this);\n    this.clearList = this.clearList.bind(this);\n  } // Manejador para actualizar la textura de pared seleccionada en el store\n\n\n  clearList() {\n    if (this.state.isLoggedIn === false) {\n      this.setState({\n        textureList: [],\n        textureListSolid: [],\n        textureListTile: []\n      });\n    }\n  }\n\n  getUserList() {\n    if (this.state.isLoggedIn) {\n      let textureCategory = {\n        category: WALL_CATEGORY\n      };\n      let textureCategorySolid = {\n        category: WALL_SOLID_CATEGORY\n      };\n      let textureCategoryTile = {\n        category: WALL_TILE_CATEGORY\n      };\n      let token = this.props.store.obtenerTokenDeAcceso;\n      let config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategory, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureList];\n          temp.push(res.data);\n          this.setState({\n            textureList: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategorySolid, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListSolid];\n          temp.push(res.data);\n          this.setState({\n            textureListSolid: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryTile, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  getFreeList() {\n    if (!this.state.isLoggedIn) {\n      let textureCategory = {\n        category: WALL_CATEGORY\n      };\n      let textureCategorySolid = {\n        category: WALL_SOLID_CATEGORY\n      };\n      let textureCategoryTile = {\n        category: WALL_TILE_CATEGORY\n      };\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategory).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureList];\n          temp.push(res.data);\n          this.setState({\n            textureList: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategorySolid).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListSolid];\n          temp.push(res.data);\n          this.setState({\n            textureListSolid: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryTile).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getFreeList();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.store.obtenerInicioDeSesion && prevState.isLoggedIn === false) {\n      this.setState({\n        isLoggedIn: true\n      });\n      this.clearList();\n      this.getUserList();\n    }\n\n    if (this.props.store.obtenerInicioDeSesion === false && prevState.isLoggedIn) {\n      this.setState({\n        isLoggedIn: false\n      });\n      this.clearList();\n      this.getFreeList();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"Ajustar pared\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.onClose,\n      className: \"close-button\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }\n    }, \"X\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"small-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"Patrones\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureList.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, \"S\\xF3lidos\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListSolid.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, \"Baldosa\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListTile.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nexport default WallTextureList;","map":{"version":3,"sources":["C:/Users/carli/OneDrive/Escritorio/Dev/astrid/InteriorDesing/src/Components/TextureList/WallTextureList.jsx"],"names":["React","Component","TextureList","BASE_URL","TEXTURES","WALL_CATEGORY","WALL_SOLID_CATEGORY","WALL_TILE_CATEGORY","RESOURCES","GET_FREE_RESOURCES","GET_RESOURCES","FIND","axios","inject","observer","WallTextureList","constructor","props","handleTextureSelection","textureName","store","addFloorTexture","state","selectedFloorTexture","setState","isLoggedIn","textureList","textureListSolid","textureListTile","getUserList","bind","getFreeList","clearList","textureCategory","category","textureCategorySolid","textureCategoryTile","token","obtenerTokenDeAcceso","config","headers","Authorization","post","then","res","textureListTemp","data","Promise","all","map","textureId","get","temp","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapShot","obtenerInicioDeSesion","render","onClose","float","reverse"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextureList from \"./TextureList.jsx\";\r\nimport {\r\n  BASE_URL,\r\n  TEXTURES,\r\n  WALL_CATEGORY,\r\n  WALL_SOLID_CATEGORY,\r\n  WALL_TILE_CATEGORY,\r\n  RESOURCES,\r\n  GET_FREE_RESOURCES,\r\n  GET_RESOURCES,\r\n  FIND,\r\n} from \"../../Constants.js\";\r\nimport axios from \"axios\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass WallTextureList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      textureList: [],\r\n      textureListSolid: [],\r\n      textureListTile: [],\r\n    };\r\n\r\n    this.getUserList = this.getUserList.bind(this);\r\n    this.getFreeList = this.getFreeList.bind(this);\r\n    this.clearList = this.clearList.bind(this);\r\n  }\r\n\r\n  // Manejador para actualizar la textura de pared seleccionada en el store\r\n  handleTextureSelection = (textureName) => {\r\n    // AÃ±adir la textura seleccionada al store\r\n    this.props.store.addFloorTexture(textureName);\r\n\r\n    // Solo actualiza el estado local si realmente lo necesitas para el componente\r\n    if (this.state.selectedFloorTexture !== textureName) {\r\n      this.setState({ selectedFloorTexture: textureName });\r\n    }\r\n  };\r\n\r\n  clearList() {\r\n    if (this.state.isLoggedIn === false) {\r\n      this.setState({\r\n        textureList: [],\r\n        textureListSolid: [],\r\n        textureListTile: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  getUserList() {\r\n    if (this.state.isLoggedIn) {\r\n      let textureCategory = { category: WALL_CATEGORY };\r\n      let textureCategorySolid = { category: WALL_SOLID_CATEGORY };\r\n      let textureCategoryTile = { category: WALL_TILE_CATEGORY };\r\n      let token = this.props.store.obtenerTokenDeAcceso;\r\n      let config = {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      };\r\n\r\n      axios\r\n        .post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategory, config)\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureList];\r\n              temp.push(res.data);\r\n              this.setState({ textureList: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_RESOURCES,\r\n          textureCategorySolid,\r\n          config\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListSolid];\r\n              temp.push(res.data);\r\n              this.setState({ textureListSolid: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryTile, config)\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListTile];\r\n              temp.push(res.data);\r\n              this.setState({ textureListTile: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  getFreeList() {\r\n    if (!this.state.isLoggedIn) {\r\n      let textureCategory = { category: WALL_CATEGORY };\r\n      let textureCategorySolid = { category: WALL_SOLID_CATEGORY };\r\n      let textureCategoryTile = { category: WALL_TILE_CATEGORY };\r\n\r\n      axios\r\n        .post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategory)\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureList];\r\n              temp.push(res.data);\r\n              this.setState({ textureList: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategorySolid)\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListSolid];\r\n              temp.push(res.data);\r\n              this.setState({ textureListSolid: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryTile)\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListTile];\r\n              temp.push(res.data);\r\n              this.setState({ textureListTile: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFreeList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapShot) {\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion &&\r\n      prevState.isLoggedIn === false\r\n    ) {\r\n      this.setState({ isLoggedIn: true });\r\n      this.clearList();\r\n      this.getUserList();\r\n    }\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion === false &&\r\n      prevState.isLoggedIn\r\n    ) {\r\n      this.setState({ isLoggedIn: false });\r\n      this.clearList();\r\n      this.getFreeList();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"texture-panel\">\r\n        <div className=\"panel-heading\">\r\n          Ajustar pared\r\n          <button\r\n            onClick={this.props.onClose}\r\n            className=\"close-button\"\r\n            style={{ float: \"right\" }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        <hr className=\"small-underline\" />\r\n        <div className=\"texture-panel-heading\">Patrones</div>\r\n        <TextureList\r\n          textureList={this.state.textureList.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">SÃ³lidos</div>\r\n        <TextureList\r\n          textureList={this.state.textureListSolid.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">Baldosa</div>\r\n        <TextureList\r\n          textureList={this.state.textureListTile.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WallTextureList;\r\n"]},"metadata":{},"sourceType":"module"}