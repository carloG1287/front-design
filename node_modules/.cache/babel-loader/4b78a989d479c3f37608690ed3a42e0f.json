{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\carli\\\\OneDrive\\\\Escritorio\\\\Dev\\\\astrid\\\\InteriorDesing\\\\src\\\\Components\\\\TextureList\\\\FloorTextureList.jsx\";\n\nimport React, { Component } from \"react\";\nimport TextureList from \"./TextureList.jsx\";\nimport { BASE_URL, TEXTURES, FLOOR_WOOD_CATEGORY, FLOOR_MARBLE_CATEGORY, FLOOR_TILE_CATEGORY, RESOURCES, GET_FREE_RESOURCES, GET_RESOURCES, FIND } from \"../../Constants.js\";\nimport axios from \"axios\";\nimport { inject, observer } from \"mobx-react\";\nlet FloorTextureList = (_dec = inject(\"store\"), _dec(_class = observer(_class = (_temp = class FloorTextureList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTextureSelection = textureName => {\n      this.setState({\n        selectedFloorTexture: textureName\n      });\n      this.props.store.setFloorTexture(textureName); // Guardamos la textura seleccionada en el store\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      textureListWood: [],\n      textureListMarble: [],\n      textureListTile: [],\n      selectedFloorTexture: null\n    };\n    this.getUserList = this.getUserList.bind(this);\n    this.getFreeList = this.getFreeList.bind(this);\n    this.clearList = this.clearList.bind(this);\n  } // Manejador para actualizar el tipo de suelo seleccionado\n\n\n  clearList() {\n    if (this.state.isLoggedIn === false) {\n      this.setState({\n        textureListWood: [],\n        textureListMarble: [],\n        textureListTile: []\n      });\n    }\n  }\n\n  getUserList() {\n    if (this.state.isLoggedIn) {\n      let textureCategoryFloorWood = {\n        category: FLOOR_WOOD_CATEGORY\n      };\n      let textureCategoryFloorMarble = {\n        category: FLOOR_MARBLE_CATEGORY\n      };\n      let textureCategoryFloorTile = {\n        category: FLOOR_TILE_CATEGORY\n      };\n      let token = this.props.store.obtenerTokenDeAcceso;\n      let config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorWood, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListWood];\n          temp.push(res.data);\n          this.setState({\n            textureListWood: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorMarble, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListMarble];\n          temp.push(res.data);\n          this.setState({\n            textureListMarble: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_RESOURCES, textureCategoryFloorTile, config).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  getFreeList() {\n    if (!this.state.isLoggedIn) {\n      let textureCategoryFloorWood = {\n        category: FLOOR_WOOD_CATEGORY\n      };\n      let textureCategoryFloorMarble = {\n        category: FLOOR_MARBLE_CATEGORY\n      };\n      let textureCategoryFloorTile = {\n        category: FLOOR_TILE_CATEGORY\n      };\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorWood).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListWood];\n          temp.push(res.data);\n          this.setState({\n            textureListWood: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorMarble).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListMarble];\n          temp.push(res.data);\n          this.setState({\n            textureListMarble: temp\n          });\n          return res.data;\n        }));\n      });\n      axios.post(BASE_URL + RESOURCES + GET_FREE_RESOURCES, textureCategoryFloorTile).then(res => {\n        let textureListTemp = res.data;\n        Promise.all(textureListTemp.map(async textureId => {\n          let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\n          let temp = [...this.state.textureListTile];\n          temp.push(res.data);\n          this.setState({\n            textureListTile: temp\n          });\n          return res.data;\n        }));\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getFreeList();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.store.obtenerInicioDeSesion && prevState.isLoggedIn === false) {\n      this.setState({\n        isLoggedIn: true\n      });\n      this.clearList();\n      this.getUserList();\n    }\n\n    if (this.props.store.obtenerInicioDeSesion === false && prevState.isLoggedIn) {\n      this.setState({\n        isLoggedIn: false\n      });\n      this.clearList();\n      this.getFreeList();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, \"Ajustar piso\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        console.log(\"Cerrando FloorTextureList\");\n        this.props.onClose();\n      },\n      style: {\n        float: \"right\",\n        marginBottom: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }\n    }, \"X\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"small-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, \"Madera\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListWood.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, \"M\\xE1rmol\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListMarble.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, \"Baldosas\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListTile.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nexport default FloorTextureList;","map":{"version":3,"sources":["C:/Users/carli/OneDrive/Escritorio/Dev/astrid/InteriorDesing/src/Components/TextureList/FloorTextureList.jsx"],"names":["React","Component","TextureList","BASE_URL","TEXTURES","FLOOR_WOOD_CATEGORY","FLOOR_MARBLE_CATEGORY","FLOOR_TILE_CATEGORY","RESOURCES","GET_FREE_RESOURCES","GET_RESOURCES","FIND","axios","inject","observer","FloorTextureList","constructor","props","handleTextureSelection","textureName","setState","selectedFloorTexture","store","setFloorTexture","state","isLoggedIn","textureListWood","textureListMarble","textureListTile","getUserList","bind","getFreeList","clearList","textureCategoryFloorWood","category","textureCategoryFloorMarble","textureCategoryFloorTile","token","obtenerTokenDeAcceso","config","headers","Authorization","post","then","res","textureListTemp","data","Promise","all","map","textureId","get","temp","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapShot","obtenerInicioDeSesion","render","console","log","onClose","float","marginBottom","reverse"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextureList from \"./TextureList.jsx\";\r\nimport {\r\n  BASE_URL,\r\n  TEXTURES,\r\n  FLOOR_WOOD_CATEGORY,\r\n  FLOOR_MARBLE_CATEGORY,\r\n  FLOOR_TILE_CATEGORY,\r\n  RESOURCES,\r\n  GET_FREE_RESOURCES,\r\n  GET_RESOURCES,\r\n  FIND,\r\n} from \"../../Constants.js\";\r\nimport axios from \"axios\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass FloorTextureList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      textureListWood: [],\r\n      textureListMarble: [],\r\n      textureListTile: [],\r\n      selectedFloorTexture: null,\r\n    };\r\n\r\n    this.getUserList = this.getUserList.bind(this);\r\n    this.getFreeList = this.getFreeList.bind(this);\r\n    this.clearList = this.clearList.bind(this);\r\n  }\r\n\r\n  // Manejador para actualizar el tipo de suelo seleccionado\r\n  handleTextureSelection = (textureName) => {\r\n    this.setState({ selectedFloorTexture: textureName });\r\n    this.props.store.setFloorTexture(textureName); // Guardamos la textura seleccionada en el store\r\n  };\r\n\r\n  clearList() {\r\n    if (this.state.isLoggedIn === false) {\r\n      this.setState({\r\n        textureListWood: [],\r\n        textureListMarble: [],\r\n        textureListTile: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  getUserList() {\r\n    if (this.state.isLoggedIn) {\r\n      let textureCategoryFloorWood = { category: FLOOR_WOOD_CATEGORY };\r\n      let textureCategoryFloorMarble = { category: FLOOR_MARBLE_CATEGORY };\r\n      let textureCategoryFloorTile = { category: FLOOR_TILE_CATEGORY };\r\n\r\n      let token = this.props.store.obtenerTokenDeAcceso;\r\n      let config = {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      };\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_RESOURCES,\r\n          textureCategoryFloorWood,\r\n          config\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListWood];\r\n              temp.push(res.data);\r\n              this.setState({ textureListWood: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_RESOURCES,\r\n          textureCategoryFloorMarble,\r\n          config\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListMarble];\r\n              temp.push(res.data);\r\n              this.setState({ textureListMarble: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_RESOURCES,\r\n          textureCategoryFloorTile,\r\n          config\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListTile];\r\n              temp.push(res.data);\r\n              this.setState({ textureListTile: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  getFreeList() {\r\n    if (!this.state.isLoggedIn) {\r\n      let textureCategoryFloorWood = { category: FLOOR_WOOD_CATEGORY };\r\n      let textureCategoryFloorMarble = { category: FLOOR_MARBLE_CATEGORY };\r\n      let textureCategoryFloorTile = { category: FLOOR_TILE_CATEGORY };\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\r\n          textureCategoryFloorWood\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListWood];\r\n              temp.push(res.data);\r\n              this.setState({ textureListWood: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\r\n          textureCategoryFloorMarble\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListMarble];\r\n              temp.push(res.data);\r\n              this.setState({ textureListMarble: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n\r\n      axios\r\n        .post(\r\n          BASE_URL + RESOURCES + GET_FREE_RESOURCES,\r\n          textureCategoryFloorTile\r\n        )\r\n        .then((res) => {\r\n          let textureListTemp = res.data;\r\n          Promise.all(\r\n            textureListTemp.map(async (textureId) => {\r\n              let res = await axios.get(BASE_URL + TEXTURES + FIND + textureId);\r\n              let temp = [...this.state.textureListTile];\r\n              temp.push(res.data);\r\n              this.setState({ textureListTile: temp });\r\n              return res.data;\r\n            })\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFreeList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapShot) {\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion &&\r\n      prevState.isLoggedIn === false\r\n    ) {\r\n      this.setState({ isLoggedIn: true });\r\n      this.clearList();\r\n      this.getUserList();\r\n    }\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion === false &&\r\n      prevState.isLoggedIn\r\n    ) {\r\n      this.setState({ isLoggedIn: false });\r\n      this.clearList();\r\n      this.getFreeList();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"texture-panel\">\r\n        <div className=\"panel-heading\">\r\n          Ajustar piso\r\n          <button\r\n            onClick={() => {\r\n              console.log(\"Cerrando FloorTextureList\");\r\n              this.props.onClose();\r\n            }}\r\n            style={{ float: \"right\", marginBottom: \"10px\" }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        <hr className=\"small-underline\" />\r\n        <div className=\"texture-panel-heading\">Madera</div>\r\n        <TextureList\r\n          textureList={this.state.textureListWood.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">Mármol</div>\r\n        <TextureList\r\n          textureList={this.state.textureListMarble.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">Baldosas</div>\r\n        <TextureList\r\n          textureList={this.state.textureListTile.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FloorTextureList;\r\n"]},"metadata":{},"sourceType":"module"}