{"ast":null,"code":"var _dec,\n    _class,\n    _class2,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\carli\\\\OneDrive\\\\Escritorio\\\\Dev\\\\astrid\\\\InteriorDesing\\\\src\\\\Components\\\\AuthRoute\\\\AuthRoute.jsx\";\n\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport TopBar from \"../TopBar/TopBar.jsx\";\nimport Loading from \"../Loading/Loading.jsx\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { observer, inject } from \"mobx-react\";\nimport store from \"../../InteriorDesignStore.js\";\nlet AuthRoute = (_dec = inject(\"store\"), _dec(_class = observer(_class = (_temp = _class2 = class AuthRoute extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nodeShouldBeRender: /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 25\n        }\n      }),\n      isTopBarRender: false\n    };\n\n    this.handleAuth = () => {\n      setTimeout(() => {\n        console.log(store.usuarioHaIniciadoSesion);\n\n        if (store.usuarioHaIniciadoSesion) {\n          this.setState({\n            isTopBarRender: true,\n            nodeShouldBeRender: React.createElement(this.props.component) // Crear elemento del componente\n\n          });\n        } else {\n          this.setState({\n            isTopBarRender: false,\n            nodeShouldBeRender: /*#__PURE__*/React.createElement(Redirect, {\n              to: {\n                pathname: \"/inicio-sesion\",\n                state: {\n                  from: window.navigator.pathname\n                }\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 13\n              }\n            })\n          });\n        }\n      }, 1000);\n    };\n  }\n\n  componentDidMount() {\n    this.handleAuth();\n  }\n\n  render() {\n    const {\n      isTopBarRender,\n      nodeShouldBeRender\n    } = this.state;\n    const {\n      path\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, isTopBarRender ? /*#__PURE__*/React.createElement(TopBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 27\n      }\n    }) : undefined, /*#__PURE__*/React.createElement(Route, {\n      path: path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, nodeShouldBeRender));\n  }\n\n}, _class2.propTypes = {\n  path: PropTypes.string.isRequired,\n  component: PropTypes.elementType.isRequired // Cambiado a elementType para componentes\n\n}, _temp)) || _class) || _class);\nexport default AuthRoute;","map":{"version":3,"sources":["C:/Users/carli/OneDrive/Escritorio/Dev/astrid/InteriorDesing/src/Components/AuthRoute/AuthRoute.jsx"],"names":["PropTypes","React","Component","TopBar","Loading","Route","Redirect","observer","inject","store","AuthRoute","state","nodeShouldBeRender","isTopBarRender","handleAuth","setTimeout","console","log","usuarioHaIniciadoSesion","setState","createElement","props","component","pathname","from","window","navigator","componentDidMount","render","path","width","height","undefined","propTypes","string","isRequired","elementType"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;IAIMC,S,WAFLF,MAAM,CAAC,OAAD,C,gBACND,Q,6BADD,MAEMG,SAFN,SAEwBR,SAFxB,CAEkC;AAAA;AAAA;AAAA,SAMhCS,KANgC,GAMxB;AACNC,MAAAA,kBAAkB,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADd;AAENC,MAAAA,cAAc,EAAE;AAFV,KANwB;;AAAA,SAWhCC,UAXgC,GAWnB,MAAM;AACjBC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,uBAAlB;;AACA,YAAIT,KAAK,CAACS,uBAAV,EAAmC;AACjC,eAAKC,QAAL,CAAc;AACZN,YAAAA,cAAc,EAAE,IADJ;AAEZD,YAAAA,kBAAkB,EAAEX,KAAK,CAACmB,aAAN,CAAoB,KAAKC,KAAL,CAAWC,SAA/B,CAFR,CAEmD;;AAFnD,WAAd;AAID,SALD,MAKO;AACL,eAAKH,QAAL,CAAc;AACZN,YAAAA,cAAc,EAAE,KADJ;AAEZD,YAAAA,kBAAkB,eAChB,oBAAC,QAAD;AACE,cAAA,EAAE,EAAE;AACFW,gBAAAA,QAAQ,EAAE,gBADR;AAEFZ,gBAAAA,KAAK,EAAE;AAAEa,kBAAAA,IAAI,EAAEC,MAAM,CAACC,SAAP,CAAiBH;AAAzB;AAFL,eADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHU,WAAd;AAWD;AACF,OApBS,EAoBP,IApBO,CAAV;AAqBD,KAjC+B;AAAA;;AAmChCI,EAAAA,iBAAiB,GAAG;AAClB,SAAKb,UAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,cAAF;AAAkBD,MAAAA;AAAlB,QAAyC,KAAKD,KAApD;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAW,KAAKR,KAAtB;AAEA,wBACE;AAAK,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGlB,cAAc,gBAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAgBmB,SADjC,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAEH,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBjB,kBAApB,CAFF,CADF;AAMD;;AAjD+B,C,UACzBqB,S,GAAY;AACjBJ,EAAAA,IAAI,EAAE7B,SAAS,CAACkC,MAAV,CAAiBC,UADN;AAEjBb,EAAAA,SAAS,EAAEtB,SAAS,CAACoC,WAAV,CAAsBD,UAFhB,CAE4B;;AAF5B,C;AAmDrB,eAAezB,SAAf","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport TopBar from \"../TopBar/TopBar.jsx\";\r\nimport Loading from \"../Loading/Loading.jsx\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport store from \"../../InteriorDesignStore.js\";\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass AuthRoute extends Component {\r\n  static propTypes = {\r\n    path: PropTypes.string.isRequired,\r\n    component: PropTypes.elementType.isRequired, // Cambiado a elementType para componentes\r\n  };\r\n\r\n  state = {\r\n    nodeShouldBeRender: <Loading />,\r\n    isTopBarRender: false,\r\n  };\r\n\r\n  handleAuth = () => {\r\n    setTimeout(() => {\r\n      console.log(store.usuarioHaIniciadoSesion);\r\n      if (store.usuarioHaIniciadoSesion) {\r\n        this.setState({\r\n          isTopBarRender: true,\r\n          nodeShouldBeRender: React.createElement(this.props.component), // Crear elemento del componente\r\n        });\r\n      } else {\r\n        this.setState({\r\n          isTopBarRender: false,\r\n          nodeShouldBeRender: (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/inicio-sesion\",\r\n                state: { from: window.navigator.pathname },\r\n              }}\r\n            />\r\n          ),\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handleAuth();\r\n  }\r\n\r\n  render() {\r\n    const { isTopBarRender, nodeShouldBeRender } = this.state;\r\n    const { path } = this.props;\r\n\r\n    return (\r\n      <div style={{ width: \"100%\", height: \"100%\" }}>\r\n        {isTopBarRender ? <TopBar /> : undefined}\r\n        <Route path={path}>{nodeShouldBeRender}</Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AuthRoute;\r\n"]},"metadata":{},"sourceType":"module"}