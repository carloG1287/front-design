{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\carli\\\\OneDrive\\\\Escritorio\\\\Dev\\\\astrid\\\\InteriorDesing\\\\src\\\\Components\\\\TextureList\\\\WallTextureList.jsx\";\n\nimport React, { Component } from \"react\";\nimport TextureList from \"./TextureList.jsx\";\nimport { BASE_URL, TEXTURES, WALL_CATEGORY, WALL_SOLID_CATEGORY, WALL_TILE_CATEGORY, RESOURCES, GET_FREE_RESOURCES, GET_RESOURCES, FIND } from \"../../Constants.js\";\nimport axios from \"axios\";\nimport { inject, observer } from \"mobx-react\";\nlet WallTextureList = (_dec = inject(\"store\"), _dec(_class = observer(_class = (_temp = class WallTextureList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTextureSelection = textureName => {\n      this.props.store.setWallTexture(textureName); // Guardamos la textura seleccionada en el store\n    };\n\n    this.togglePanel = () => {\n      this.setState(prevState => ({\n        isPanelOpen: !prevState.isPanelOpen\n      }));\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      textureList: [],\n      textureListSolid: [],\n      textureListTile: [],\n      isPanelOpen: true // Estado para controlar la visibilidad del panel\n\n    };\n    this.getUserList = this.getUserList.bind(this);\n    this.getFreeList = this.getFreeList.bind(this);\n    this.clearList = this.clearList.bind(this);\n  } // Manejador para actualizar la textura de pared seleccionada en el store\n\n\n  clearList() {\n    if (this.state.isLoggedIn === false) {\n      this.setState({\n        textureList: [],\n        textureListSolid: [],\n        textureListTile: []\n      });\n    }\n  }\n\n  getUserList() {\n    if (this.state.isLoggedIn) {// Lógica de getUserList...\n    }\n  }\n\n  getFreeList() {\n    if (!this.state.isLoggedIn) {// Lógica de getFreeList...\n    }\n  }\n\n  componentDidMount() {\n    this.getFreeList();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapShot) {\n    if (this.props.store.obtenerInicioDeSesion && prevState.isLoggedIn === false) {\n      this.setState({\n        isLoggedIn: true\n      });\n      this.clearList();\n      this.getUserList();\n    }\n\n    if (this.props.store.obtenerInicioDeSesion === false && prevState.isLoggedIn) {\n      this.setState({\n        isLoggedIn: false\n      });\n      this.clearList();\n      this.getFreeList();\n    }\n  } // Función para alternar la visibilidad del panel\n\n\n  render() {\n    if (!this.state.isPanelOpen) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.togglePanel,\n        className: \"open-panel-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, \"Abrir\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"Ajustar pared\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.togglePanel,\n      className: \"close-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"X\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"small-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Patrones\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureList.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \"S\\xF3lidos\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListSolid.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"texture-panel-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, \"Baldosa\"), /*#__PURE__*/React.createElement(TextureList, {\n      textureList: this.state.textureListTile.reverse(),\n      onSelectTexture: this.handleTextureSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}, _temp)) || _class) || _class);\nexport default WallTextureList;","map":{"version":3,"sources":["C:/Users/carli/OneDrive/Escritorio/Dev/astrid/InteriorDesing/src/Components/TextureList/WallTextureList.jsx"],"names":["React","Component","TextureList","BASE_URL","TEXTURES","WALL_CATEGORY","WALL_SOLID_CATEGORY","WALL_TILE_CATEGORY","RESOURCES","GET_FREE_RESOURCES","GET_RESOURCES","FIND","axios","inject","observer","WallTextureList","constructor","props","handleTextureSelection","textureName","store","setWallTexture","togglePanel","setState","prevState","isPanelOpen","state","isLoggedIn","textureList","textureListSolid","textureListTile","getUserList","bind","getFreeList","clearList","componentDidMount","componentDidUpdate","prevProps","snapShot","obtenerInicioDeSesion","render","reverse"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextureList from \"./TextureList.jsx\";\r\nimport {\r\n  BASE_URL,\r\n  TEXTURES,\r\n  WALL_CATEGORY,\r\n  WALL_SOLID_CATEGORY,\r\n  WALL_TILE_CATEGORY,\r\n  RESOURCES,\r\n  GET_FREE_RESOURCES,\r\n  GET_RESOURCES,\r\n  FIND,\r\n} from \"../../Constants.js\";\r\nimport axios from \"axios\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\n@inject(\"store\")\r\n@observer\r\nclass WallTextureList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoggedIn: false,\r\n      textureList: [],\r\n      textureListSolid: [],\r\n      textureListTile: [],\r\n      isPanelOpen: true, // Estado para controlar la visibilidad del panel\r\n    };\r\n\r\n    this.getUserList = this.getUserList.bind(this);\r\n    this.getFreeList = this.getFreeList.bind(this);\r\n    this.clearList = this.clearList.bind(this);\r\n  }\r\n\r\n  // Manejador para actualizar la textura de pared seleccionada en el store\r\n  handleTextureSelection = (textureName) => {\r\n    this.props.store.setWallTexture(textureName); // Guardamos la textura seleccionada en el store\r\n  };\r\n\r\n  clearList() {\r\n    if (this.state.isLoggedIn === false) {\r\n      this.setState({\r\n        textureList: [],\r\n        textureListSolid: [],\r\n        textureListTile: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  getUserList() {\r\n    if (this.state.isLoggedIn) {\r\n      // Lógica de getUserList...\r\n    }\r\n  }\r\n\r\n  getFreeList() {\r\n    if (!this.state.isLoggedIn) {\r\n      // Lógica de getFreeList...\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFreeList();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapShot) {\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion &&\r\n      prevState.isLoggedIn === false\r\n    ) {\r\n      this.setState({ isLoggedIn: true });\r\n      this.clearList();\r\n      this.getUserList();\r\n    }\r\n    if (\r\n      this.props.store.obtenerInicioDeSesion === false &&\r\n      prevState.isLoggedIn\r\n    ) {\r\n      this.setState({ isLoggedIn: false });\r\n      this.clearList();\r\n      this.getFreeList();\r\n    }\r\n  }\r\n\r\n  // Función para alternar la visibilidad del panel\r\n  togglePanel = () => {\r\n    this.setState((prevState) => ({\r\n      isPanelOpen: !prevState.isPanelOpen,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.isPanelOpen) {\r\n      return (\r\n        <button onClick={this.togglePanel} className=\"open-panel-button\">\r\n          Abrir\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"texture-panel\">\r\n        <div className=\"panel-heading\">\r\n          Ajustar pared\r\n          <button onClick={this.togglePanel} className=\"close-button\">\r\n            X\r\n          </button>\r\n        </div>\r\n        <hr className=\"small-underline\" />\r\n        <div className=\"texture-panel-heading\">Patrones</div>\r\n        <TextureList\r\n          textureList={this.state.textureList.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">Sólidos</div>\r\n        <TextureList\r\n          textureList={this.state.textureListSolid.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n        <div className=\"texture-panel-heading\">Baldosa</div>\r\n        <TextureList\r\n          textureList={this.state.textureListTile.reverse()}\r\n          onSelectTexture={this.handleTextureSelection}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WallTextureList;\r\n"]},"metadata":{},"sourceType":"module"}