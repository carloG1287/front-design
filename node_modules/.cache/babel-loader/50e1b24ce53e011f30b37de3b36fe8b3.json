{"ast":null,"code":"import * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport $ from \"jquery\";\nimport { BASE_URL, ASSETS, DEFAULT_FLOOR_MAP, DEFAULT_WALL_MAP } from \"../Constants.js\";\nexport var BP3D;\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Core;\n\n  (function (Core) {\n    /** Collection of utility functions. */\n    var Utils = function () {\n      function Utils() {}\n      /** Determines the distance of a point from a line.\r\n       * @param x Point's x coordinate.\r\n       * @param y Point's y coordinate.\r\n       * @param x1 Line-Point 1's x coordinate.\r\n       * @param y1 Line-Point 1's y coordinate.\r\n       * @param x2 Line-Point 2's x coordinate.\r\n       * @param y2 Line-Point 2's y coordinate.\r\n       * @returns The distance.\r\n       */\n\n\n      Utils.pointDistanceFromLine = function (x, y, x1, y1, x2, y2) {\n        var tPoint = Utils.closestPointOnLine(x, y, x1, y1, x2, y2);\n        var tDx = x - tPoint.x;\n        var tDy = y - tPoint.y;\n        return Math.sqrt(tDx * tDx + tDy * tDy);\n      };\n      /** Gets the projection of a point onto a line.\r\n       * @param x Point's x coordinate.\r\n       * @param y Point's y coordinate.\r\n       * @param x1 Line-Point 1's x coordinate.\r\n       * @param y1 Line-Point 1's y coordinate.\r\n       * @param x2 Line-Point 2's x coordinate.\r\n       * @param y2 Line-Point 2's y coordinate.\r\n       * @returns The point.\r\n       */\n\n\n      Utils.closestPointOnLine = function (x, y, x1, y1, x2, y2) {\n        // Inspired by: http://stackoverflow.com/a/6853926\n        var tA = x - x1;\n        var tB = y - y1;\n        var tC = x2 - x1;\n        var tD = y2 - y1;\n        var tDot = tA * tC + tB * tD;\n        var tLenSq = tC * tC + tD * tD;\n        var tParam = tDot / tLenSq;\n        var tXx, tYy;\n\n        if (tParam < 0 || x1 === x2 && y1 === y2) {\n          tXx = x1;\n          tYy = y1;\n        } else if (tParam > 1) {\n          tXx = x2;\n          tYy = y2;\n        } else {\n          tXx = x1 + tParam * tC;\n          tYy = y1 + tParam * tD;\n        }\n\n        return {\n          x: tXx,\n          y: tYy\n        };\n      };\n      /** Gets the distance of two points.\r\n       * @param x1 X part of first point.\r\n       * @param y1 Y part of first point.\r\n       * @param x2 X part of second point.\r\n       * @param y2 Y part of second point.\r\n       * @returns The distance.\r\n       */\n\n\n      Utils.distance = function (x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n      };\n      /**  Gets the angle between 0,0 -> x1,y1 and 0,0 -> x2,y2 (-pi to pi)\r\n       * @returns The angle.\r\n       */\n\n\n      Utils.angle = function (x1, y1, x2, y2) {\n        var tDot = x1 * x2 + y1 * y2;\n        var tDet = x1 * y2 - y1 * x2;\n        var tAngle = -Math.atan2(tDet, tDot);\n        return tAngle;\n      };\n      /** shifts angle to be 0 to 2pi */\n\n\n      Utils.angle2pi = function (x1, y1, x2, y2) {\n        var tTheta = Utils.angle(x1, y1, x2, y2);\n\n        if (tTheta < 0) {\n          tTheta += 2 * Math.PI;\n        }\n\n        return tTheta;\n      };\n      /** Checks if an array of points is clockwise.\r\n       * @param points Is array of points with x,y attributes\r\n       * @returns True if clockwise.\r\n       */\n\n\n      Utils.isClockwise = function (points) {\n        // make positive\n        var tSubX = Math.min(0, Math.min.apply(null, Utils.map(points, function (p) {\n          return p.x;\n        })));\n        var tSubY = Math.min(0, Math.min.apply(null, Utils.map(points, function (p) {\n          return p.x;\n        })));\n        var tNewPoints = Utils.map(points, function (p) {\n          return {\n            x: p.x - tSubX,\n            y: p.y - tSubY\n          };\n        }); // determine CW/CCW, based on:\n        // http://stackoverflow.com/questions/1165647\n\n        var tSum = 0;\n\n        for (var tI = 0; tI < tNewPoints.length; tI++) {\n          var tC1 = tNewPoints[tI];\n          var tC2;\n\n          if (tI === tNewPoints.length - 1) {\n            tC2 = tNewPoints[0];\n          } else {\n            tC2 = tNewPoints[tI + 1];\n          }\n\n          tSum += (tC2.x - tC1.x) * (tC2.y + tC1.y);\n        }\n\n        return tSum >= 0;\n      };\n      /** Creates a Guid.\r\n       * @returns A new Guid.\r\n       */\n\n\n      Utils.guid = function () {\n        var tS4 = function () {\n          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        };\n\n        return tS4() + tS4() + '-' + tS4() + '-' + tS4() + '-' + tS4() + '-' + tS4() + tS4() + tS4();\n      };\n      /** both arguments are arrays of corners with x,y attributes */\n\n\n      Utils.polygonPolygonIntersect = function (firstCorners, secondCorners) {\n        for (var tI = 0; tI < firstCorners.length; tI++) {\n          var tFirstCorner = firstCorners[tI],\n              tSecondCorner;\n\n          if (tI === firstCorners.length - 1) {\n            tSecondCorner = firstCorners[0];\n          } else {\n            tSecondCorner = firstCorners[tI + 1];\n          }\n\n          if (Utils.linePolygonIntersect(tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y, secondCorners)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n      /** Corners is an array of points with x,y attributes */\n\n\n      Utils.linePolygonIntersect = function (x1, y1, x2, y2, corners) {\n        for (var tI = 0; tI < corners.length; tI++) {\n          var tFirstCorner = corners[tI],\n              tSecondCorner;\n\n          if (tI === corners.length - 1) {\n            tSecondCorner = corners[0];\n          } else {\n            tSecondCorner = corners[tI + 1];\n          }\n\n          if (Utils.lineLineIntersect(x1, y1, x2, y2, tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n      /** */\n\n\n      Utils.lineLineIntersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n        function tCCW(p1, p2, p3) {\n          var tA = p1.x,\n              tB = p1.y,\n              tC = p2.x,\n              tD = p2.y,\n              tE = p3.x,\n              tF = p3.y;\n          return (tF - tB) * (tC - tA) > (tD - tB) * (tE - tA);\n        }\n\n        var tP1 = {\n          x: x1,\n          y: y1\n        },\n            tP2 = {\n          x: x2,\n          y: y2\n        },\n            tP3 = {\n          x: x3,\n          y: y3\n        },\n            tP4 = {\n          x: x4,\n          y: y4\n        };\n        return tCCW(tP1, tP3, tP4) !== tCCW(tP2, tP3, tP4) && tCCW(tP1, tP2, tP3) !== tCCW(tP1, tP2, tP4);\n      };\n      /**\r\n       @param corners Is an array of points with x,y attributes\r\n        @param startX X start coord for raycast\r\n        @param startY Y start coord for raycast\r\n      */\n\n\n      Utils.pointInPolygon = function (x, y, corners, startX, startY) {\n        startX = startX || 0;\n        startY = startY || 0; //ensure that point(startX, startY) is outside the polygon consists of corners\n\n        var tMinX = 0,\n            tMinY = 0; // if (startX === undefined || startY === undefined) {\n\n        for (let tI = 0; tI < corners.length; tI++) {\n          tMinX = Math.min(tMinX, corners[tI].x);\n          tMinY = Math.min(tMinX, corners[tI].y);\n        }\n\n        startX = tMinX - 10;\n        startY = tMinY - 10; // }\n\n        var tIntersects = 0;\n\n        for (let tI = 0; tI < corners.length; tI++) {\n          var tFirstCorner = corners[tI],\n              tSecondCorner;\n\n          if (tI === corners.length - 1) {\n            tSecondCorner = corners[0];\n          } else {\n            tSecondCorner = corners[tI + 1];\n          }\n\n          if (Utils.lineLineIntersect(startX, startY, x, y, tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y)) {\n            tIntersects++;\n          }\n        } // odd intersections means the point is in the polygon\n\n\n        return tIntersects % 2 === 1;\n      };\n      /** Checks if all corners of insideCorners are inside the polygon described by outsideCorners */\n\n\n      Utils.polygonInsidePolygon = function (insideCorners, outsideCorners, startX, startY) {\n        startX = startX || 0;\n        startY = startY || 0;\n\n        for (var tI = 0; tI < insideCorners.length; tI++) {\n          if (!Utils.pointInPolygon(insideCorners[tI].x, insideCorners[tI].y, outsideCorners, startX, startY)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n      /** Checks if any corners of firstCorners is inside the polygon described by secondCorners */\n\n\n      Utils.polygonOutsidePolygon = function (insideCorners, outsideCorners, startX, startY) {\n        startX = startX || 0;\n        startY = startY || 0;\n\n        for (var tI = 0; tI < insideCorners.length; tI++) {\n          if (Utils.pointInPolygon(insideCorners[tI].x, insideCorners[tI].y, outsideCorners, startX, startY)) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // arrays\n\n\n      Utils.forEach = function (array, action) {\n        for (var tI = 0; tI < array.length; tI++) {\n          action(array[tI]);\n        }\n      };\n\n      Utils.forEachIndexed = function (array, action) {\n        for (var tI = 0; tI < array.length; tI++) {\n          action(tI, array[tI]);\n        }\n      };\n\n      Utils.map = function (array, func) {\n        var tResult = [];\n        array.forEach(function (element) {\n          tResult.push(func(element));\n        });\n        return tResult;\n      };\n      /** Remove elements in array if func(element) returns true */\n\n\n      Utils.removeIf = function (array, func) {\n        var tResult = [];\n        array.forEach(function (element) {\n          if (!func(element)) {\n            tResult.push(element);\n          }\n        });\n        return tResult;\n      };\n      /** Shift the items in an array by shift (positive integer) */\n\n\n      Utils.cycle = function (arr, shift) {\n        var tReturn = arr.slice(0);\n\n        for (var tI = 0; tI < shift; tI++) {\n          var tmp = tReturn.shift();\n          tReturn.push(tmp);\n        }\n\n        return tReturn;\n      };\n      /** Returns in the unique elemnts in arr */\n\n\n      Utils.unique = function (arr, hashFunc) {\n        var tResults = [];\n        var tMap = {};\n\n        for (var tI = 0; tI < arr.length; tI++) {\n          if (!tMap.hasOwnProperty(arr[tI])) {\n            tResults.push(arr[tI]);\n            tMap[hashFunc(arr[tI])] = true;\n          }\n        }\n\n        return tResults;\n      };\n      /** Remove value from array, if it is present */\n\n\n      Utils.removeValue = function (array, value) {\n        for (var tI = array.length - 1; tI >= 0; tI--) {\n          if (array[tI] === value) {\n            array.splice(tI, 1);\n          }\n        }\n      };\n      /** Subtracts the elements in subArray from array */\n\n\n      Utils.subtract = function (array, subArray) {\n        return Utils.removeIf(array, function (el) {\n          return Utils.hasValue(subArray, el);\n        });\n      };\n      /** Checks if value is in array */\n\n\n      Utils.hasValue = function (array, value) {\n        for (var tI = 0; tI < array.length; tI++) {\n          if (array[tI] === value) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      return Utils;\n    }();\n\n    Core.Utils = Utils;\n  })(Core = BP3D.Core || (BP3D.Core = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Core;\n\n  (function (Core) {\n    /** Dimensioning in Inch. */\n    Core.dimInch = \"inch\";\n    /** Dimensioning in Meter. */\n\n    Core.dimMeter = \"m\";\n    /** Dimensioning in Centi Meter. */\n\n    Core.dimCentiMeter = \"cm\";\n    /** Dimensioning in Milli Meter. */\n\n    Core.dimMilliMeter = \"mm\";\n    /** Dimensioning functions. */\n\n    var Dimensioning = function () {\n      function Dimensioning() {}\n      /** Converts cm to dimensioning string.\r\n       * @param cm Centi meter value to be converted.\r\n       * @returns String representation.\r\n       */\n\n\n      Dimensioning.cmToMeasure = function (cm) {\n        switch (Core.Configuration.getStringValue(Core.configDimUnit)) {\n          case Core.dimInch:\n            var realFeet = cm * 0.393700 / 12;\n            var feet = Math.floor(realFeet);\n            var inches = Math.round((realFeet - feet) * 12);\n            return feet + \"'\" + inches + '\"';\n\n          case Core.dimMilliMeter:\n            return \"\" + Math.round(10 * cm) + \" mm\";\n\n          case Core.dimCentiMeter:\n            return \"\" + Math.round(10 * cm) / 10 + \" cm\";\n\n          case Core.dimMeter:\n          default:\n            return \"\" + Math.round(10 * cm) / 1000 + \" m\";\n        }\n      };\n\n      return Dimensioning;\n    }();\n\n    Core.Dimensioning = Dimensioning;\n  })(Core = BP3D.Core || (BP3D.Core = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Core;\n\n  (function (Core) {\n    // GENERAL:\n\n    /** The dimensioning unit for 2D floorplan measurements. */\n    Core.configDimUnit = \"dimUnit\"; // WALL:\n\n    /** The initial wall height in cm. */\n\n    Core.configWallHeight = \"wallHeight\";\n    /** The initial wall thickness in cm. */\n\n    Core.configWallThickness = \"wallThickness\";\n    /** Global configuration to customize the whole system.  */\n\n    var Configuration = function () {\n      function Configuration() {}\n      /** Set a configuration parameter. */\n\n\n      Configuration.setValue = function (key, value) {\n        this.data[key] = value;\n      };\n      /** Get a string configuration parameter. */\n\n\n      Configuration.getStringValue = function (key) {\n        switch (key) {\n          case Core.configDimUnit:\n            return this.data[key];\n\n          default:\n            throw new Error(\"Invalid string configuration parameter: \" + key);\n        }\n      };\n      /** Get a numeric configuration parameter. */\n\n\n      Configuration.getNumericValue = function (key) {\n        switch (key) {\n          case Core.configWallHeight:\n          case Core.configWallThickness:\n            return this.data[key];\n\n          default:\n            throw new Error(\"Invalid numeric configuration parameter: \" + key);\n        }\n      };\n      /** Configuration data loaded from/stored to extern. */\n\n\n      Configuration.data = {\n        dimUnit: Core.dimInch,\n        wallHeight: 250,\n        wallThickness: 10\n      };\n      return Configuration;\n    }();\n\n    Core.Configuration = Configuration;\n  })(Core = BP3D.Core || (BP3D.Core = {}));\n})(BP3D || (BP3D = {}));\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /**\r\n     * An Item is an abstract entity for all things placed in the scene,\r\n     * e.g. at walls or on the floor.\r\n     */\n    var Item = function (_super) {\n      __extends(Item, _super);\n      /** Constructs an item.\r\n       * @param model TODO\r\n       * @param metadata TODO\r\n       * @param geometry TODO\r\n       * @param material TODO\r\n       * @param position TODO\r\n       * @param rotation TODO\r\n       * @param scale TODO\r\n       */\n\n\n      function Item(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this);\n\n        this.model = model;\n        this.metadata = metadata;\n        /** */\n\n        this.errorGlow = new THREE.Mesh();\n        /** */\n\n        this.hover = false;\n        /** */\n\n        this.selected = false;\n        /** */\n\n        this.highlighted = false;\n        /** */\n\n        this.error = false;\n        /** */\n\n        this.emissiveColor = 0x444444;\n        /** */\n\n        this.errorColor = 0xff0000;\n        /** Does this object affect other floor items */\n\n        this.obstructFloorMoves = true;\n        /** Does this object affect other in wall items */\n\n        this.obstructInWallMoves = false;\n        /** Does this object affect other on floor items */\n\n        this.obstructOnFloorMoves = false;\n        /** Does this object affect other on ceiling items */\n\n        this.obstructCeilingMoves = false;\n        /** Show rotate option in context menu */\n\n        this.allowRotate = true;\n        /** */\n\n        this.fixed = false;\n        /** dragging */\n\n        this.dragOffset = new THREE.Vector3();\n        /** */\n\n        this.getHeight = function () {\n          return this.halfSize.y * 2.0;\n        };\n        /** */\n\n\n        this.getWidth = function () {\n          return this.halfSize.x * 2.0;\n        };\n        /** */\n\n\n        this.getDepth = function () {\n          return this.halfSize.z * 2.0;\n        };\n        /** */\n\n\n        this.getElevation = function () {\n          return this.position.y - this.halfSize.y;\n        };\n        /** */\n\n\n        this.initObject = function (position) {\n          this.placeInRoom(position); // select and stuff\n\n          this.scene.needsUpdate = true;\n        };\n\n        this.scene = this.model.scene;\n        this.geometry = geometry;\n        this.material = material;\n        this.errorColor = 0xff0000;\n        this.resizable = metadata.resizable;\n        this.castShadow = true;\n        this.receiveShadow = true;\n        this.geometry = geometry;\n        this.material = material;\n\n        if (position) {\n          this.position.copy(position);\n          this.position_set = true;\n        } else {\n          this.position_set = false;\n        } // center in its boundingbox\n\n\n        this.geometry.computeBoundingBox();\n        this.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(-0.5 * (this.geometry.boundingBox.max.x + this.geometry.boundingBox.min.x), -0.5 * (this.geometry.boundingBox.max.y + this.geometry.boundingBox.min.y), -0.5 * (this.geometry.boundingBox.max.z + this.geometry.boundingBox.min.z)));\n        this.geometry.computeBoundingBox();\n        this.halfSize = this.objectHalfSize();\n\n        if (rotation) {\n          this.rotation.y = rotation;\n        }\n\n        if (scale != null) {\n          this.setScale(scale.x, scale.y, scale.z);\n        }\n      }\n\n      ;\n      /** */\n\n      Item.prototype.remove = function () {\n        this.scene.removeItem(this);\n      };\n      /** */\n\n\n      Item.prototype.isElevationAdjustable = function () {\n        return false;\n      };\n      /** */\n\n\n      Item.prototype.elevate = function (elevation) {\n        if (elevation > 0 && elevation < BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y)) {\n          this.position.y = this.halfSize.y + elevation;\n        }\n      };\n      /** */\n\n\n      Item.prototype.resize = function (height, width, depth) {\n        if (height > 0 && width > 0 && depth > 0) {\n          var x = width / this.getWidth();\n          var y = height / this.getHeight();\n          var z = depth / this.getDepth();\n          this.setScale(x, y, z);\n        }\n      };\n      /** */\n\n\n      Item.prototype.setScale = function (x, y, z) {\n        var scaleVec = new THREE.Vector3(x, y, z);\n        this.halfSize.multiply(scaleVec);\n        scaleVec.multiply(this.scale);\n        this.scale.set(scaleVec.x, scaleVec.y, scaleVec.z);\n        this.resized();\n        this.scene.needsUpdate = true;\n      };\n\n      ;\n      /** */\n\n      Item.prototype.setFixed = function (fixed) {\n        this.fixed = fixed;\n      };\n      /** */\n\n\n      Item.prototype.removed = function () {};\n      /** on is a bool */\n\n\n      Item.prototype.updateHighlight = function () {\n        var on = this.hover || this.selected;\n        this.highlighted = on; // eslint-disable-next-line no-unused-vars\n\n        var hex = on ? this.emissiveColor : 0x000000; // eslint-disable-next-line no-unused-vars\n\n        var materials = this.material.materials; // if (materials) {\n        //   (<THREE.MeshFaceMaterial>this.material).materials.forEach((material) => {\n        //     // TODO_Ekki emissive doesn't exist anymore?\n        //     if (material) {\n        //       if (material.emissive) {\n        //         (<any>material).emissive.setHex(hex);\n        //       }\n        //     }\n        //   });\n        // }\n      };\n      /** */\n\n\n      Item.prototype.mouseOver = function () {\n        this.hover = true;\n        this.updateHighlight();\n      };\n\n      ;\n      /** */\n\n      Item.prototype.mouseOff = function () {\n        this.hover = false;\n        this.updateHighlight();\n      };\n\n      ;\n      /** */\n\n      Item.prototype.setSelected = function () {\n        this.selected = true;\n        this.updateHighlight();\n      };\n\n      ;\n      /** */\n\n      Item.prototype.setUnselected = function () {\n        this.selected = false;\n        this.updateHighlight();\n      };\n\n      ;\n      /** intersection has attributes point (vec3) and object (THREE.Mesh) */\n\n      Item.prototype.clickPressed = function (intersection) {\n        this.dragOffset.copy(intersection.point).sub(this.position);\n      };\n\n      ;\n      /** */\n\n      Item.prototype.clickDragged = function (intersection) {\n        if (intersection) {\n          this.moveToPosition(intersection.point.sub(this.dragOffset), intersection);\n        }\n      };\n\n      ;\n      /** */\n\n      Item.prototype.rotate = function (intersection) {\n        if (intersection) {\n          var angle = BP3D.Core.Utils.angle(0, 1, intersection.point.x - this.position.x, intersection.point.z - this.position.z);\n          var snapTolerance = Math.PI / 16.0; // snap to intervals near Math.PI/2\n\n          for (var i = -4; i <= 4; i++) {\n            if (Math.abs(angle - i * (Math.PI / 2)) < snapTolerance) {\n              angle = i * (Math.PI / 2);\n              break;\n            }\n          }\n\n          this.rotation.y = angle;\n        }\n      };\n      /** */\n\n\n      Item.prototype.moveToPosition = function (vec3, intersection) {\n        this.position.copy(vec3);\n      };\n      /** */\n\n\n      Item.prototype.clickReleased = function () {\n        if (this.error) {\n          this.hideError();\n        }\n      };\n\n      ;\n      /**\r\n       * Returns an array of planes to use other than the ground plane\r\n       * for passing intersection to clickPressed and clickDragged\r\n       */\n\n      Item.prototype.customIntersectionPlanes = function () {\n        return [];\n      };\n      /**\r\n       * returns the 2d corners of the bounding polygon\r\n       *\r\n       * offset is Vector3 (used for getting corners of object at a new position)\r\n       *\r\n       * TODO: handle rotated objects better!\r\n       */\n\n\n      Item.prototype.getCorners = function (xDim, yDim, position) {\n        position = position || this.position;\n        var halfSize = this.halfSize.clone();\n        var c1 = new THREE.Vector3(-halfSize.x, 0, -halfSize.z);\n        var c2 = new THREE.Vector3(halfSize.x, 0, -halfSize.z);\n        var c3 = new THREE.Vector3(halfSize.x, 0, halfSize.z);\n        var c4 = new THREE.Vector3(-halfSize.x, 0, halfSize.z);\n        var transform = new THREE.Matrix4(); //console.log(this.rotation.y);\n\n        transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\n\n        c1.applyMatrix4(transform);\n        c2.applyMatrix4(transform);\n        c3.applyMatrix4(transform);\n        c4.applyMatrix4(transform);\n        c1.add(position);\n        c2.add(position);\n        c3.add(position);\n        c4.add(position); //halfSize.applyMatrix4(transform);\n        //var min = position.clone().sub(halfSize);\n        //var max = position.clone().add(halfSize);\n\n        var corners = [{\n          x: c1.x,\n          y: c1.z\n        }, {\n          x: c2.x,\n          y: c2.z\n        }, {\n          x: c3.x,\n          y: c3.z\n        }, {\n          x: c4.x,\n          y: c4.z\n        }];\n        return corners;\n      };\n      /**\r\n       * returns the 2d corners of the bounding polygon\r\n       *\r\n       * offset is Vector3 (used for getting corners of object at a new position)\r\n       *\r\n       * TODO: handle rotated objects better!\r\n       */\n\n\n      Item.prototype.getCornersXZ = function (xDim, yDim, position) {\n        position = position || this.position;\n        var halfSize = this.halfSize.clone();\n        let wallTol = 15;\n        var c1 = new THREE.Vector3(-(halfSize.x + wallTol), 0, -(halfSize.z + wallTol));\n        var c2 = new THREE.Vector3(halfSize.x + wallTol, 0, -(halfSize.z + wallTol));\n        var c3 = new THREE.Vector3(halfSize.x + wallTol, 0, halfSize.z + wallTol);\n        var c4 = new THREE.Vector3(-(halfSize.x + wallTol), 0, halfSize.z + wallTol);\n        var transform = new THREE.Matrix4(); //console.log(this.rotation.y);\n\n        transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\n\n        c1.applyMatrix4(transform);\n        c2.applyMatrix4(transform);\n        c3.applyMatrix4(transform);\n        c4.applyMatrix4(transform);\n        c1.add(position);\n        c2.add(position);\n        c3.add(position);\n        c4.add(position); //halfSize.applyMatrix4(transform);\n        //var min = position.clone().sub(halfSize);\n        //var max = position.clone().add(halfSize);\n\n        var corners = [{\n          x: c1.x,\n          y: c1.z\n        }, {\n          x: c2.x,\n          y: c2.z\n        }, {\n          x: c3.x,\n          y: c3.z\n        }, {\n          x: c4.x,\n          y: c4.z\n        }];\n        return corners;\n      };\n      /**\r\n       * returns the 2d corners of the bounding polygon\r\n       *\r\n       * offset is Vector3 (used for getting corners of object at a new position)\r\n       *\r\n       * TODO: handle rotated objects better!\r\n       */\n\n\n      Item.prototype.getCornersXZBIG = function (xDim, yDim, position) {\n        position = position || this.position;\n        var halfSize = this.halfSize.clone();\n        let maxSize = Math.max(halfSize.x, halfSize.z);\n        let wallTol = 15;\n        var c1 = new THREE.Vector3(-(maxSize + wallTol), 0, -(maxSize + wallTol));\n        var c2 = new THREE.Vector3(maxSize + wallTol, 0, -(maxSize + wallTol));\n        var c3 = new THREE.Vector3(maxSize + wallTol, 0, maxSize + wallTol);\n        var c4 = new THREE.Vector3(-(maxSize + wallTol), 0, maxSize + wallTol);\n        var transform = new THREE.Matrix4(); //console.log(this.rotation.y);\n\n        transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\n\n        c1.applyMatrix4(transform);\n        c2.applyMatrix4(transform);\n        c3.applyMatrix4(transform);\n        c4.applyMatrix4(transform);\n        c1.add(position);\n        c2.add(position);\n        c3.add(position);\n        c4.add(position); //halfSize.applyMatrix4(transform);\n        //var min = position.clone().sub(halfSize);\n        //var max = position.clone().add(halfSize);\n\n        var corners = [{\n          x: c1.x,\n          y: c1.z\n        }, {\n          x: c2.x,\n          y: c2.z\n        }, {\n          x: c3.x,\n          y: c3.z\n        }, {\n          x: c4.x,\n          y: c4.z\n        }];\n        return corners;\n      };\n      /**\r\n       * returns the 2d corners of the bounding polygon\r\n       *\r\n       * offset is Vector3 (used for getting corners of object at a new position)\r\n       *\r\n       * TODO: handle rotated objects better!\r\n       */\n\n\n      Item.prototype.getCornersXY = function (xDim, yDim, position) {\n        position = position || this.position;\n        var halfSize = this.halfSize.clone();\n        var c1 = new THREE.Vector3(-halfSize.x, -halfSize.y, 0);\n        var c2 = new THREE.Vector3(halfSize.x, -halfSize.y, 0);\n        var c3 = new THREE.Vector3(halfSize.x, halfSize.y, 0);\n        var c4 = new THREE.Vector3(-halfSize.x, halfSize.y, 0);\n        var transform = new THREE.Matrix4(); //console.log(this.rotation.y);\n\n        transform.makeRotationY(this.rotation.z); //  + Math.PI/2)\n\n        c1.applyMatrix4(transform);\n        c2.applyMatrix4(transform);\n        c3.applyMatrix4(transform);\n        c4.applyMatrix4(transform);\n        c1.add(position);\n        c2.add(position);\n        c3.add(position);\n        c4.add(position); //halfSize.applyMatrix4(transform);\n        //var min = position.clone().sub(halfSize);\n        //var max = position.clone().add(halfSize);\n\n        var corners = [{\n          x: c1.x,\n          y: c1.y\n        }, {\n          x: c2.x,\n          y: c2.y\n        }, {\n          x: c3.x,\n          y: c3.y\n        }, {\n          x: c4.x,\n          y: c4.y\n        }];\n        return corners;\n      };\n      /**\r\n       * returns the 2d corners of the bounding polygon\r\n       *\r\n       * offset is Vector3 (used for getting corners of object at a new position)\r\n       *\r\n       * TODO: handle rotated objects better!\r\n       */\n\n\n      Item.prototype.getCornersYZ = function (xDim, yDim, position) {\n        position = position || this.position;\n        var halfSize = this.halfSize.clone();\n        var c1 = new THREE.Vector3(0, -halfSize.y, -halfSize.z);\n        var c2 = new THREE.Vector3(0, halfSize.y, -halfSize.z);\n        var c3 = new THREE.Vector3(0, halfSize.y, halfSize.z);\n        var c4 = new THREE.Vector3(0, -halfSize.y, halfSize.z);\n        var transform = new THREE.Matrix4(); //console.log(this.rotation.y);\n\n        transform.makeRotationY(this.rotation.x); //  + Math.PI/2)\n\n        c1.applyMatrix4(transform);\n        c2.applyMatrix4(transform);\n        c3.applyMatrix4(transform);\n        c4.applyMatrix4(transform);\n        c1.add(position);\n        c2.add(position);\n        c3.add(position);\n        c4.add(position); //halfSize.applyMatrix4(transform);\n        //var min = position.clone().sub(halfSize);\n        //var max = position.clone().add(halfSize);\n\n        var corners = [{\n          x: c1.y,\n          y: c1.z\n        }, {\n          x: c2.y,\n          y: c2.z\n        }, {\n          x: c3.y,\n          y: c3.z\n        }, {\n          x: c4.y,\n          y: c4.z\n        }];\n        return corners;\n      };\n      /** */\n\n\n      Item.prototype.showError = function (vec3) {\n        vec3 = vec3 || this.position;\n\n        if (!this.error) {\n          this.error = true;\n          this.errorGlow = this.createGlow(this.errorColor, 0.8, true);\n          this.scene.add(this.errorGlow);\n        }\n\n        this.errorGlow.position.copy(vec3);\n      };\n      /** */\n\n\n      Item.prototype.hideError = function () {\n        if (this.error) {\n          this.error = false;\n          this.scene.remove(this.errorGlow);\n        }\n      };\n      /** */\n\n\n      Item.prototype.objectHalfSize = function () {\n        var objectBox = new THREE.Box3();\n        objectBox.setFromObject(this);\n        return objectBox.max.clone().sub(objectBox.min).divideScalar(2);\n      };\n      /** */\n\n\n      Item.prototype.createGlow = function (color, opacity, ignoreDepth) {\n        ignoreDepth = ignoreDepth || false;\n        opacity = opacity || 0.2;\n        var glowMaterial = new THREE.MeshBasicMaterial({\n          color: color,\n          blending: THREE.AdditiveBlending,\n          opacity: 0.2,\n          transparent: true,\n          depthTest: !ignoreDepth\n        });\n        var glow = new THREE.Mesh(this.geometry.clone(), glowMaterial);\n        glow.position.copy(this.position);\n        glow.rotation.copy(this.rotation);\n        glow.scale.copy(this.scale);\n        return glow;\n      };\n\n      ;\n      return Item;\n    }(THREE.Mesh);\n\n    Items.Item = Item;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /** */\n    var cornerTolerance = 20;\n    /**\r\n     * Corners are used to define Walls.\r\n     */\n\n    var Corner = function () {\n      /** Constructs a corner.\r\n       * @param floorplan The associated floorplan.\r\n       * @param x X coordinate.\r\n       * @param y Y coordinate.\r\n       * @param id An optional unique id. If not set, created internally.\r\n       */\n      function Corner(floorplan, x, y, id) {\n        this.floorplan = floorplan;\n        this.x = x;\n        this.y = y;\n        this.id = id;\n        /** Array of start walls. */\n\n        this.wallStarts = [];\n        /** Array of end walls. */\n\n        this.wallEnds = [];\n        /** Callbacks to be fired on movement. */\n\n        this.moved_callbacks = $.Callbacks();\n        /** Callbacks to be fired on removal. */\n\n        this.deleted_callbacks = $.Callbacks();\n        /** Callbacks to be fired in case of action. */\n\n        this.action_callbacks = $.Callbacks();\n        this.id = id || BP3D.Core.Utils.guid();\n      }\n      /** Add function to moved callbacks.\r\n       * @param func The function to be added.\r\n       */\n\n\n      Corner.prototype.fireOnMove = function (func) {\n        this.moved_callbacks.add(func);\n      };\n      /** Add function to deleted callbacks.\r\n       * @param func The function to be added.\r\n       */\n\n\n      Corner.prototype.fireOnDelete = function (func) {\n        this.deleted_callbacks.add(func);\n      };\n      /** Add function to action callbacks.\r\n       * @param func The function to be added.\r\n       */\n\n\n      Corner.prototype.fireOnAction = function (func) {\n        this.action_callbacks.add(func);\n      };\n      /**\r\n       * @returns\r\n       * @deprecated\r\n       */\n\n\n      Corner.prototype.getX = function () {\n        return this.x;\n      };\n      /**\r\n       * @returns\r\n       * @deprecated\r\n       */\n\n\n      Corner.prototype.getY = function () {\n        return this.y;\n      };\n      /**\r\n       *\r\n       */\n\n\n      Corner.prototype.snapToAxis = function (tolerance) {\n        // try to snap this corner to an axis\n        var snapped = {\n          x: false,\n          y: false\n        };\n        var scope = this;\n        this.adjacentCorners().forEach(function (corner) {\n          if (Math.abs(corner.x - scope.x) < tolerance) {\n            scope.x = corner.x;\n            snapped.x = true;\n          }\n\n          if (Math.abs(corner.y - scope.y) < tolerance) {\n            scope.y = corner.y;\n            snapped.y = true;\n          }\n        });\n        return snapped;\n      };\n      /** Moves corner relatively to new position.\r\n       * @param dx The delta x.\r\n       * @param dy The delta y.\r\n       */\n\n\n      Corner.prototype.relativeMove = function (dx, dy) {\n        this.move(this.x + dx, this.y + dy);\n      };\n\n      Corner.prototype.fireAction = function (action) {\n        this.action_callbacks.fire(action);\n      };\n      /** Remove callback. Fires the delete callbacks. */\n\n\n      Corner.prototype.remove = function () {\n        this.deleted_callbacks.fire(this);\n      };\n      /** Removes all walls. */\n\n\n      Corner.prototype.removeAll = function () {\n        for (let i = 0; i < this.wallStarts.length; i++) {\n          this.wallStarts[i].remove();\n        }\n\n        for (let i = 0; i < this.wallEnds.length; i++) {\n          this.wallEnds[i].remove();\n        }\n\n        this.remove();\n      };\n      /** Moves corner to new position.\r\n       * @param newX The new x position.\r\n       * @param newY The new y position.\r\n       */\n\n\n      Corner.prototype.move = function (newX, newY) {\n        this.x = newX;\n        this.y = newY;\n        this.mergeWithIntersected();\n        this.moved_callbacks.fire(this.x, this.y);\n        this.wallStarts.forEach(function (wall) {\n          wall.fireMoved();\n        });\n        this.wallEnds.forEach(function (wall) {\n          wall.fireMoved();\n        });\n      };\n      /** Gets the adjacent corners.\r\n       * @returns Array of corners.\r\n       */\n\n\n      Corner.prototype.adjacentCorners = function () {\n        var retArray = [];\n\n        for (let i = 0; i < this.wallStarts.length; i++) {\n          retArray.push(this.wallStarts[i].getEnd());\n        }\n\n        for (let i = 0; i < this.wallEnds.length; i++) {\n          retArray.push(this.wallEnds[i].getStart());\n        }\n\n        return retArray;\n      };\n      /** Checks if a wall is connected.\r\n       * @param wall A wall.\r\n       * @returns True in case of connection.\r\n       */\n\n\n      Corner.prototype.isWallConnected = function (wall) {\n        for (let i = 0; i < this.wallStarts.length; i++) {\n          if (this.wallStarts[i] === wall) {\n            return true;\n          }\n        }\n\n        for (let i = 0; i < this.wallEnds.length; i++) {\n          if (this.wallEnds[i] === wall) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n      /**\r\n       *\r\n       */\n\n\n      Corner.prototype.distanceFrom = function (x, y) {\n        var distance = BP3D.Core.Utils.distance(x, y, this.x, this.y); //console.log('x,y ' + x + ',' + y + ' to ' + this.getX() + ',' + this.getY() + ' is ' + distance);\n\n        return distance;\n      };\n      /** Gets the distance from a wall.\r\n       * @param wall A wall.\r\n       * @returns The distance.\r\n       */\n\n\n      Corner.prototype.distanceFromWall = function (wall) {\n        return wall.distanceFrom(this.x, this.y);\n      };\n      /** Gets the distance from a corner.\r\n       * @param corner A corner.\r\n       * @returns The distance.\r\n       */\n\n\n      Corner.prototype.distanceFromCorner = function (corner) {\n        return this.distanceFrom(corner.x, corner.y);\n      };\n      /** Detaches a wall.\r\n       * @param wall A wall.\r\n       */\n\n\n      Corner.prototype.detachWall = function (wall) {\n        BP3D.Core.Utils.removeValue(this.wallStarts, wall);\n        BP3D.Core.Utils.removeValue(this.wallEnds, wall);\n\n        if (this.wallStarts.length === 0 && this.wallEnds.length === 0) {\n          this.remove();\n        }\n      };\n      /** Attaches a start wall.\r\n       * @param wall A wall.\r\n       */\n\n\n      Corner.prototype.attachStart = function (wall) {\n        this.wallStarts.push(wall);\n      };\n      /** Attaches an end wall.\r\n       * @param wall A wall.\r\n       */\n\n\n      Corner.prototype.attachEnd = function (wall) {\n        this.wallEnds.push(wall);\n      };\n      /** Get wall to corner.\r\n       * @param corner A corner.\r\n       * @return The associated wall or null.\r\n       */\n\n\n      Corner.prototype.wallTo = function (corner) {\n        for (var i = 0; i < this.wallStarts.length; i++) {\n          if (this.wallStarts[i].getEnd() === corner) {\n            return this.wallStarts[i];\n          }\n        }\n\n        return null;\n      };\n      /** Get wall from corner.\r\n       * @param corner A corner.\r\n       * @return The associated wall or null.\r\n       */\n\n\n      Corner.prototype.wallFrom = function (corner) {\n        for (var i = 0; i < this.wallEnds.length; i++) {\n          if (this.wallEnds[i].getStart() === corner) {\n            return this.wallEnds[i];\n          }\n        }\n\n        return null;\n      };\n      /** Get wall to or from corner.\r\n       * @param corner A corner.\r\n       * @return The associated wall or null.\r\n       */\n\n\n      Corner.prototype.wallToOrFrom = function (corner) {\n        return this.wallTo(corner) || this.wallFrom(corner);\n      };\n      /**\r\n       *\r\n       */\n\n\n      Corner.prototype.combineWithCorner = function (corner) {\n        // update position to other corner's\n        this.x = corner.x;\n        this.y = corner.y; // absorb the other corner's wallStarts and wallEnds\n\n        for (let i = corner.wallStarts.length - 1; i >= 0; i--) {\n          corner.wallStarts[i].setStart(this);\n        }\n\n        for (let i = corner.wallEnds.length - 1; i >= 0; i--) {\n          corner.wallEnds[i].setEnd(this);\n        } // delete the other corner\n\n\n        corner.removeAll();\n        this.removeDuplicateWalls();\n        this.floorplan.update();\n      };\n\n      Corner.prototype.mergeWithIntersected = function () {\n        //console.log('mergeWithIntersected for object: ' + this.type);\n        // check corners\n        for (var i = 0; i < this.floorplan.getCorners().length; i++) {\n          var corner = this.floorplan.getCorners()[i];\n\n          if (this.distanceFromCorner(corner) < cornerTolerance && corner !== this) {\n            this.combineWithCorner(corner);\n            return true;\n          }\n        } // check walls\n\n\n        for (let i = 0; i < this.floorplan.getWalls().length; i++) {\n          var wall = this.floorplan.getWalls()[i];\n\n          if (this.distanceFromWall(wall) < cornerTolerance && !this.isWallConnected(wall)) {\n            // update position to be on wall\n            var intersection = BP3D.Core.Utils.closestPointOnLine(this.x, this.y, wall.getStart().x, wall.getStart().y, wall.getEnd().x, wall.getEnd().y);\n            this.x = intersection.x;\n            this.y = intersection.y; // merge this corner into wall by breaking wall into two parts\n\n            this.floorplan.newWall(this, wall.getEnd());\n            wall.setEnd(this);\n            this.floorplan.update();\n            return true;\n          }\n        }\n\n        return false;\n      };\n      /** Ensure we do not have duplicate walls (i.e. same start and end points) */\n\n\n      Corner.prototype.removeDuplicateWalls = function () {\n        // delete the wall between these corners, if it exists\n        var wallEndpoints = {};\n        var wallStartpoints = {};\n\n        for (let i = this.wallStarts.length - 1; i >= 0; i--) {\n          if (this.wallStarts[i].getEnd() === this) {\n            // remove zero length wall \n            this.wallStarts[i].remove();\n          } else if (this.wallStarts[i].getEnd().id in wallEndpoints) {\n            // remove duplicated wall\n            this.wallStarts[i].remove();\n          } else {\n            wallEndpoints[this.wallStarts[i].getEnd().id] = true;\n          }\n        }\n\n        for (let i = this.wallEnds.length - 1; i >= 0; i--) {\n          if (this.wallEnds[i].getStart() === this) {\n            // removed zero length wall \n            this.wallEnds[i].remove();\n          } else if (this.wallEnds[i].getStart().id in wallStartpoints) {\n            // removed duplicated wall\n            this.wallEnds[i].remove();\n          } else {\n            wallStartpoints[this.wallEnds[i].getStart().id] = true;\n          }\n        }\n      };\n\n      return Corner;\n    }();\n\n    Model.Corner = Corner;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /**\r\n     * Half Edges are created by Room.\r\n     *\r\n     * Once rooms have been identified, Half Edges are created for each interior wall.\r\n     *\r\n     * A wall can have two half edges if it is visible from both sides.\r\n     */\n    var HalfEdge = function () {\n      /**\r\n       * Constructs a half edge.\r\n       * @param room The associated room.\r\n       * @param wall The corresponding wall.\r\n       * @param front True if front side.\r\n       */\n      function HalfEdge(room, wall, front) {\n        this.room = room;\n        this.wall = wall;\n        this.front = front;\n        /** used for intersection testing... not convinced this belongs here */\n\n        this.plane = null;\n        this.box = null;\n        /** transform from world coords to wall planes (z=0) */\n\n        this.interiorTransform = new THREE.Matrix4();\n        /** transform from world coords to wall planes (z=0) */\n\n        this.invInteriorTransform = new THREE.Matrix4();\n        /** transform from world coords to wall planes (z=0) */\n\n        this.exteriorTransform = new THREE.Matrix4();\n        /** transform from world coords to wall planes (z=0) */\n\n        this.invExteriorTransform = new THREE.Matrix4();\n        /** */\n\n        this.redrawCallbacks = $.Callbacks();\n        this.edgeSelectedCallbacks = $.Callbacks();\n        this.edgeUnSelectedCallbacks = $.Callbacks();\n        /**\r\n         * this feels hacky, but need wall items\r\n         */\n\n        this.generatePlane = function () {\n          function transformCorner(corner) {\n            return new THREE.Vector3(corner.x, 0, corner.y);\n          }\n\n          var v1 = transformCorner(this.interiorStart());\n          var v2 = transformCorner(this.interiorEnd());\n          var v3 = v2.clone();\n          v3.y = this.wall.height;\n          var v4 = v1.clone();\n          v4.y = this.wall.height;\n          var geometry = new THREE.Geometry();\n          geometry.vertices = [v1, v2, v3, v4];\n          geometry.faces.push(new THREE.Face3(0, 1, 2));\n          geometry.faces.push(new THREE.Face3(0, 2, 3));\n          geometry.computeFaceNormals();\n          geometry.computeBoundingBox();\n          this.plane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\n          this.plane.visible = false;\n          this.plane.edge = this; // js monkey patch\n\n          this.computeTransforms(this.interiorTransform, this.invInteriorTransform, this.interiorStart(), this.interiorEnd());\n          this.computeTransforms(this.exteriorTransform, this.invExteriorTransform, this.exteriorStart(), this.exteriorEnd());\n        };\n\n        this.front = front || false;\n        this.offset = wall.thickness / 2.0;\n        this.height = wall.height;\n\n        if (this.front) {\n          this.wall.frontEdge = this;\n        } else {\n          this.wall.backEdge = this;\n        }\n      }\n\n      HalfEdge.prototype.drawOutline = function () {\n        this.box = new THREE.BoxHelper(this.plane, 0xffff00);\n        this.edgeSelectedCallbacks.fire(this.box);\n      };\n\n      HalfEdge.prototype.removeOutline = function () {\n        this.edgeUnSelectedCallbacks.fire(this.box);\n      };\n      /**\r\n       *\r\n       */\n\n\n      HalfEdge.prototype.getTexture = function () {\n        if (this.front) {\n          return this.wall.frontTexture;\n        } else {\n          return this.wall.backTexture;\n        }\n      };\n      /**\r\n       *\r\n       */\n\n\n      HalfEdge.prototype.setTexture = function (textureUrl, textureStretch, textureScale) {\n        var texture = {\n          url: textureUrl,\n          stretch: textureStretch,\n          scale: textureScale\n        };\n\n        if (this.front) {\n          this.wall.frontTexture = texture;\n        } else {\n          this.wall.backTexture = texture;\n        }\n\n        this.redrawCallbacks.fire();\n      };\n\n      HalfEdge.prototype.interiorDistance = function () {\n        var start = this.interiorStart();\n        var end = this.interiorEnd();\n        return BP3D.Core.Utils.distance(start.x, start.y, end.x, end.y);\n      };\n\n      HalfEdge.prototype.computeTransforms = function (transform, invTransform, start, end) {\n        var v1 = start;\n        var v2 = end;\n        var angle = BP3D.Core.Utils.angle(1, 0, v2.x - v1.x, v2.y - v1.y);\n        var tt = new THREE.Matrix4();\n        tt.makeTranslation(-v1.x, 0, -v1.y);\n        var tr = new THREE.Matrix4();\n        tr.makeRotationY(-angle);\n        transform.multiplyMatrices(tr, tt);\n        invTransform.getInverse(transform);\n      };\n      /** Gets the distance from specified point.\r\n       * @param x X coordinate of the point.\r\n       * @param y Y coordinate of the point.\r\n       * @returns The distance.\r\n       */\n\n\n      HalfEdge.prototype.distanceTo = function (x, y) {\n        // x, y, x1, y1, x2, y2\n        return BP3D.Core.Utils.pointDistanceFromLine(x, y, this.interiorStart().x, this.interiorStart().y, this.interiorEnd().x, this.interiorEnd().y);\n      };\n\n      HalfEdge.prototype.getStart = function () {\n        if (this.front) {\n          return this.wall.getStart();\n        } else {\n          return this.wall.getEnd();\n        }\n      };\n\n      HalfEdge.prototype.getEnd = function () {\n        if (this.front) {\n          return this.wall.getEnd();\n        } else {\n          return this.wall.getStart();\n        }\n      };\n\n      HalfEdge.prototype.getOppositeEdge = function () {\n        if (this.front) {\n          return this.wall.backEdge;\n        } else {\n          return this.wall.frontEdge;\n        }\n      }; // these return an object with attributes x, y\n\n\n      HalfEdge.prototype.interiorEnd = function () {\n        var vec = this.halfAngleVector(this, this.next);\n        return {\n          x: this.getEnd().x + vec.x,\n          y: this.getEnd().y + vec.y\n        };\n      };\n\n      HalfEdge.prototype.interiorStart = function () {\n        var vec = this.halfAngleVector(this.prev, this);\n        return {\n          x: this.getStart().x + vec.x,\n          y: this.getStart().y + vec.y\n        };\n      };\n\n      HalfEdge.prototype.interiorCenter = function () {\n        return {\n          x: (this.interiorStart().x + this.interiorEnd().x) / 2.0,\n          y: (this.interiorStart().y + this.interiorEnd().y) / 2.0\n        };\n      };\n\n      HalfEdge.prototype.exteriorEnd = function () {\n        var vec = this.halfAngleVector(this, this.next);\n        return {\n          x: this.getEnd().x - vec.x,\n          y: this.getEnd().y - vec.y\n        };\n      };\n\n      HalfEdge.prototype.exteriorStart = function () {\n        var vec = this.halfAngleVector(this.prev, this);\n        return {\n          x: this.getStart().x - vec.x,\n          y: this.getStart().y - vec.y\n        };\n      };\n      /** Get the corners of the half edge.\r\n       * @returns An array of x,y pairs.\r\n       */\n\n\n      HalfEdge.prototype.corners = function () {\n        return [this.interiorStart(), this.interiorEnd(), this.exteriorEnd(), this.exteriorStart()];\n      };\n      /**\r\n       * Gets CCW angle from v1 to v2\r\n       */\n\n\n      HalfEdge.prototype.halfAngleVector = function (v1, v2) {\n        // make the best of things if we dont have prev or next\n        var v1startX;\n        var v1startY;\n        var v1endX;\n        var v1endY;\n        var v2startX;\n        var v2startY;\n        var v2endX;\n        var v2endY;\n\n        if (!v1) {\n          v1startX = v2.getStart().x - (v2.getEnd().x - v2.getStart().x);\n          v1startY = v2.getStart().y - (v2.getEnd().y - v2.getStart().y);\n          v1endX = v2.getStart().x;\n          v1endY = v2.getStart().y;\n        } else {\n          v1startX = v1.getStart().x;\n          v1startY = v1.getStart().y;\n          v1endX = v1.getEnd().x;\n          v1endY = v1.getEnd().y;\n        }\n\n        if (!v2) {\n          v2startX = v1.getEnd().x;\n          v2startY = v1.getEnd().y;\n          v2endX = v1.getEnd().x + (v1.getEnd().x - v1.getStart().x);\n          v2endY = v1.getEnd().y + (v1.getEnd().y - v1.getStart().y);\n        } else {\n          v2startX = v2.getStart().x;\n          v2startY = v2.getStart().y;\n          v2endX = v2.getEnd().x;\n          v2endY = v2.getEnd().y;\n        } // CCW angle between edges\n\n\n        var theta = BP3D.Core.Utils.angle2pi(v1startX - v1endX, v1startY - v1endY, v2endX - v1endX, v2endY - v1endY); // cosine and sine of half angle\n\n        var cs = Math.cos(theta / 2.0);\n        var sn = Math.sin(theta / 2.0); // rotate v2\n\n        var v2dx = v2endX - v2startX;\n        var v2dy = v2endY - v2startY;\n        var vx = v2dx * cs - v2dy * sn;\n        var vy = v2dx * sn + v2dy * cs; // normalize\n\n        var mag = BP3D.Core.Utils.distance(0, 0, vx, vy);\n        var desiredMag = this.offset / sn;\n        var scalar = desiredMag / mag;\n        var halfAngleVector = {\n          x: vx * scalar,\n          y: vy * scalar\n        };\n        return halfAngleVector;\n      };\n\n      return HalfEdge;\n    }();\n\n    Model.HalfEdge = HalfEdge;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /** The default wall texture. */\n    var defaultWallTexture = {\n      url: BASE_URL + ASSETS + DEFAULT_WALL_MAP,\n      stretch: true,\n      scale: 0\n    };\n    /**\r\n     * A Wall is the basic element to create Rooms.\r\n     *\r\n     * Walls consists of two half edges.\r\n     */\n\n    var Wall = function () {\n      /**\r\n       * Constructs a new wall.\r\n       * @param start Start corner.\r\n       * @param end End corner.\r\n       */\n      function Wall(start, end) {\n        this.start = start;\n        this.end = end;\n        /** Front is the plane from start to end. */\n\n        this.frontEdge = null;\n        /** Back is the plane from end to start. */\n\n        this.backEdge = null;\n        /** */\n\n        this.orphan = false;\n        /** Items attached to this wall */\n\n        this.items = [];\n        /** */\n\n        this.onItems = [];\n        /** The front-side texture. */\n\n        this.frontTexture = defaultWallTexture;\n        /** The back-side texture. */\n\n        this.backTexture = defaultWallTexture;\n        /** Wall thickness. */\n\n        this.thickness = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallThickness);\n        /** Wall height. */\n\n        this.height = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight);\n        /** Actions to be applied after movement. */\n\n        this.moved_callbacks = $.Callbacks();\n        /** Actions to be applied on removal. */\n\n        this.deleted_callbacks = $.Callbacks();\n        /** Actions to be applied explicitly. */\n\n        this.action_callbacks = $.Callbacks();\n        this.id = this.getUuid();\n        this.start.attachStart(this);\n        this.end.attachEnd(this);\n      }\n\n      Wall.prototype.getUuid = function () {\n        return [this.start.id, this.end.id].join();\n      };\n\n      Wall.prototype.resetFrontBack = function () {\n        this.frontEdge = null;\n        this.backEdge = null;\n        this.orphan = false;\n      };\n\n      Wall.prototype.snapToAxis = function (tolerance) {\n        // order here is important, but unfortunately arbitrary\n        this.start.snapToAxis(tolerance);\n        this.end.snapToAxis(tolerance);\n      };\n\n      Wall.prototype.fireOnMove = function (func) {\n        this.moved_callbacks.add(func);\n      };\n\n      Wall.prototype.fireOnDelete = function (func) {\n        this.deleted_callbacks.add(func);\n      };\n\n      Wall.prototype.dontFireOnDelete = function (func) {\n        this.deleted_callbacks.remove(func);\n      };\n\n      Wall.prototype.fireOnAction = function (func) {\n        this.action_callbacks.add(func);\n      };\n\n      Wall.prototype.fireAction = function (action) {\n        this.action_callbacks.fire(action);\n      };\n\n      Wall.prototype.relativeMove = function (dx, dy) {\n        this.start.relativeMove(dx, dy);\n        this.end.relativeMove(dx, dy);\n      };\n\n      Wall.prototype.fireMoved = function () {\n        this.moved_callbacks.fire();\n      };\n\n      Wall.prototype.fireRedraw = function () {\n        if (this.frontEdge) {\n          this.frontEdge.redrawCallbacks.fire();\n        }\n\n        if (this.backEdge) {\n          this.backEdge.redrawCallbacks.fire();\n        }\n      };\n\n      Wall.prototype.getStart = function () {\n        return this.start;\n      };\n\n      Wall.prototype.getEnd = function () {\n        return this.end;\n      };\n\n      Wall.prototype.getStartX = function () {\n        return this.start.getX();\n      };\n\n      Wall.prototype.getEndX = function () {\n        return this.end.getX();\n      };\n\n      Wall.prototype.getStartY = function () {\n        return this.start.getY();\n      };\n\n      Wall.prototype.getEndY = function () {\n        return this.end.getY();\n      };\n\n      Wall.prototype.remove = function () {\n        this.start.detachWall(this);\n        this.end.detachWall(this);\n        this.deleted_callbacks.fire(this);\n      };\n\n      Wall.prototype.setStart = function (corner) {\n        this.start.detachWall(this);\n        corner.attachStart(this);\n        this.start = corner;\n        this.fireMoved();\n      };\n\n      Wall.prototype.setEnd = function (corner) {\n        this.end.detachWall(this);\n        corner.attachEnd(this);\n        this.end = corner;\n        this.fireMoved();\n      };\n\n      Wall.prototype.distanceFrom = function (x, y) {\n        return BP3D.Core.Utils.pointDistanceFromLine(x, y, this.getStartX(), this.getStartY(), this.getEndX(), this.getEndY());\n      };\n      /** Return the corner opposite of the one provided.\r\n       * @param corner The given corner.\r\n       * @returns The opposite corner.\r\n       */\n\n\n      Wall.prototype.oppositeCorner = function (corner) {\n        if (this.start === corner) {\n          return this.end;\n        } else if (this.end === corner) {\n          return this.start;\n        } else {\n          console.log('Wall does not connect to corner');\n        }\n      };\n\n      return Wall;\n    }();\n\n    Model.Wall = Wall;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n/*\r\nTODO\r\nvar Vec2 = require('vec2')\r\nvar segseg = require('segseg')\r\nvar Polygon = require('polygon')\r\n*/\n\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /** Default texture to be used if nothing is provided. */\n    var defaultRoomTexture = {\n      url: BASE_URL + ASSETS + DEFAULT_FLOOR_MAP,\n      scale: 400\n    };\n    /**\r\n     * A Room is the combination of a Floorplan with a floor plane.\r\n     */\n\n    var Room = function () {\n      /**\r\n       *  ordered CCW\r\n       */\n      function Room(floorplan, corners) {\n        this.floorplan = floorplan;\n        this.corners = corners;\n        /** */\n\n        this.interiorCorners = [];\n        /** */\n\n        this.edgePointer = null;\n        /** floor plane for intersection testing */\n\n        this.floorPlane = null;\n        this.box = null;\n        /** */\n\n        this.customTexture = false;\n        /** */\n\n        this.floorChangeCallbacks = $.Callbacks();\n        this.roomSelectedCallbacks = $.Callbacks();\n        this.roomUnSelectedCallbacks = $.Callbacks();\n        this.updateWalls();\n        this.updateInteriorCorners();\n        this.generatePlane();\n      }\n\n      Room.prototype.drawOutline = function () {\n        this.box = new THREE.BoxHelper(this.floorPlane, 0xffff00);\n        this.roomSelectedCallbacks.fire(this.box);\n      };\n\n      Room.prototype.removeOutline = function () {\n        this.roomUnSelectedCallbacks.fire(this.box);\n      };\n\n      Room.prototype.getUuid = function () {\n        var cornerUuids = BP3D.Core.Utils.map(this.corners, function (c) {\n          return c.id;\n        });\n        cornerUuids.sort();\n        return cornerUuids.join();\n      };\n\n      Room.prototype.fireOnFloorChange = function (callback) {\n        this.floorChangeCallbacks.add(callback);\n      };\n\n      Room.prototype.getTexture = function () {\n        var uuid = this.getUuid();\n        var tex = this.floorplan.getFloorTexture(uuid);\n        return tex || defaultRoomTexture;\n      };\n      /**\r\n       * textureStretch always true, just an argument for consistency with walls\r\n       */\n\n\n      Room.prototype.setTexture = function (textureUrl, textureStretch, textureScale) {\n        var uuid = this.getUuid();\n        this.floorplan.setFloorTexture(uuid, textureUrl, textureScale);\n        this.floorChangeCallbacks.fire();\n      };\n\n      Room.prototype.generatePlane = function () {\n        var points = [];\n        this.interiorCorners.forEach(function (corner) {\n          points.push(new THREE.Vector2(corner.x, corner.y));\n        });\n        var shape = new THREE.Shape(points);\n        var geometry = new THREE.ShapeGeometry(shape);\n        this.floorPlane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n          side: THREE.DoubleSide\n        }));\n        this.floorPlane.visible = false;\n        this.floorPlane.rotation.set(Math.PI / 2, 0, 0);\n        this.floorPlane.room = this; // js monkey patch\n      };\n\n      Room.prototype.cycleIndex = function (index) {\n        if (index < 0) {\n          return index += this.corners.length;\n        } else {\n          return index % this.corners.length;\n        }\n      };\n\n      Room.prototype.updateInteriorCorners = function () {\n        var edge = this.edgePointer;\n\n        while (true) {\n          this.interiorCorners.push(edge.interiorStart());\n          edge.generatePlane();\n\n          if (edge.next === this.edgePointer) {\n            break;\n          } else {\n            edge = edge.next;\n          }\n        }\n      };\n      /**\r\n       * Populates each wall's half edge relating to this room\r\n       * this creates a fancy doubly connected edge list (DCEL)\r\n       */\n\n\n      Room.prototype.updateWalls = function () {\n        var prevEdge = null;\n        var firstEdge = null;\n\n        for (var i = 0; i < this.corners.length; i++) {\n          var firstCorner = this.corners[i];\n          var secondCorner = this.corners[(i + 1) % this.corners.length]; // find if wall is heading in that direction\n\n          var wallTo = firstCorner.wallTo(secondCorner);\n          var wallFrom = firstCorner.wallFrom(secondCorner);\n          var edge;\n\n          if (wallTo) {\n            edge = new Model.HalfEdge(this, wallTo, true);\n          } else if (wallFrom) {\n            edge = new Model.HalfEdge(this, wallFrom, false);\n          } else {\n            // something horrible has happened\n            console.log(\"corners arent connected by a wall, uh oh\");\n          }\n\n          if (i === 0) {\n            firstEdge = edge;\n          } else {\n            edge.prev = prevEdge;\n            prevEdge.next = edge;\n\n            if (i + 1 === this.corners.length) {\n              firstEdge.prev = edge;\n              edge.next = firstEdge;\n            }\n          }\n\n          prevEdge = edge;\n        } // hold on to an edge reference\n\n\n        this.edgePointer = firstEdge;\n      };\n\n      return Room;\n    }();\n\n    Model.Room = Room;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /** */\n    var defaultFloorPlanTolerance = 10.0;\n    /**\r\n     * A Floorplan represents a number of Walls, Corners and Rooms.\r\n     */\n\n    var Floorplan = function () {\n      /** Constructs a floorplan. */\n      function Floorplan() {\n        /** */\n        this.walls = [];\n        /** */\n\n        this.corners = [];\n        /** */\n\n        this.rooms = [];\n        /** */\n\n        this.new_wall_callbacks = $.Callbacks();\n        /** */\n\n        this.new_corner_callbacks = $.Callbacks();\n        /** */\n\n        this.redraw_callbacks = $.Callbacks();\n        /** */\n\n        this.updated_rooms = $.Callbacks();\n        /** */\n\n        this.roomLoadedCallbacks = $.Callbacks();\n        /**\r\n         * Floor textures are owned by the floorplan, because room objects are\r\n         * destroyed and created each time we change the floorplan.\r\n         * floorTextures is a map of room UUIDs (string) to a object with\r\n         * url and scale attributes.\r\n         */\n\n        this.floorTextures = {};\n      } // hack\n\n\n      Floorplan.prototype.wallEdges = function () {\n        var edges = [];\n        this.walls.forEach(function (wall) {\n          if (wall.frontEdge) {\n            edges.push(wall.frontEdge);\n          }\n\n          if (wall.backEdge) {\n            edges.push(wall.backEdge);\n          }\n        });\n        return edges;\n      }; // hack\n\n\n      Floorplan.prototype.wallEdgePlanes = function () {\n        var planes = [];\n        this.walls.forEach(function (wall) {\n          if (wall.frontEdge) {\n            planes.push(wall.frontEdge.plane);\n          }\n\n          if (wall.backEdge) {\n            planes.push(wall.backEdge.plane);\n          }\n        });\n        return planes;\n      };\n\n      Floorplan.prototype.floorPlanes = function () {\n        return BP3D.Core.Utils.map(this.rooms, function (room) {\n          return room.floorPlane;\n        });\n      };\n\n      Floorplan.prototype.fireOnNewWall = function (callback) {\n        this.new_wall_callbacks.add(callback);\n      };\n\n      Floorplan.prototype.fireOnNewCorner = function (callback) {\n        this.new_corner_callbacks.add(callback);\n      };\n\n      Floorplan.prototype.fireOnRedraw = function (callback) {\n        this.redraw_callbacks.add(callback);\n      };\n\n      Floorplan.prototype.fireOnUpdatedRooms = function (callback) {\n        this.updated_rooms.add(callback);\n      };\n      /**\r\n       * Creates a new wall.\r\n       * @param start The start corner.\r\n       * @param end he end corner.\r\n       * @returns The new wall.\r\n       */\n\n\n      Floorplan.prototype.newWall = function (start, end) {\n        var wall = new Model.Wall(start, end);\n        this.walls.push(wall);\n        var scope = this;\n        wall.fireOnDelete(function () {\n          scope.removeWall(wall);\n        });\n        this.new_wall_callbacks.fire(wall);\n        this.update();\n        return wall;\n      };\n      /** Removes a wall.\r\n       * @param wall The wall to be removed.\r\n       */\n\n\n      Floorplan.prototype.removeWall = function (wall) {\n        BP3D.Core.Utils.removeValue(this.walls, wall);\n        this.update();\n      };\n      /**\r\n       * Creates a new corner.\r\n       * @param x The x coordinate.\r\n       * @param y The y coordinate.\r\n       * @param id An optional id. If unspecified, the id will be created internally.\r\n       * @returns The new corner.\r\n       */\n\n\n      Floorplan.prototype.newCorner = function (x, y, id) {\n        var _this = this;\n\n        var corner = new Model.Corner(this, x, y, id);\n        this.corners.push(corner);\n        corner.fireOnDelete(function () {\n          // eslint-disable-next-line no-unused-expressions\n          _this.removeCorner;\n        });\n        this.new_corner_callbacks.fire(corner);\n        return corner;\n      };\n      /** Removes a corner.\r\n       * @param corner The corner to be removed.\r\n       */\n\n\n      Floorplan.prototype.removeCorner = function (corner) {\n        BP3D.Core.Utils.removeValue(this.corners, corner);\n      };\n      /** Gets the walls. */\n\n\n      Floorplan.prototype.getWalls = function () {\n        return this.walls;\n      };\n      /** Gets the corners. */\n\n\n      Floorplan.prototype.getCorners = function () {\n        return this.corners;\n      };\n      /** Gets the rooms. */\n\n\n      Floorplan.prototype.getRooms = function () {\n        return this.rooms;\n      };\n\n      Floorplan.prototype.overlappedCorner = function (x, y, tolerance) {\n        tolerance = tolerance || defaultFloorPlanTolerance;\n\n        for (var i = 0; i < this.corners.length; i++) {\n          if (this.corners[i].distanceFrom(x, y) < tolerance) {\n            return this.corners[i];\n          }\n        }\n\n        return null;\n      };\n\n      Floorplan.prototype.overlappedWall = function (x, y, tolerance) {\n        tolerance = tolerance || defaultFloorPlanTolerance;\n\n        for (var i = 0; i < this.walls.length; i++) {\n          if (this.walls[i].distanceFrom(x, y) < tolerance) {\n            return this.walls[i];\n          }\n        }\n\n        return null;\n      }; // import and export -- cleanup\n\n\n      Floorplan.prototype.saveFloorplan = function () {\n        var floorplan = {\n          corners: {},\n          walls: [],\n          wallTextures: [],\n          floorTextures: {},\n          newFloorTextures: {}\n        };\n        this.corners.forEach(function (corner) {\n          floorplan.corners[corner.id] = {\n            'x': corner.x,\n            'y': corner.y\n          };\n        });\n        this.walls.forEach(function (wall) {\n          floorplan.walls.push({\n            'corner1': wall.getStart().id,\n            'corner2': wall.getEnd().id,\n            'frontTexture': wall.frontTexture,\n            'backTexture': wall.backTexture\n          });\n        });\n        floorplan.newFloorTextures = this.floorTextures;\n        return floorplan;\n      };\n\n      Floorplan.prototype.loadFloorplan = function (floorplan) {\n        this.reset();\n        var corners = {};\n\n        if (floorplan == null || !('corners' in floorplan) || !('walls' in floorplan)) {\n          return;\n        }\n\n        for (var id in floorplan.corners) {\n          var corner = floorplan.corners[id];\n          corners[id] = this.newCorner(corner.x, corner.y, id);\n        }\n\n        var scope = this;\n        floorplan.walls.forEach(function (wall) {\n          var newWall = scope.newWall(corners[wall.corner1], corners[wall.corner2]);\n\n          if (wall.frontTexture) {\n            newWall.frontTexture = wall.frontTexture;\n          }\n\n          if (wall.backTexture) {\n            newWall.backTexture = wall.backTexture;\n          }\n        });\n\n        if ('newFloorTextures' in floorplan) {\n          this.floorTextures = floorplan.newFloorTextures;\n        }\n\n        this.update();\n        this.roomLoadedCallbacks.fire();\n      };\n\n      Floorplan.prototype.getFloorTexture = function (uuid) {\n        if (uuid in this.floorTextures) {\n          return this.floorTextures[uuid];\n        } else {\n          return null;\n        }\n      };\n\n      Floorplan.prototype.setFloorTexture = function (uuid, url, scale) {\n        this.floorTextures[uuid] = {\n          url: url,\n          scale: scale\n        };\n      };\n      /** clear out obsolete floor textures */\n\n\n      Floorplan.prototype.updateFloorTextures = function () {\n        var uuids = BP3D.Core.Utils.map(this.rooms, function (room) {\n          return room.getUuid();\n        });\n\n        for (var uuid in this.floorTextures) {\n          if (!BP3D.Core.Utils.hasValue(uuids, uuid)) {\n            delete this.floorTextures[uuid];\n          }\n        }\n      };\n      /** */\n\n\n      Floorplan.prototype.reset = function () {\n        var tmpCorners = this.corners.slice(0);\n        var tmpWalls = this.walls.slice(0);\n        tmpCorners.forEach(function (corner) {\n          corner.remove();\n        });\n        tmpWalls.forEach(function (wall) {\n          wall.remove();\n        });\n        this.corners = [];\n        this.walls = [];\n      };\n      /**\r\n       * Update rooms\r\n       */\n\n\n      Floorplan.prototype.update = function () {\n        this.walls.forEach(function (wall) {\n          wall.resetFrontBack();\n        });\n        var roomCorners = this.findRooms(this.corners);\n        this.rooms = [];\n        var scope = this;\n        roomCorners.forEach(function (corners) {\n          scope.rooms.push(new Model.Room(scope, corners));\n        });\n        this.assignOrphanEdges();\n        this.updateFloorTextures();\n        this.updated_rooms.fire();\n      };\n      /**\r\n       * Returns the center of the floorplan in the y plane\r\n       */\n\n\n      Floorplan.prototype.getCenter = function () {\n        return this.getDimensions(true);\n      };\n\n      Floorplan.prototype.getSize = function () {\n        return this.getDimensions(false);\n      };\n\n      Floorplan.prototype.getDimensions = function (center) {\n        center = center || false; // otherwise, get size\n\n        var xMin = Infinity;\n        var xMax = -Infinity;\n        var zMin = Infinity;\n        var zMax = -Infinity;\n        this.corners.forEach(function (corner) {\n          if (corner.x < xMin) xMin = corner.x;\n          if (corner.x > xMax) xMax = corner.x;\n          if (corner.y < zMin) zMin = corner.y;\n          if (corner.y > zMax) zMax = corner.y;\n        });\n        var ret;\n\n        if (xMin === Infinity || xMax === -Infinity || zMin === Infinity || zMax === -Infinity) {\n          ret = new THREE.Vector3();\n        } else {\n          if (center) {\n            // center\n            ret = new THREE.Vector3((xMin + xMax) * 0.5, 0, (zMin + zMax) * 0.5);\n          } else {\n            // size\n            ret = new THREE.Vector3(xMax - xMin, 0, zMax - zMin);\n          }\n        }\n\n        return ret;\n      };\n\n      Floorplan.prototype.assignOrphanEdges = function () {\n        // kinda hacky\n        // find orphaned wall segments (i.e. not part of rooms) and\n        // give them edges\n        var orphanWalls = [];\n        this.walls.forEach(function (wall) {\n          if (!wall.backEdge && !wall.frontEdge) {\n            wall.orphan = true;\n            var back = new Model.HalfEdge(null, wall, false);\n            back.generatePlane();\n            var front = new Model.HalfEdge(null, wall, true);\n            front.generatePlane();\n            orphanWalls.push(wall);\n          }\n        });\n      };\n      /*\r\n       * Find the \"rooms\" in our planar straight-line graph.\r\n       * Rooms are set of the smallest (by area) possible cycles in this graph.\r\n       * @param corners The corners of the floorplan.\r\n       * @returns The rooms, each room as an array of corners.\r\n       */\n\n\n      Floorplan.prototype.findRooms = function (corners) {\n        function _calculateTheta(previousCorner, currentCorner, nextCorner) {\n          var theta = BP3D.Core.Utils.angle2pi(previousCorner.x - currentCorner.x, previousCorner.y - currentCorner.y, nextCorner.x - currentCorner.x, nextCorner.y - currentCorner.y);\n          return theta;\n        }\n\n        function _removeDuplicateRooms(roomArray) {\n          var results = [];\n          var lookup = {};\n\n          var hashFunc = function (corner) {\n            return corner.id;\n          };\n\n          var sep = '-';\n\n          for (var i = 0; i < roomArray.length; i++) {\n            // rooms are cycles, shift it around to check uniqueness\n            var add = true;\n            var room = roomArray[i];\n\n            for (var j = 0; j < room.length; j++) {\n              var roomShift = BP3D.Core.Utils.cycle(room, j);\n              var str = BP3D.Core.Utils.map(roomShift, hashFunc).join(sep);\n\n              if (lookup.hasOwnProperty(str)) {\n                add = false;\n              }\n            }\n\n            if (add) {\n              results.push(roomArray[i]);\n              lookup[str] = true;\n            }\n          }\n\n          return results;\n        }\n\n        function _findTightestCycle(firstCorner, secondCorner) {\n          var stack = [];\n          var next = {\n            corner: secondCorner,\n            previousCorners: [firstCorner]\n          };\n          var visited = {};\n          visited[firstCorner.id] = true;\n\n          var compFunc = function (a, b) {\n            return _calculateTheta(previousCorner, currentCorner, b) - _calculateTheta(previousCorner, currentCorner, a);\n          };\n\n          var pushFunc = function (corner) {\n            stack.push({\n              corner: corner,\n              previousCorners: previousCorners\n            });\n          };\n\n          while (next) {\n            // update previous corners, current corner, and visited corners\n            var currentCorner = next.corner;\n            visited[currentCorner.id] = true; // did we make it back to the startCorner?\n\n            if (next.corner === firstCorner && currentCorner !== secondCorner) {\n              return next.previousCorners;\n            }\n\n            var addToStack = [];\n            var adjacentCorners = next.corner.adjacentCorners();\n\n            for (let i = 0; i < adjacentCorners.length; i++) {\n              var nextCorner = adjacentCorners[i]; // is this where we came from?\n              // give an exception if its the first corner and we aren't at the second corner\n\n              if (nextCorner.id in visited && !(nextCorner === firstCorner && currentCorner !== secondCorner)) {\n                continue;\n              } // nope, throw it on the queue  \n\n\n              addToStack.push(nextCorner);\n            }\n\n            var previousCorners = next.previousCorners.slice(0);\n            previousCorners.push(currentCorner);\n\n            if (addToStack.length > 1) {\n              // visit the ones with smallest theta first\n              var previousCorner = next.previousCorners[next.previousCorners.length - 1];\n              addToStack.sort(compFunc);\n            }\n\n            if (addToStack.length > 0) {\n              // add to the stack\n              addToStack.forEach(pushFunc);\n            } // pop off the next one\n\n\n            next = stack.pop();\n          }\n\n          return [];\n        } // find tightest loops, for each corner, for each adjacent\n        // TODO: optimize this, only check corners with > 2 adjacents, or isolated cycles\n\n\n        var loops = [];\n        corners.forEach(function (firstCorner) {\n          firstCorner.adjacentCorners().forEach(function (secondCorner) {\n            loops.push(_findTightestCycle(firstCorner, secondCorner));\n          });\n        }); // remove duplicates\n\n        var uniqueLoops = _removeDuplicateRooms(loops); //remove CW loops\n\n\n        var uniqueCCWLoops = BP3D.Core.Utils.removeIf(uniqueLoops, BP3D.Core.Utils.isClockwise);\n        return uniqueCCWLoops;\n      };\n\n      return Floorplan;\n    }();\n\n    Model.Floorplan = Floorplan;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /**\r\n     * A Floor Item is an entity to be placed related to a floor.\r\n     */\n    var FloorItem = function (_super) {\n      __extends(FloorItem, _super);\n\n      function FloorItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n      }\n\n      ;\n      /** */\n\n      FloorItem.prototype.placeInRoom = function () {\n        if (!this.position_set) {\n          var center = this.model.floorplan.getCenter();\n          this.position.x = center.x;\n          this.position.z = center.z;\n          this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n        }\n      };\n\n      FloorItem.prototype.setYPos = function (yPos) {};\n      /** Take action after a resize */\n\n\n      FloorItem.prototype.resized = function () {\n        this.position.y = this.halfSize.y;\n      };\n      /** */\n\n\n      FloorItem.prototype.moveToPosition = function (vec3, intersection) {\n        // keeps the position in the room and on the floor\n        if (!this.isValidPosition(vec3)) {\n          this.showError(vec3);\n          return;\n        } else {\n          this.hideError();\n          vec3.y = this.position.y; // keep it on the floor!\n\n          this.position.copy(vec3);\n        }\n      };\n      /** */\n\n\n      FloorItem.prototype.isValidPosition = function (vec3) {\n        var corners = this.getCorners('x', 'z', vec3); // check if we are in a room\n\n        var rooms = this.model.floorplan.getRooms();\n        var isInARoom = false;\n\n        for (let i = 0; i < rooms.length; i++) {\n          if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) && !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\n            isInARoom = true;\n          }\n        }\n\n        if (!isInARoom) {\n          //console.log('object not in a room');\n          return false;\n        } // check if we are outside all other objects\n\n\n        if (this.obstructFloorMoves) {\n          let objects = this.model.scene.getItems();\n\n          for (let i = 0; i < objects.length; i++) {\n            if (objects[i] === this || !objects[i].obstructFloorMoves) {\n              continue;\n            }\n\n            if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) || BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\n              //console.log('object not outside other objects');\n              return false;\n            }\n          }\n        } // check if we are outside all other on floor objects\n\n\n        if (this.obstructOnFloorMoves) {\n          let objects = this.model.scene.getItems();\n\n          for (let i = 0; i < objects.length; i++) {\n            if (objects[i] === this || !objects[i].obstructOnFloorMoves) {\n              continue;\n            }\n\n            if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) || BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\n              //console.log('object not outside other objects');\n              return false;\n            }\n          }\n        }\n\n        return true;\n      };\n\n      return FloorItem;\n    }(Items.Item);\n\n    Items.FloorItem = FloorItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /**\r\n     * AnyWhere Item\r\n     */\n    var AnywhereItem = function (_super) {\n      __extends(AnywhereItem, _super);\n\n      function AnywhereItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n      }\n\n      ;\n      /** */\n\n      AnywhereItem.prototype.placeInRoom = function (pos) {\n        if (!this.position_set) {\n          var center = this.model.floorplan.getCenter();\n          this.position.x = center.x;\n          this.position.z = center.z;\n\n          if (pos !== null && pos !== undefined) {\n            this.position.y = pos.y;\n          } else {\n            this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n          }\n        }\n      };\n\n      AnywhereItem.prototype.setYPos = function (yPos) {\n        this.position.y = yPos;\n      };\n      /** */\n\n\n      AnywhereItem.prototype.isElevationAdjustable = function () {\n        return true;\n      };\n\n      AnywhereItem.prototype.moveToPosition = function (vec3, intersection) {\n        // keeps the position in the room\n        if (!this.isValidPosition(vec3)) {\n          this.showError(vec3);\n          return;\n        } else {\n          let yPos = this.getYPos(vec3);\n          vec3.y = yPos;\n          $(\"#item-elevation\").val(this.cmToIn(this.getElevation()).toFixed(0));\n          this.hideError();\n          this.position.copy(vec3);\n        }\n      };\n\n      AnywhereItem.prototype.cmToIn = function (cm) {\n        return cm / 2.54;\n      };\n      /** */\n\n\n      AnywhereItem.prototype.isValidPosition = function (vec3) {\n        var corners = this.getCorners('x', 'z', vec3); // check if we are in a room\n\n        var rooms = this.model.floorplan.getRooms();\n        var isInARoom = false;\n\n        for (let i = 0; i < rooms.length; i++) {\n          if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) && !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\n            isInARoom = true;\n          }\n        }\n\n        if (!isInARoom) {\n          //console.log('object not in a room');\n          return false;\n        }\n\n        return true;\n      };\n\n      AnywhereItem.prototype.getYPos = function (vec3) {\n        var corners = this.getCorners('x', 'z', vec3); // check if we are outside all other objects\n\n        let objects = this.model.scene.getItems();\n\n        for (let i = 0; i < objects.length; i++) {\n          if (objects[i] === this || objects[i].obstructCeilingMoves || objects[i].obstructOnFloorMoves) {\n            continue;\n          }\n\n          if (BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\n            // console.log('object not outside other objects');\n            return objects[i].position.y + objects[i].halfSize.y + this.halfSize.y;\n          }\n\n          if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z'))) {\n            return this.position.y;\n          }\n        }\n\n        return 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n      };\n\n      return AnywhereItem;\n    }(Items.FloorItem);\n\n    Items.AnywhereItem = AnywhereItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /**\r\n     * AnyWhere Item\r\n     */\n    var CeilingItem = function (_super) {\n      __extends(CeilingItem, _super);\n\n      function CeilingItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n\n        this.obstructCeilingMoves = true;\n        this.obstructFloorMoves = false;\n        this.castShadow = false;\n        this.receiveShadow = false;\n      }\n\n      ;\n      /** */\n\n      CeilingItem.prototype.placeInRoom = function () {\n        if (!this.position_set) {\n          var center = this.model.floorplan.getCenter();\n          this.position.x = center.x;\n          this.position.z = center.z;\n          this.position.y = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\n        }\n      };\n\n      CeilingItem.prototype.setYPos = function (yPos) {};\n\n      CeilingItem.prototype.resized = function () {\n        this.position.y = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - this.halfSize.y;\n      };\n\n      CeilingItem.prototype.moveToPosition = function (vec3, intersection) {\n        // keeps the position in the room\n        if (!this.isValidPosition(vec3)) {\n          this.showError(vec3);\n          return;\n        } else {\n          this.hideError(); // if (vec3.y < 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y)) {\n          //     vec3.y = this.position.y;\n          // } else {\n\n          vec3.y = this.position.y; // }\n\n          this.position.copy(vec3);\n        }\n      };\n      /** */\n\n\n      CeilingItem.prototype.isValidPosition = function (vec3) {\n        var corners = this.getCorners('x', 'z', vec3); // check if we are in a room\n\n        var rooms = this.model.floorplan.getRooms();\n        var isInARoom = false;\n\n        for (let i = 0; i < rooms.length; i++) {\n          if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) && !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\n            isInARoom = true;\n          }\n        }\n\n        if (!isInARoom) {\n          //console.log('object not in a room');\n          return false;\n        } // check if we are outside all other on floor objects\n\n\n        if (this.obstructCeilingMoves) {\n          let objects = this.model.scene.getItems();\n\n          for (let i = 0; i < objects.length; i++) {\n            if (objects[i] === this || !objects[i].obstructCeilingMoves) {\n              continue;\n            }\n\n            if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) || BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\n              //console.log('object not outside other objects');\n              return false;\n            }\n          }\n        }\n\n        return true;\n      };\n\n      return CeilingItem;\n    }(Items.FloorItem);\n\n    Items.CeilingItem = CeilingItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /**\r\n     * A Wall Item is an entity to be placed related to a wall.\r\n     */\n    var WallItem = function (_super) {\n      __extends(WallItem, _super);\n\n      function WallItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n        /** The currently applied wall edge. */\n\n\n        this.currentWallEdge = null;\n        /* TODO:\r\n           This caused a huge headache.\r\n           HalfEdges get destroyed/created every time floorplan is edited.\r\n           This item should store a reference to a wall and front/back,\r\n           and grab its edge reference dynamically whenever it needs it.\r\n         */\n\n        /** used for finding rotations */\n\n        this.refVec = new THREE.Vector2(0, 1.0);\n        /** */\n\n        this.wallOffsetScalar = 0;\n        /** */\n\n        this.sizeX = 0;\n        /** */\n\n        this.sizeY = 0;\n        /** */\n\n        this.addToWall = false;\n        /** */\n\n        this.boundToFloor = false;\n        this.obstructInWallMoves = false;\n        /** */\n\n        this.frontVisible = false;\n        /** */\n\n        this.backVisible = false;\n        this.allowRotate = false;\n      }\n\n      ;\n      /** Get the closet wall edge.\r\n       * @returns The wall edge.\r\n       */\n\n      WallItem.prototype.closestWallEdge = function () {\n        var wallEdges = this.model.floorplan.wallEdges();\n        var wallEdge = null;\n        var minDistance = null;\n        var itemX = this.position.x;\n        var itemZ = this.position.z;\n        wallEdges.forEach(function (edge) {\n          var distance = edge.distanceTo(itemX, itemZ);\n\n          if (minDistance === null || distance < minDistance) {\n            minDistance = distance;\n            wallEdge = edge;\n          }\n        });\n        return wallEdge;\n      };\n      /** */\n\n\n      WallItem.prototype.removed = function () {\n        if (this.currentWallEdge != null && this.addToWall) {\n          BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.items, this);\n          this.redrawWall();\n        }\n      };\n      /** */\n\n\n      WallItem.prototype.redrawWall = function () {\n        if (this.addToWall) {\n          this.currentWallEdge.wall.fireRedraw();\n        }\n      };\n      /** */\n\n\n      WallItem.prototype.updateEdgeVisibility = function (visible, front) {\n        if (front) {\n          this.frontVisible = visible;\n        } else {\n          this.backVisible = visible;\n        }\n\n        this.visible = this.frontVisible || this.backVisible;\n      };\n      /** */\n\n\n      WallItem.prototype.updateSize = function () {\n        this.wallOffsetScalar = (this.geometry.boundingBox.max.z - this.geometry.boundingBox.min.z) * this.scale.z / 2.0;\n        this.sizeX = (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x) * this.scale.x;\n        this.sizeY = (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y;\n      };\n      /** */\n\n\n      WallItem.prototype.resized = function () {\n        if (this.boundToFloor) {\n          this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y + 0.01;\n        }\n\n        this.updateSize();\n        this.redrawWall();\n      };\n      /** */\n\n\n      WallItem.prototype.placeInRoom = function () {\n        var closestWallEdge = this.closestWallEdge();\n        this.changeWallEdge(closestWallEdge);\n        this.updateSize();\n\n        if (!this.position_set) {\n          // position not set\n          var center = closestWallEdge.interiorCenter();\n          var newPos = new THREE.Vector3(center.x, closestWallEdge.wall.height / 2.0, center.y);\n          this.boundMove(newPos);\n          this.position.copy(newPos);\n          this.redrawWall();\n        }\n      };\n\n      WallItem.prototype.setYPos = function (yPos) {};\n      /** */\n\n\n      WallItem.prototype.moveToPosition = function (vec3, intersection) {\n        this.changeWallEdge(intersection.object.edge);\n        this.boundMove(vec3);\n        this.position.copy(vec3);\n        this.redrawWall();\n      };\n      /** */\n\n\n      WallItem.prototype.getWallOffset = function () {\n        return this.wallOffsetScalar;\n      };\n      /** */\n\n\n      WallItem.prototype.changeWallEdge = function (wallEdge) {\n        if (this.currentWallEdge != null) {\n          if (this.addToWall) {\n            BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.items, this);\n            this.redrawWall();\n          } else {\n            BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.onItems, this);\n          }\n        } // handle subscription to wall being removed\n\n\n        if (this.currentWallEdge != null) {\n          this.currentWallEdge.wall.dontFireOnDelete(this.remove.bind(this));\n        }\n\n        wallEdge.wall.fireOnDelete(this.remove.bind(this)); // find angle between wall normals\n\n        var normal2 = new THREE.Vector2();\n        var normal3 = wallEdge.plane.geometry.faces[0].normal;\n        normal2.x = normal3.x;\n        normal2.y = normal3.z;\n        var angle = BP3D.Core.Utils.angle(this.refVec.x, this.refVec.y, normal2.x, normal2.y);\n        this.rotation.y = angle; // update currentWall\n\n        this.currentWallEdge = wallEdge;\n\n        if (this.addToWall) {\n          wallEdge.wall.items.push(this);\n          this.redrawWall();\n        } else {\n          wallEdge.wall.onItems.push(this);\n        }\n      };\n      /** Returns an array of planes to use other than the ground plane\r\n       * for passing intersection to clickPressed and clickDragged */\n\n\n      WallItem.prototype.customIntersectionPlanes = function () {\n        return this.model.floorplan.wallEdgePlanes();\n      };\n      /** takes the move vec3, and makes sure object stays bounded on plane */\n\n\n      WallItem.prototype.boundMove = function (vec3) {\n        var tolerance = 1;\n        var edge = this.currentWallEdge;\n        vec3.applyMatrix4(edge.interiorTransform);\n\n        if (vec3.x < this.sizeX / 2.0 + tolerance) {\n          vec3.x = this.sizeX / 2.0 + tolerance;\n        } else if (vec3.x > edge.interiorDistance() - this.sizeX / 2.0 - tolerance) {\n          vec3.x = edge.interiorDistance() - this.sizeX / 2.0 - tolerance;\n        }\n\n        if (this.boundToFloor) {\n          vec3.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y + 0.01;\n        } else {\n          if (vec3.y < this.sizeY / 2.0 + tolerance) {\n            vec3.y = this.sizeY / 2.0 + tolerance;\n          } else if (vec3.y > edge.height - this.sizeY / 2.0 - tolerance) {\n            vec3.y = edge.height - this.sizeY / 2.0 - tolerance;\n          }\n        }\n\n        vec3.z = this.getWallOffset();\n        vec3.applyMatrix4(edge.invInteriorTransform);\n      }; //obstruct\n\n\n      return WallItem;\n    }(Items.Item);\n\n    Items.WallItem = WallItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /** */\n    var InWallItem = function (_super) {\n      __extends(InWallItem, _super);\n\n      function InWallItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n\n        this.addToWall = true;\n        this.obstructInWallMoves = true;\n      }\n\n      ;\n      /** */\n\n      InWallItem.prototype.moveToPosition = function (vec3, intersection) {\n        if (this.isValidPosition(vec3)) {\n          this.changeWallEdge(intersection.object.edge);\n          this.boundMove(vec3);\n          this.position.copy(vec3);\n          this.redrawWall();\n        } else {\n          return;\n        }\n      };\n      /** */\n\n\n      InWallItem.prototype.getWallOffset = function () {\n        // fudge factor so it saves to the right wall\n        return -this.currentWallEdge.offset + 0.5;\n      };\n\n      InWallItem.prototype.isValidPosition = function (vec3) {\n        var cornersXZ = this.getCornersXZBIG('x', 'z', vec3);\n        var objects = this.model.scene.getItems();\n\n        for (let i = 0; i < objects.length; i++) {\n          if (objects[i] === this || !objects[i].obstructInWallMoves) {\n            continue;\n          }\n\n          if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersXZ, objects[i].getCornersXZ('x', 'z')) || !BP3D.Core.Utils.polygonOutsidePolygon(objects[i].getCornersXZ('x', 'z'), cornersXZ) || BP3D.Core.Utils.polygonPolygonIntersect(cornersXZ, objects[i].getCornersXZ('x', 'z'))) {\n            // console.log('object not outside other objects  XY');\n            return false;\n          } // if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersXZ, objects[i].getCorners('x', 'z')) ||\n          //     BP3D.Core.Utils.polygonPolygonIntersect(cornersXZ, objects[i].getCorners('x', 'z'))) {\n          //     console.log('object not outside other objects  XZ');\n          //     return false;\n          // }\n          // if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersYZ, objects[i].getCornersYZ('y', 'z')) ||\n          //     BP3D.Core.Utils.polygonPolygonIntersect(cornersYZ, objects[i].getCornersYZ('y', 'z'))) {\n          //     console.log('object not outside other objects YZ');\n          //     return false;\n          // }\n\n        }\n\n        return true;\n      };\n\n      return InWallItem;\n    }(Items.WallItem);\n\n    Items.InWallItem = InWallItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /** */\n    var InWallFloorItem = function (_super) {\n      __extends(InWallFloorItem, _super);\n\n      function InWallFloorItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n\n        this.boundToFloor = true;\n        this.obstructInWallMoves = true;\n        this.obstructFloorMoves = true;\n        this.addToWall = true;\n      }\n\n      ;\n      return InWallFloorItem;\n    }(Items.InWallItem);\n\n    Items.InWallFloorItem = InWallFloorItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /** */\n    var OnFloorItem = function (_super) {\n      __extends(OnFloorItem, _super);\n\n      function OnFloorItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n\n        this.obstructFloorMoves = false;\n        this.receiveShadow = true;\n        this.obstructOnFloorMoves = true;\n      }\n\n      ;\n      return OnFloorItem;\n    }(Items.FloorItem);\n\n    Items.OnFloorItem = OnFloorItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /** */\n    var WallFloorItem = function (_super) {\n      __extends(WallFloorItem, _super);\n\n      function WallFloorItem(model, metadata, geometry, material, position, rotation, scale) {\n        _super.call(this, model, metadata, geometry, material, position, rotation, scale);\n\n        this.boundToFloor = true;\n      }\n\n      ;\n      return WallFloorItem;\n    }(Items.WallItem);\n\n    Items.WallFloorItem = WallFloorItem;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Items;\n\n  (function (Items) {\n    /** Enumeration of item types. */\n    var item_types = {\n      1: Items.FloorItem,\n      2: Items.WallItem,\n      3: Items.InWallItem,\n      7: Items.InWallFloorItem,\n      8: Items.OnFloorItem,\n      9: Items.WallFloorItem,\n      10: Items.AnywhereItem,\n      11: Items.CeilingItem\n    };\n    /** Factory class to create items. */\n\n    var Factory = function () {\n      function Factory() {}\n      /** Gets the class for the specified item. */\n\n\n      Factory.getClass = function (itemType) {\n        return item_types[itemType];\n      };\n\n      return Factory;\n    }();\n\n    Items.Factory = Factory;\n  })(Items = BP3D.Items || (BP3D.Items = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model) {\n    /**\r\n     * The Scene is a manager of Items and also links to a ThreeJS scene.\r\n     */\n    var Scene = function () {\n      /**\r\n       * Constructs a scene.\r\n       * @param model The associated model.\r\n       * @param textureDir The directory from which to load the textures.\r\n       */\n      function Scene(model, textureDir) {\n        this.model = model;\n        this.textureDir = textureDir;\n        /** */\n\n        this.items = [];\n        /** */\n\n        this.needsUpdate = false;\n        /** */\n\n        this.itemLoadingCallbacks = $.Callbacks();\n        /** Item */\n\n        this.itemLoadedCallbacks = $.Callbacks();\n        /** Item */\n\n        this.itemRemovedCallbacks = $.Callbacks();\n        this.scene = new THREE.Scene(); // init item loader\n\n        this.loader = new GLTFLoader(); // this.loader.crossOrigin = \"\";\n        // this.loader.setCrossOrigin('use-credentials');\n      }\n      /** Adds a non-item, basically a mesh, to the scene.\r\n       * @param mesh The mesh to be added.\r\n       */\n\n\n      Scene.prototype.add = function (mesh) {\n        this.scene.add(mesh);\n      };\n      /** Removes a non-item, basically a mesh, from the scene.\r\n       * @param mesh The mesh to be removed.\r\n       */\n\n\n      Scene.prototype.remove = function (mesh) {\n        this.scene.remove(mesh);\n        BP3D.Core.Utils.removeValue(this.items, mesh);\n      };\n      /** Gets the scene.\r\n       * @returns The scene.\r\n       */\n\n\n      Scene.prototype.getScene = function () {\n        return this.scene;\n      };\n      /** Gets the items.\r\n       * @returns The items.\r\n       */\n\n\n      Scene.prototype.getItems = function () {\n        return this.items;\n      };\n      /** Gets the count of items.\r\n       * @returns The count.\r\n       */\n\n\n      Scene.prototype.itemCount = function () {\n        return this.items.length;\n      };\n      /** Removes all items. */\n\n\n      Scene.prototype.clearItems = function () {\n        // var items_copy = this.items;\n        var scope = this;\n        this.items.forEach(function (item) {\n          scope.removeItem(item, true);\n        });\n        this.items = [];\n      };\n      /**\r\n       * Removes an item.\r\n       * @param item The item to be removed.\r\n       * @param dontRemove If not set, also remove the item from the items list.\r\n       */\n\n\n      Scene.prototype.removeItem = function (item, dontRemove) {\n        dontRemove = dontRemove || false; // use this for item meshes\n\n        this.itemRemovedCallbacks.fire(item);\n        item.removed();\n        this.scene.remove(item);\n\n        if (!dontRemove) {\n          BP3D.Core.Utils.removeValue(this.items, item);\n        }\n      };\n      /**\r\n       * Creates an item and adds it to the scene.\r\n       * @param itemType The type of the item given by an enumerator.\r\n       * @param fileName The name of the file to load.\r\n       * @param metadata TODO\r\n       * @param position The initial position.\r\n       * @param rotation The initial rotation around the y axis.\r\n       * @param scale The initial scaling.\r\n       * @param fixed True if fixed.\r\n       */\n\n\n      Scene.prototype.addItem = function (itemType, fileName, metadata, position, rotation, scale, fixed) {\n        itemType = itemType || 1;\n        var scope = this;\n\n        var loaderCallback = function (geometry, materials) {\n          var item = new (BP3D.Items.Factory.getClass(itemType))(scope.model, metadata, geometry, materials, position, rotation, scale);\n          item.fixed = fixed || false;\n          scope.items.push(item);\n          scope.add(item);\n          item.initObject(position);\n\n          if (position !== null && position !== undefined) {\n            item.setYPos(position.y);\n          }\n\n          scope.itemLoadedCallbacks.fire(item);\n          THREE.Cache.add(fileName, {\n            geometry: geometry,\n            materials: materials\n          });\n        };\n\n        function addToMaterials(materials, newmaterial) {\n          for (var i = 0; i < materials.length; i++) {\n            var mat = materials[i];\n\n            if (mat.name === newmaterial.name) {\n              return [materials, i];\n            }\n          }\n\n          materials.push(newmaterial);\n          return [materials, materials.length - 1];\n        }\n\n        var gltfCallback = function (gltfModel) {\n          // console.log(gltfModel)\n          var newmaterials = [];\n          var newGeometry = new THREE.Geometry();\n          gltfModel.scene.traverse(function (child) {\n            if (child.isMesh) {\n              var materialindices = [];\n\n              if (child.material.length) {\n                for (var k = 0; k < child.material.length; k++) {\n                  var newItems = addToMaterials(newmaterials, child.material[k]);\n                  newmaterials = newItems[0];\n                  materialindices.push(newItems[1]);\n                }\n              } else {\n                newItems = addToMaterials(newmaterials, child.material); //materials.push(child.material);\n\n                newmaterials = newItems[0];\n                materialindices.push(newItems[1]);\n              }\n\n              if (child.geometry.isBufferGeometry) {\n                var tGeometry = new THREE.Geometry().fromBufferGeometry(child.geometry);\n                tGeometry.faces.forEach(face => {\n                  face.materialIndex = materialindices[face.materialIndex];\n                });\n                child.updateMatrix();\n                newGeometry.merge(tGeometry, child.matrix);\n              } else {\n                child.geometry.faces.forEach(face => {\n                  face.materialIndex = materialindices[face.materialIndex];\n                });\n                child.updateMatrix();\n                newGeometry.mergeMesh(child);\n              }\n            }\n          });\n          loaderCallback(newGeometry, newmaterials); // loaderCallback(gltfModel.scene, newmaterials, true);\n        };\n\n        this.itemLoadingCallbacks.fire();\n\n        if (THREE.Cache.get(fileName) === undefined) {\n          try {\n            this.loader.load(fileName, gltfCallback, null, null); // TODO_Ekki\n          } catch (e) {\n            console.log(e);\n            this.itemLoadedCallbacks.fire();\n          }\n        } else {\n          loaderCallback(THREE.Cache.get(fileName).geometry, THREE.Cache.get(fileName).materials);\n        } // this.loader.load(fileName, gltfCallback, null, null);\n\n      };\n\n      return Scene;\n    }();\n\n    Model.Scene = Scene;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Model;\n\n  (function (Model_1) {\n    /**\r\n     * A Model connects a Floorplan and a Scene.\r\n     */\n    var Model = function () {\n      /** Constructs a new model.\r\n       * @param textureDir The directory containing the textures.\r\n       */\n      function Model(textureDir) {\n        /** */\n        this.roomLoadingCallbacks = $.Callbacks();\n        /** */\n\n        this.roomLoadedCallbacks = $.Callbacks();\n        /** name */\n\n        this.roomSavedCallbacks = $.Callbacks();\n        /** success (bool), copy (bool) */\n\n        this.roomDeletedCallbacks = $.Callbacks();\n        this.floorplan = new Model_1.Floorplan();\n        this.scene = new Model_1.Scene(this, textureDir);\n      }\n\n      Model.prototype.loadSerialized = function (json) {\n        // TODO: better documentation on serialization format.\n        // TODO: a much better serialization format.\n        this.roomLoadingCallbacks.fire();\n        var data = JSON.parse(json);\n        this.newRoom(data.floorplan, data.items);\n        this.roomLoadedCallbacks.fire();\n      };\n\n      Model.prototype.exportSerialized = function () {\n        var items_arr = [];\n        var objects = this.scene.getItems();\n\n        for (var i = 0; i < objects.length; i++) {\n          var object = objects[i];\n          items_arr[i] = {\n            item_name: object.metadata.itemName,\n            item_type: object.metadata.itemType,\n            model_url: object.metadata.modelUrl,\n            xpos: object.position.x,\n            ypos: object.position.y,\n            zpos: object.position.z,\n            rotation: object.rotation.y,\n            scale_x: object.scale.x,\n            scale_y: object.scale.y,\n            scale_z: object.scale.z,\n            fixed: object.fixed\n          };\n        }\n\n        var room = {\n          floorplan: this.floorplan.saveFloorplan(),\n          items: items_arr\n        };\n        return JSON.stringify(room);\n      };\n\n      Model.prototype.newRoom = function (floorplan, items) {\n        var _this = this;\n\n        this.scene.clearItems();\n        this.floorplan.loadFloorplan(floorplan);\n        items.forEach(function (item) {\n          var position = new THREE.Vector3(item.xpos, item.ypos, item.zpos);\n          var metadata = {\n            itemName: item.item_name,\n            resizable: item.resizable,\n            itemType: item.item_type,\n            modelUrl: item.model_url\n          };\n          var scale = new THREE.Vector3(item.scale_x, item.scale_y, item.scale_z);\n\n          _this.scene.addItem(item.item_type, item.model_url, metadata, position, item.rotation, scale, item.fixed);\n        });\n      };\n\n      return Model;\n    }();\n\n    Model_1.Model = Model;\n  })(Model = BP3D.Model || (BP3D.Model = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Floorplanner;\n\n  (function (Floorplanner) {\n    /** */\n    Floorplanner.floorplannerModes = {\n      MOVE: 0,\n      DRAW: 1,\n      DELETE: 2\n    }; // grid parameters\n\n    var gridSpacing = 20; // pixels\n\n    var gridWidth = 1;\n    var gridColor = \"#f1f1f1\"; // room config\n\n    var roomColor = \"#f9f9f9\"; // wall config\n\n    var wallWidth = 5;\n    var wallWidthHover = 7;\n    var wallColor = \"#dddddd\";\n    var wallColorHover = \"#008cba\";\n    var edgeColor = \"#888888\";\n    var edgeColorHover = \"#008cba\";\n    var edgeWidth = 1;\n    var deleteColor = \"#ff0000\"; // corner config\n\n    var cornerRadius = 0;\n    var cornerRadiusHover = 7;\n    var cornerColor = \"#cccccc\";\n    var cornerColorHover = \"#008cba\";\n    /**\r\n     * The View to be used by a Floorplanner to render in/interact with.\r\n     */\n\n    var FloorplannerView = function () {\n      /** */\n      function FloorplannerView(floorplan, viewmodel, canvas) {\n        this.floorplan = floorplan;\n        this.viewmodel = viewmodel;\n        this.canvas = canvas;\n        this.canvasElement = document.getElementById(canvas);\n        this.context = this.canvasElement.getContext('2d');\n        var scope = this;\n        $(window).resize(function () {\n          scope.handleWindowResize();\n        });\n        this.handleWindowResize();\n      }\n      /** */\n\n\n      FloorplannerView.prototype.handleWindowResize = function () {\n        var canvasSel = $(\"#\" + this.canvas);\n        var parent = canvasSel.parent();\n        canvasSel.height(parent.innerHeight());\n        canvasSel.width(parent.innerWidth());\n        this.canvasElement.height = parent.innerHeight();\n        this.canvasElement.width = parent.innerWidth();\n        this.draw();\n      };\n      /** */\n\n\n      FloorplannerView.prototype.draw = function () {\n        var _this = this;\n\n        this.context.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\n        this.drawGrid();\n        this.floorplan.getRooms().forEach(function (room) {\n          _this.drawRoom(room);\n        });\n        this.floorplan.getWalls().forEach(function (wall) {\n          _this.drawWall(wall);\n        });\n        this.floorplan.getCorners().forEach(function (corner) {\n          _this.drawCorner(corner);\n        });\n\n        if (this.viewmodel.mode === Floorplanner.floorplannerModes.DRAW) {\n          this.drawTarget(this.viewmodel.targetX, this.viewmodel.targetY, this.viewmodel.lastNode);\n        }\n\n        this.floorplan.getWalls().forEach(function (wall) {\n          _this.drawWallLabels(wall);\n        });\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawWallLabels = function (wall) {\n        // we'll just draw the shorter label... idk\n        if (wall.backEdge && wall.frontEdge) {\n          if (wall.backEdge.interiorDistance < wall.frontEdge.interiorDistance) {\n            this.drawEdgeLabel(wall.backEdge);\n          } else {\n            this.drawEdgeLabel(wall.frontEdge);\n          }\n        } else if (wall.backEdge) {\n          this.drawEdgeLabel(wall.backEdge);\n        } else if (wall.frontEdge) {\n          this.drawEdgeLabel(wall.frontEdge);\n        }\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawWall = function (wall) {\n        var hover = wall === this.viewmodel.activeWall;\n        var color = wallColor;\n\n        if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\n          color = deleteColor;\n        } else if (hover) {\n          color = wallColorHover;\n        }\n\n        this.drawLine(this.viewmodel.convertX(wall.getStartX()), this.viewmodel.convertY(wall.getStartY()), this.viewmodel.convertX(wall.getEndX()), this.viewmodel.convertY(wall.getEndY()), hover ? wallWidthHover : wallWidth, color);\n\n        if (!hover && wall.frontEdge) {\n          this.drawEdge(wall.frontEdge, hover);\n        }\n\n        if (!hover && wall.backEdge) {\n          this.drawEdge(wall.backEdge, hover);\n        }\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawEdgeLabel = function (edge) {\n        var pos = edge.interiorCenter();\n        var length = edge.interiorDistance();\n\n        if (length < 60) {\n          // dont draw labels on walls this short\n          return;\n        }\n\n        this.context.font = \"normal 12px Arial\";\n        this.context.fillStyle = \"#000000\";\n        this.context.textBaseline = \"middle\";\n        this.context.textAlign = \"center\";\n        this.context.strokeStyle = \"#ffffff\";\n        this.context.lineWidth = 4;\n        this.context.strokeText(BP3D.Core.Dimensioning.cmToMeasure(length), this.viewmodel.convertX(pos.x), this.viewmodel.convertY(pos.y));\n        this.context.fillText(BP3D.Core.Dimensioning.cmToMeasure(length), this.viewmodel.convertX(pos.x), this.viewmodel.convertY(pos.y));\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawEdge = function (edge, hover) {\n        var color = edgeColor;\n\n        if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\n          color = deleteColor;\n        } else if (hover) {\n          color = edgeColorHover;\n        }\n\n        var corners = edge.corners();\n        var scope = this;\n        this.drawPolygon(BP3D.Core.Utils.map(corners, function (corner) {\n          return scope.viewmodel.convertX(corner.x);\n        }), BP3D.Core.Utils.map(corners, function (corner) {\n          return scope.viewmodel.convertY(corner.y);\n        }), false, null, true, color, edgeWidth);\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawRoom = function (room) {\n        var scope = this;\n        this.drawPolygon(BP3D.Core.Utils.map(room.corners, function (corner) {\n          return scope.viewmodel.convertX(corner.x);\n        }), BP3D.Core.Utils.map(room.corners, function (corner) {\n          return scope.viewmodel.convertY(corner.y);\n        }), true, roomColor);\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawCorner = function (corner) {\n        var hover = corner === this.viewmodel.activeCorner;\n        var color = cornerColor;\n\n        if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\n          color = deleteColor;\n        } else if (hover) {\n          color = cornerColorHover;\n        }\n\n        this.drawCircle(this.viewmodel.convertX(corner.x), this.viewmodel.convertY(corner.y), hover ? cornerRadiusHover : cornerRadius, color);\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawTarget = function (x, y, lastNode) {\n        this.drawCircle(this.viewmodel.convertX(x), this.viewmodel.convertY(y), cornerRadiusHover, cornerColorHover);\n\n        if (this.viewmodel.lastNode) {\n          this.drawLine(this.viewmodel.convertX(lastNode.x), this.viewmodel.convertY(lastNode.y), this.viewmodel.convertX(x), this.viewmodel.convertY(y), wallWidthHover, wallColorHover);\n        }\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawLine = function (startX, startY, endX, endY, width, color) {\n        // width is an integer\n        // color is a hex string, i.e. #ff0000\n        this.context.beginPath();\n        this.context.moveTo(startX, startY);\n        this.context.lineTo(endX, endY);\n        this.context.lineWidth = width;\n        this.context.strokeStyle = color;\n        this.context.stroke();\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawPolygon = function (xArr, yArr, fill, fillColor, stroke, strokeColor, strokeWidth) {\n        // fillColor is a hex string, i.e. #ff0000\n        fill = fill || false;\n        stroke = stroke || false;\n        this.context.beginPath();\n        this.context.moveTo(xArr[0], yArr[0]);\n\n        for (var i = 1; i < xArr.length; i++) {\n          this.context.lineTo(xArr[i], yArr[i]);\n        }\n\n        this.context.closePath();\n\n        if (fill) {\n          this.context.fillStyle = fillColor;\n          this.context.fill();\n        }\n\n        if (stroke) {\n          this.context.lineWidth = strokeWidth;\n          this.context.strokeStyle = strokeColor;\n          this.context.stroke();\n        }\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawCircle = function (centerX, centerY, radius, fillColor) {\n        this.context.beginPath();\n        this.context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        this.context.fillStyle = fillColor;\n        this.context.fill();\n      };\n      /** returns n where -gridSize/2 < n <= gridSize/2  */\n\n\n      FloorplannerView.prototype.calculateGridOffset = function (n) {\n        if (n >= 0) {\n          return (n + gridSpacing / 2.0) % gridSpacing - gridSpacing / 2.0;\n        } else {\n          return (n - gridSpacing / 2.0) % gridSpacing + gridSpacing / 2.0;\n        }\n      };\n      /** */\n\n\n      FloorplannerView.prototype.drawGrid = function () {\n        var offsetX = this.calculateGridOffset(-this.viewmodel.originX);\n        var offsetY = this.calculateGridOffset(-this.viewmodel.originY);\n        var width = this.canvasElement.width;\n        var height = this.canvasElement.height;\n\n        for (var x = 0; x <= width / gridSpacing; x++) {\n          this.drawLine(gridSpacing * x + offsetX, 0, gridSpacing * x + offsetX, height, gridWidth, gridColor);\n        }\n\n        for (var y = 0; y <= height / gridSpacing; y++) {\n          this.drawLine(0, gridSpacing * y + offsetY, width, gridSpacing * y + offsetY, gridWidth, gridColor);\n        }\n      };\n\n      return FloorplannerView;\n    }();\n\n    Floorplanner.FloorplannerView = FloorplannerView;\n  })(Floorplanner = BP3D.Floorplanner || (BP3D.Floorplanner = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Floorplanner;\n\n  (function (Floorplanner_1) {\n    /** how much will we move a corner to make a wall axis aligned (cm) */\n    var snapTolerance = 25;\n    /**\r\n     * The Floorplanner implements an interactive tool for creation of floorplans.\r\n     */\n\n    var Floorplanner = function () {\n      /** */\n      function Floorplanner(canvas, floorplan) {\n        this.floorplan = floorplan;\n        /** */\n\n        this.mode = 0;\n        /** */\n\n        this.activeWall = null;\n        /** */\n\n        this.activeCorner = null;\n        /** */\n\n        this.originX = 0;\n        /** */\n\n        this.originY = 0;\n        /** drawing state */\n\n        this.targetX = 0;\n        /** drawing state */\n\n        this.targetY = 0;\n        /** drawing state */\n\n        this.lastNode = null;\n        /** */\n\n        this.modeResetCallbacks = $.Callbacks();\n        /** */\n\n        this.mouseDown = false;\n        /** */\n\n        this.mouseMoved = false;\n        /** */\n\n        this.mouseMovedCount = 0;\n        /** in ThreeJS coords */\n\n        this.mouseX = 0;\n        /** in ThreeJS coords */\n\n        this.mouseY = 0;\n        /** in ThreeJS coords */\n\n        this.rawMouseX = 0;\n        /** in ThreeJS coords */\n\n        this.rawMouseY = 0;\n        /** mouse position at last click */\n\n        this.lastX = 0;\n        /** mouse position at last click */\n\n        this.lastY = 0;\n        this.canvasElement = $(\"#\" + canvas);\n        this.view = new Floorplanner_1.FloorplannerView(this.floorplan, this, canvas);\n        var cmPerFoot = 30.48;\n        var pixelsPerFoot = 15.0;\n        this.cmPerPixel = cmPerFoot * (1.0 / pixelsPerFoot);\n        this.pixelsPerCm = 1.0 / this.cmPerPixel;\n        this.wallWidth = 10.0 * this.pixelsPerCm; // Initialization:\n\n        this.setMode(Floorplanner_1.floorplannerModes.MOVE);\n        var scope = this;\n        this.canvasElement.mousedown(function () {\n          scope.mousedown();\n        });\n        this.canvasElement.mousemove(function (event) {\n          scope.mousemove(event);\n        });\n        this.canvasElement.mouseup(function () {\n          scope.mouseup();\n        });\n        this.canvasElement.mouseleave(function () {\n          scope.mouseleave();\n        });\n        $(document).keyup(function (e) {\n          if (e.keyCode === 27) {\n            scope.escapeKey();\n          }\n        });\n        floorplan.roomLoadedCallbacks.add(function () {\n          scope.reset();\n        });\n      }\n      /** */\n\n\n      Floorplanner.prototype.escapeKey = function () {\n        this.setMode(Floorplanner_1.floorplannerModes.MOVE);\n      };\n      /** */\n\n\n      Floorplanner.prototype.updateTarget = function () {\n        if (this.mode === Floorplanner_1.floorplannerModes.DRAW && this.lastNode) {\n          if (Math.abs(this.mouseX - this.lastNode.x) < snapTolerance) {\n            this.targetX = this.lastNode.x;\n          } else {\n            this.targetX = this.mouseX;\n          }\n\n          if (Math.abs(this.mouseY - this.lastNode.y) < snapTolerance) {\n            this.targetY = this.lastNode.y;\n          } else {\n            this.targetY = this.mouseY;\n          }\n        } else {\n          this.targetX = this.mouseX;\n          this.targetY = this.mouseY;\n        }\n\n        this.view.draw();\n      };\n      /** */\n\n\n      Floorplanner.prototype.mousedown = function () {\n        // console.log(\"mouse down\");\n        this.mouseDown = true;\n        this.mouseMoved = false;\n        this.mouseMovedCount = 0;\n        this.lastX = this.rawMouseX;\n        this.lastY = this.rawMouseY; // delete\n\n        if (this.mode === Floorplanner_1.floorplannerModes.DELETE) {\n          if (this.activeCorner) {\n            this.activeCorner.removeAll();\n          } else if (this.activeWall) {\n            this.activeWall.remove();\n          } else {\n            this.setMode(Floorplanner_1.floorplannerModes.MOVE);\n          }\n        }\n      };\n      /** */\n\n\n      Floorplanner.prototype.mousemove = function (event) {\n        // console.log(\"mouse move\");\n        this.mouseMovedCount++;\n        this.mouseMoved = true; // update mouse\n\n        this.rawMouseX = event.clientX;\n        this.rawMouseY = event.clientY;\n        this.mouseX = (event.clientX - this.canvasElement.offset().left) * this.cmPerPixel + this.originX * this.cmPerPixel;\n        this.mouseY = (event.clientY - this.canvasElement.offset().top) * this.cmPerPixel + this.originY * this.cmPerPixel; // update target (snapped position of actual mouse)\n\n        if (this.mode === Floorplanner_1.floorplannerModes.DRAW || this.mode === Floorplanner_1.floorplannerModes.MOVE && this.mouseDown) {\n          this.updateTarget();\n        } // update object target\n\n\n        if (this.mode !== Floorplanner_1.floorplannerModes.DRAW && !this.mouseDown) {\n          var hoverCorner = this.floorplan.overlappedCorner(this.mouseX, this.mouseY);\n          var hoverWall = this.floorplan.overlappedWall(this.mouseX, this.mouseY);\n          var draw = false;\n\n          if (hoverCorner !== this.activeCorner) {\n            this.activeCorner = hoverCorner;\n            draw = true;\n          } // corner takes precendence\n\n\n          if (this.activeCorner == null) {\n            if (hoverWall !== this.activeWall) {\n              this.activeWall = hoverWall;\n              draw = true;\n            }\n          } else {\n            this.activeWall = null;\n          }\n\n          if (draw) {\n            this.view.draw();\n          }\n        } // panning\n\n\n        if (this.mouseDown && !this.activeCorner && !this.activeWall) {\n          this.originX += this.lastX - this.rawMouseX;\n          this.originY += this.lastY - this.rawMouseY;\n          this.lastX = this.rawMouseX;\n          this.lastY = this.rawMouseY;\n          this.view.draw();\n        } // dragging\n\n\n        if (this.mode === Floorplanner_1.floorplannerModes.MOVE && this.mouseDown) {\n          if (this.activeCorner) {\n            this.activeCorner.move(this.mouseX, this.mouseY);\n            this.activeCorner.snapToAxis(snapTolerance);\n          } else if (this.activeWall) {\n            this.activeWall.relativeMove((this.rawMouseX - this.lastX) * this.cmPerPixel, (this.rawMouseY - this.lastY) * this.cmPerPixel);\n            this.activeWall.snapToAxis(snapTolerance);\n            this.lastX = this.rawMouseX;\n            this.lastY = this.rawMouseY;\n          }\n\n          this.view.draw();\n        }\n      };\n      /** */\n\n\n      Floorplanner.prototype.mouseup = function () {\n        this.mouseDown = false; // console.log(\"mouse up\");\n        // console.log(this.mouseMoved);\n        // drawing\n\n        if (this.mode === Floorplanner_1.floorplannerModes.DRAW && (this.mouseMovedCount === 1 || this.mouseMovedCount === 0)) {\n          // console.log(this.targetX);\n          // console.log(this.targetY);\n          var corner = this.floorplan.newCorner(this.targetX, this.targetY);\n\n          if (this.lastNode != null) {\n            this.floorplan.newWall(this.lastNode, corner);\n          }\n\n          if (corner.mergeWithIntersected() && this.lastNode != null) {\n            this.setMode(Floorplanner_1.floorplannerModes.MOVE);\n          }\n\n          this.lastNode = corner;\n        }\n      };\n      /** */\n\n\n      Floorplanner.prototype.mouseleave = function () {\n        this.mouseDown = false; //scope.setMode(scope.modes.MOVE);\n      };\n      /** */\n\n\n      Floorplanner.prototype.reset = function () {// this.resizeView();\n        // this.setMode(Floorplanner_1.floorplannerModes.MOVE);\n        // this.resetOrigin();\n        // this.view.draw();\n      };\n      /** */\n\n\n      Floorplanner.prototype.resizeView = function () {\n        this.view.handleWindowResize();\n      };\n      /** */\n\n\n      Floorplanner.prototype.setMode = function (mode) {\n        this.lastNode = null;\n        this.mode = mode;\n        this.modeResetCallbacks.fire(mode);\n        this.updateTarget();\n      };\n      /** Sets the origin so that floorplan is centered */\n\n\n      Floorplanner.prototype.resetOrigin = function () {\n        var centerX = this.canvasElement.innerWidth() / 2;\n        var centerY = this.canvasElement.innerHeight() / 2;\n        var centerFloorplan = this.floorplan.getCenter();\n        this.originX = centerFloorplan.x * this.pixelsPerCm - centerX;\n        this.originY = centerFloorplan.z * this.pixelsPerCm - centerY;\n      };\n      /** Convert from THREEjs coords to canvas coords. */\n\n\n      Floorplanner.prototype.convertX = function (x) {\n        return (x - this.originX * this.cmPerPixel) * this.pixelsPerCm;\n      };\n      /** Convert from THREEjs coords to canvas coords. */\n\n\n      Floorplanner.prototype.convertY = function (y) {\n        return (y - this.originY * this.cmPerPixel) * this.pixelsPerCm;\n      };\n\n      return Floorplanner;\n    }();\n\n    Floorplanner_1.Floorplanner = Floorplanner;\n  })(Floorplanner = BP3D.Floorplanner || (BP3D.Floorplanner = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Controller = function (three, model, camera, element, controls, hud) {\n      var scope = this;\n      this.enabled = true; // var three = three;\n      // var model = model;\n\n      var scene = model.scene; // var element = element;\n      // var camera = camera;\n      // var controls = controls;\n      // var hud = hud;\n\n      var plane; // ground plane used for intersection testing\n\n      var mouse;\n      var intersectedObject;\n      var mouseoverObject;\n      var selectedObject;\n      var mouseDown = false; // eslint-disable-next-line no-unused-vars\n\n      var mouseMoved = false; // has mouse moved since down click\n\n      var mouseMovedCounter = 0;\n      var rotateMouseOver = false;\n      var states = {\n        UNSELECTED: 0,\n        SELECTED: 1,\n        DRAGGING: 2,\n        ROTATING: 3,\n        ROTATING_FREE: 4,\n        PANNING: 5,\n        DRAGGING_FREE: 6\n      };\n      var state = states.UNSELECTED;\n      this.needsUpdate = true;\n\n      function init() {\n        element.mousedown(mouseDownEvent);\n        element.mouseup(mouseUpEvent);\n        element.mousemove(mouseMoveEvent);\n        element.on(\"touchstart\", touchStartEvent);\n        element.on(\"touchmove\", touchMoveEvent);\n        element.on(\"touchend\", touchEndEvent);\n        mouse = new THREE.Vector2();\n        scene.itemRemovedCallbacks.add(itemRemoved);\n        scene.itemLoadedCallbacks.add(itemLoaded);\n        setGroundPlane();\n      } // invoked via callback when item is loaded\n\n\n      function itemLoaded(item) {\n        if (item !== undefined && item !== null) {\n          if (!item.position_set) {\n            scope.setSelectedObject(item);\n            switchState(states.DRAGGING_FREE);\n          }\n\n          item.position_set = true;\n        }\n      }\n\n      function clickPressed(vec2) {\n        vec2 = vec2 || mouse;\n        var intersection = scope.itemIntersection(mouse, selectedObject);\n\n        if (intersection) {\n          selectedObject.clickPressed(intersection);\n        }\n      }\n\n      function clickDragged(vec2) {\n        vec2 = vec2 || mouse;\n        var intersection = scope.itemIntersection(mouse, selectedObject);\n\n        if (intersection) {\n          if (scope.isRotating()) {\n            selectedObject.rotate(intersection);\n          } else {\n            selectedObject.clickDragged(intersection);\n          }\n        }\n      }\n\n      function itemRemoved(item) {\n        // invoked as a callback to event in Scene\n        if (item === selectedObject) {\n          selectedObject.setUnselected();\n          selectedObject.mouseOff();\n          scope.setSelectedObject(null);\n        }\n      }\n\n      function setGroundPlane() {\n        // ground plane used to find intersections\n        var size = 10000;\n        plane = new THREE.Mesh(new THREE.PlaneGeometry(size, size), new THREE.MeshBasicMaterial());\n        plane.rotation.x = -Math.PI / 2;\n        plane.visible = false;\n        scene.add(plane);\n      }\n\n      function checkWallsAndFloors() {\n        // console.log(\"checking floor and wall\")\n        // double click on a wall or floor brings up texture change modal\n        if (state === states.UNSELECTED && mouseoverObject == null) {\n          // check walls\n          var wallEdgePlanes = model.floorplan.wallEdgePlanes();\n          var wallIntersects = scope.getIntersections(mouse, wallEdgePlanes, true);\n\n          if (wallIntersects.length > 0) {\n            var wall = wallIntersects[0].object.edge;\n            three.wallClicked.fire(wall);\n            return;\n          } // check floors\n\n\n          var floorPlanes = model.floorplan.floorPlanes();\n          var floorIntersects = scope.getIntersections(mouse, floorPlanes, false);\n\n          if (floorIntersects.length > 0) {\n            var room = floorIntersects[0].object.room;\n            three.floorClicked.fire(room);\n            return;\n          }\n\n          three.nothingClicked.fire();\n        }\n      }\n\n      function mouseMoveEvent(event) {\n        if (scope.enabled) {\n          event.preventDefault();\n          mouseMoved = true; // console.log(\"mousemoved\")\n\n          mouseMovedCounter++;\n          mouse.x = event.clientX;\n          mouse.y = event.clientY;\n\n          if (!mouseDown) {\n            // console.log(\"Mouse Moving\");\n            if (state === states.DRAGGING_FREE) {\n              // console.log(\"in Dragging without mouse down\")\n              clickDragged();\n              hud.update();\n              scope.needsUpdate = true;\n            } else {\n              // console.log(\"updating intersections\");\n              updateIntersections();\n            }\n          }\n\n          switch (state) {\n            case states.UNSELECTED:\n              updateMouseover();\n              break;\n\n            case states.SELECTED:\n              updateMouseover();\n              break;\n\n            case states.DRAGGING:\n            case states.ROTATING:\n            case states.ROTATING_FREE:\n              clickDragged();\n              hud.update();\n              scope.needsUpdate = true;\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n\n      this.isRotating = function () {\n        return state === states.ROTATING || state === states.ROTATING_FREE;\n      }; // eslint-disable-next-line no-unused-vars\n\n\n      function touchStartEvent(event) {\n        touchMoveEvent(event);\n\n        if (scope.enabled) {\n          event.preventDefault();\n          mouseMoved = false; // console.log(\"mousedown\")\n\n          mouseMovedCounter = 0;\n          mouseDown = true;\n\n          switch (state) {\n            case states.SELECTED:\n              if (rotateMouseOver) {\n                switchState(states.ROTATING);\n              } else if (intersectedObject != null) {\n                scope.setSelectedObject(intersectedObject);\n\n                if (!intersectedObject.fixed) {\n                  switchState(states.DRAGGING);\n                }\n              }\n\n              break;\n\n            case states.UNSELECTED:\n              if (intersectedObject != null) {\n                // console.log(\"calling set sel1bjhbjhbj\")\n                scope.setSelectedObject(intersectedObject);\n\n                if (!intersectedObject.fixed) {\n                  switchState(states.DRAGGING);\n                }\n              } else {// console.log(\"no object\")\n              }\n\n              break;\n\n            case states.DRAGGING:\n            case states.ROTATING:\n              break;\n\n            case states.ROTATING_FREE:\n              switchState(states.SELECTED);\n              break;\n\n            case states.DRAGGING_FREE:\n              switchState(states.DRAGGING);\n              break;\n\n            default:\n              break;\n          }\n        }\n      } // eslint-disable-next-line no-unused-vars\n\n\n      function touchMoveEvent(event) {\n        if (scope.enabled) {\n          event.preventDefault();\n          mouseMoved = true; // console.log(\"mousemoved\")\n\n          mouseMovedCounter++;\n          mouse.x = event.touches[0].clientX;\n          mouse.y = event.touches[0].clientY;\n\n          if (!mouseDown) {\n            // console.log(\"Mouse Moving\");\n            if (state === states.DRAGGING_FREE) {\n              // console.log(\"in Dragging without mouse down\")\n              clickDragged();\n              hud.update();\n              scope.needsUpdate = true;\n            } else {\n              // console.log(\"updating intersections\");\n              updateIntersections();\n            }\n          }\n\n          switch (state) {\n            case states.UNSELECTED:\n              // console.log(\"updating\")\n              updateMouseover();\n              break;\n\n            case states.SELECTED:\n              updateMouseover();\n              break;\n\n            case states.DRAGGING:\n            case states.ROTATING:\n            case states.ROTATING_FREE:\n              clickDragged();\n              hud.update();\n              scope.needsUpdate = true;\n              break;\n\n            default:\n              updateMouseover();\n              break;\n          }\n        }\n      } // eslint-disable-next-line no-unused-vars\n\n\n      function touchEndEvent(event) {\n        if (scope.enabled) {\n          mouseDown = false;\n\n          switch (state) {\n            case states.DRAGGING:\n              if (selectedObject != null) {\n                selectedObject.clickReleased();\n              }\n\n              switchState(states.SELECTED);\n              break;\n\n            case states.ROTATING:\n              if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\n                switchState(states.ROTATING_FREE);\n              } else {\n                switchState(states.SELECTED);\n              }\n\n              break;\n\n            case states.UNSELECTED:\n              if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\n                checkWallsAndFloors();\n              }\n\n              break;\n\n            case states.SELECTED:\n              if (intersectedObject == null && (mouseMovedCounter === 0 || mouseMovedCounter === 1)) {\n                switchState(states.UNSELECTED);\n                checkWallsAndFloors();\n              }\n\n              break;\n\n            case states.ROTATING_FREE:\n              break;\n\n            default:\n              // checkWallsAndFloors();\n              break;\n          }\n        }\n      }\n\n      function mouseDownEvent(event) {\n        if (scope.enabled) {\n          event.preventDefault();\n          mouseMoved = false; // console.log(\"mousedown\")\n\n          mouseMovedCounter = 0;\n          mouseDown = true;\n\n          switch (state) {\n            case states.SELECTED:\n              if (rotateMouseOver) {\n                switchState(states.ROTATING);\n              } else if (intersectedObject != null) {\n                scope.setSelectedObject(intersectedObject);\n\n                if (!intersectedObject.fixed) {\n                  switchState(states.DRAGGING);\n                }\n              }\n\n              break;\n\n            case states.UNSELECTED:\n              if (intersectedObject != null) {\n                scope.setSelectedObject(intersectedObject);\n\n                if (!intersectedObject.fixed) {\n                  switchState(states.DRAGGING);\n                }\n              }\n\n              break;\n\n            case states.DRAGGING:\n            case states.ROTATING:\n              break;\n\n            case states.ROTATING_FREE:\n              switchState(states.SELECTED);\n              break;\n\n            case states.DRAGGING_FREE:\n              switchState(states.DRAGGING);\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n\n      function mouseUpEvent(event) {\n        if (scope.enabled) {\n          mouseDown = false;\n\n          switch (state) {\n            case states.DRAGGING:\n              if (selectedObject != null) {\n                selectedObject.clickReleased();\n              }\n\n              switchState(states.SELECTED);\n              break;\n\n            case states.ROTATING:\n              if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\n                switchState(states.ROTATING_FREE);\n              } else {\n                switchState(states.SELECTED);\n              }\n\n              break;\n\n            case states.UNSELECTED:\n              if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\n                checkWallsAndFloors();\n              }\n\n              break;\n\n            case states.SELECTED:\n              if (intersectedObject == null && (mouseMovedCounter === 0 || mouseMovedCounter === 1)) {\n                switchState(states.UNSELECTED);\n                checkWallsAndFloors();\n              }\n\n              break;\n\n            case states.ROTATING_FREE:\n              break;\n\n            default:\n              checkWallsAndFloors();\n              break;\n          }\n        }\n      }\n\n      function switchState(newState) {\n        if (newState !== state) {\n          onExit(state);\n          onEntry(newState);\n        }\n\n        state = newState;\n        hud.setRotating(scope.isRotating());\n      }\n\n      function onEntry(state) {\n        switch (state) {\n          case states.UNSELECTED:\n            scope.setSelectedObject(null);\n          // eslint-disable-next-line no-fallthrough\n\n          case states.SELECTED:\n            controls.enabled = true;\n            break;\n\n          case states.ROTATING:\n          case states.ROTATING_FREE:\n            controls.enabled = false;\n            break;\n\n          case states.DRAGGING:\n            three.setCursorStyle(\"move\");\n            clickPressed();\n            controls.enabled = false;\n            break;\n\n          case states.DRAGGING_FREE:\n            three.setCursorStyle(\"move\");\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      function onExit(state) {\n        switch (state) {\n          case states.UNSELECTED:\n          case states.SELECTED:\n            break;\n\n          case states.DRAGGING:\n            if (mouseoverObject) {\n              three.setCursorStyle(\"pointer\");\n            } else {\n              three.setCursorStyle(\"auto\");\n            }\n\n            break;\n\n          case states.ROTATING:\n          case states.ROTATING_FREE:\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.selectedObject = function () {\n        return selectedObject;\n      }; // updates the vector of the intersection with the plane of a given\n      // mouse position, and the intersected object\n      // both may be set to null if no intersection found\n\n\n      function updateIntersections() {\n        // check the rotate arrow\n        var hudObject = hud.getObject();\n\n        if (hudObject != null) {\n          var hudIntersects = scope.getIntersections(mouse, hudObject, false, false, true);\n\n          if (hudIntersects.length > 0) {\n            rotateMouseOver = true;\n            hud.setMouseover(true);\n            intersectedObject = null;\n            return;\n          }\n        }\n\n        rotateMouseOver = false;\n        hud.setMouseover(false); // check objects\n\n        var items = model.scene.getItems();\n        var intersects = scope.getIntersections(mouse, items, false, true);\n\n        if (intersects.length > 0) {\n          intersectedObject = intersects[0].object;\n        } else {\n          intersectedObject = null;\n        }\n      } // sets coords to -1 to 1\n\n\n      function normalizeVector2(vec2) {\n        var retVec = new THREE.Vector2();\n        retVec.x = (vec2.x - three.widthMargin) / (window.innerWidth - three.widthMargin) * 2 - 1;\n        retVec.y = -((vec2.y - three.heightMargin) / (window.innerHeight - three.heightMargin)) * 2 + 1;\n        return retVec;\n      } //\n\n\n      function mouseToVec3(vec2) {\n        var normVec2 = normalizeVector2(vec2);\n        var vector = new THREE.Vector3(normVec2.x, normVec2.y, 0.5);\n        vector.unproject(camera);\n        return vector;\n      } // returns the first intersection object\n\n\n      this.itemIntersection = function (vec2, item) {\n        if (item == null) {\n          return null;\n        }\n\n        var customIntersections = item.customIntersectionPlanes();\n        var intersections = null;\n\n        if (customIntersections && customIntersections.length > 0) {\n          intersections = this.getIntersections(vec2, customIntersections, true);\n        } else {\n          intersections = this.getIntersections(vec2, plane);\n        }\n\n        if (intersections.length > 0) {\n          return intersections[0];\n        } else {\n          return null;\n        }\n      }; // filter by normals will only return objects facing the camera\n      // objects can be an array of objects or a single object\n\n\n      this.getIntersections = function (vec2, objects, filterByNormals, onlyVisible, recursive, linePrecision) {\n        var vector = mouseToVec3(vec2);\n        onlyVisible = onlyVisible || false;\n        filterByNormals = filterByNormals || false;\n        recursive = recursive || false;\n        linePrecision = linePrecision || 20;\n        var direction = vector.sub(camera.position).normalize();\n        var raycaster = new THREE.Raycaster(camera.position, direction);\n        raycaster.params.Line.threshold = linePrecision; // raycaster.linePrecision = linePrecision;\n\n        var intersections;\n\n        if (objects instanceof Array) {\n          intersections = raycaster.intersectObjects(objects, recursive);\n        } else {\n          intersections = raycaster.intersectObject(objects, recursive);\n        } // filter by visible, if true\n\n\n        if (onlyVisible) {\n          intersections = BP3D.Core.Utils.removeIf(intersections, function (intersection) {\n            return !intersection.object.visible;\n          });\n        } // filter by normals, if true\n\n\n        if (filterByNormals) {\n          intersections = BP3D.Core.Utils.removeIf(intersections, function (intersection) {\n            var dot = intersection.face.normal.dot(direction);\n            return dot > 0;\n          });\n        }\n\n        return intersections;\n      }; // manage the selected object\n\n\n      this.setSelectedObject = function (object) {\n        if (state === states.UNSELECTED) {\n          switchState(states.SELECTED);\n        }\n\n        if (selectedObject != null) {\n          selectedObject.setUnselected();\n        }\n\n        if (object != null) {\n          selectedObject = object;\n          selectedObject.setSelected();\n          three.itemSelectedCallbacks.fire(object);\n        } else {\n          selectedObject = null;\n          three.itemUnselectedCallbacks.fire();\n        }\n\n        this.needsUpdate = true;\n      }; // TODO: there MUST be simpler logic for expressing this\n\n\n      function updateMouseover() {\n        if (intersectedObject != null) {\n          if (mouseoverObject != null) {\n            if (mouseoverObject !== intersectedObject) {\n              mouseoverObject.mouseOff();\n              mouseoverObject = intersectedObject;\n              mouseoverObject.mouseOver();\n              scope.needsUpdate = true;\n            } else {}\n          } else {\n            mouseoverObject = intersectedObject;\n            mouseoverObject.mouseOver();\n            three.setCursorStyle(\"pointer\");\n            scope.needsUpdate = true;\n          }\n        } else if (mouseoverObject != null) {\n          mouseoverObject.mouseOff();\n          three.setCursorStyle(\"auto\");\n          mouseoverObject = null;\n          scope.needsUpdate = true;\n        }\n      }\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Floor = function (scene, room) {\n      var scope = this;\n      this.room = room; // var scene = scene;\n\n      var floorPlane = null; // var roofPlane = null;\n\n      init();\n\n      function init() {\n        scope.room.fireOnFloorChange(redraw);\n        floorPlane = buildFloor();\n        scope.room.roomSelectedCallbacks.add(drawOutline);\n        scope.room.roomUnSelectedCallbacks.add(removeOutline); // roofs look weird, so commented out\n        //roofPlane = buildRoof();\n      }\n\n      function drawOutline(box) {\n        scene.add(box);\n      }\n\n      function removeOutline(box) {\n        scene.remove(box);\n      }\n\n      function redraw() {\n        scope.removeFromScene();\n        floorPlane = buildFloor();\n        scope.addToScene();\n      }\n\n      function buildFloor() {\n        var textureSettings = scope.room.getTexture(); // setup texture\n\n        var texLoader = new THREE.TextureLoader();\n        texLoader.setCrossOrigin('');\n        var floorTexture = texLoader.load(textureSettings.url);\n        floorTexture.wrapS = THREE.RepeatWrapping;\n        floorTexture.wrapT = THREE.RepeatWrapping;\n        floorTexture.repeat.set(1, 1);\n        var floorMaterialTop = new THREE.MeshPhongMaterial({\n          map: floorTexture,\n          side: THREE.DoubleSide,\n          // ambient: 0xffffff, TODO_Ekki\n          color: 0xcccccc,\n          specular: 0x0a0a0a\n        });\n        var textureScale = textureSettings.scale; // http://stackoverflow.com/questions/19182298/how-to-texture-a-three-js-mesh-created-with-shapegeometry\n        // scale down coords to fit 0 -> 1, then rescale\n\n        var points = [];\n        scope.room.interiorCorners.forEach(function (corner) {\n          points.push(new THREE.Vector2(corner.x / textureScale, corner.y / textureScale));\n        });\n        var shape = new THREE.Shape(points);\n        var geometry = new THREE.ShapeGeometry(shape);\n        var floor = new THREE.Mesh(geometry, floorMaterialTop);\n        floor.rotation.set(Math.PI / 2, 0, 0);\n        floor.scale.set(textureScale, textureScale, textureScale);\n        floor.receiveShadow = true;\n        floor.castShadow = false;\n        return floor;\n      } // eslint-disable-next-line no-unused-vars\n\n\n      function buildRoof() {\n        // setup texture\n        var roofMaterial = new THREE.MeshBasicMaterial({\n          side: THREE.FrontSide,\n          color: 0xe5e5e5\n        });\n        var points = [];\n        scope.room.interiorCorners.forEach(function (corner) {\n          points.push(new THREE.Vector2(corner.x, corner.y));\n        });\n        var shape = new THREE.Shape(points);\n        var geometry = new THREE.ShapeGeometry(shape);\n        var roof = new THREE.Mesh(geometry, roofMaterial);\n        roof.rotation.set(Math.PI / 2, 0, 0);\n        roof.position.y = 250;\n        return roof;\n      }\n\n      this.addToScene = function () {\n        scene.add(floorPlane); //scene.add(roofPlane);\n        // hack so we can do intersect testing\n\n        scene.add(room.floorPlane);\n      };\n\n      this.removeFromScene = function () {\n        scene.remove(floorPlane); //scene.remove(roofPlane);\n\n        scene.remove(room.floorPlane);\n      };\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Edge = function (scene, edge, controls) {\n      var scope = this; // var scene = scene;\n      // var edge = edge;\n      // var controls = controls;\n\n      var wall = edge.wall;\n      var front = edge.front;\n      var planes = [];\n      var basePlanes = []; // always visible\n\n      var texture = null; // var lightMap = new THREE.TextureLoader().load(\"http://localhost:8001/assets/5ef849ed8188602a98c95525\");\n      // var lightMap = THREE.ImageUtils.loadTexture(\"rooms/textures/walllightmap.png\");\n\n      var fillerColor = 0xdddddd;\n      var sideColor = 0xcccccc;\n      var baseColor = 0xdddddd;\n      this.visible = false;\n\n      this.remove = function () {\n        edge.redrawCallbacks.remove(redraw);\n        controls.cameraMovedCallbacks.remove(updateVisibility);\n        removeFromScene();\n      };\n\n      function init() {\n        edge.redrawCallbacks.add(redraw);\n        edge.edgeSelectedCallbacks.add(drawOutline);\n        edge.edgeUnSelectedCallbacks.add(removeOutline);\n        controls.cameraMovedCallbacks.add(updateVisibility);\n        updateTexture();\n        updatePlanes();\n        addToScene();\n      }\n\n      function drawOutline(box) {\n        scene.add(box);\n        updatePlanes();\n      }\n\n      function removeOutline(box) {\n        scene.remove(box);\n        updatePlanes();\n      }\n\n      function redraw() {\n        removeFromScene();\n        updateTexture();\n        updatePlanes();\n        addToScene();\n      }\n\n      function removeFromScene() {\n        planes.forEach(function (plane) {\n          scene.remove(plane);\n        });\n        basePlanes.forEach(function (plane) {\n          scene.remove(plane);\n        });\n        planes = [];\n        basePlanes = [];\n      }\n\n      function addToScene() {\n        planes.forEach(function (plane) {\n          scene.add(plane);\n        });\n        basePlanes.forEach(function (plane) {\n          scene.add(plane);\n        });\n        updateVisibility();\n      }\n\n      function updateVisibility() {\n        // finds the normal from the specified edge\n        var start = edge.interiorStart();\n        var end = edge.interiorEnd();\n        var x = end.x - start.x;\n        var y = end.y - start.y; // rotate 90 degrees CCW\n\n        var normal = new THREE.Vector3(-y, 0, x);\n        normal.normalize(); // setup camera\n\n        var position = controls.object.position.clone();\n        var focus = new THREE.Vector3((start.x + end.x) / 2.0, 0, (start.y + end.y) / 2.0);\n        var direction = position.sub(focus).normalize(); // find dot\n\n        var dot = normal.dot(direction); // update visible\n\n        scope.visible = dot >= 0; // show or hide plans\n\n        planes.forEach(function (plane) {\n          plane.visible = scope.visible;\n        });\n        updateObjectVisibility();\n      }\n\n      function updateObjectVisibility() {\n        wall.items.forEach(function (item) {\n          item.updateEdgeVisibility(scope.visible, front);\n        });\n        wall.onItems.forEach(function (item) {\n          item.updateEdgeVisibility(scope.visible, front);\n        });\n      }\n\n      function updateTexture(callback) {\n        // callback is fired when texture loads\n        callback = function (texture) {\n          scene.needsUpdate = true;\n          THREE.Cache.add(url, texture);\n        };\n\n        var textureData = edge.getTexture();\n        var stretch = textureData.stretch;\n        var url = textureData.url;\n        var scale = textureData.scale;\n\n        if (THREE.Cache.get(url) === undefined) {\n          texture = new THREE.TextureLoader().load(url, callback, null, null);\n        } else {\n          texture = THREE.Cache.get(url);\n        } // texture = THREE.ImageUtils.loadTexture(url, null, callback);\n\n\n        if (!stretch) {\n          var height = wall.height;\n          var width = edge.interiorDistance();\n          texture.wrapT = THREE.RepeatWrapping;\n          texture.wrapS = THREE.RepeatWrapping;\n          texture.repeat.set(width / scale, height / scale);\n          texture.needsUpdate = true;\n        }\n      }\n\n      function updatePlanes() {\n        var wallMaterial = new THREE.MeshBasicMaterial({\n          color: 0xffffff,\n          // ambientColor: 0xffffff, TODO_Ekki\n          //ambient: scope.wall.color,\n          side: THREE.FrontSide,\n          map: texture\n        });\n        var fillerMaterial = new THREE.MeshBasicMaterial({\n          color: fillerColor,\n          side: THREE.DoubleSide\n        }); // exterior plane\n\n        planes.push(makeWall(edge.exteriorStart(), edge.exteriorEnd(), edge.exteriorTransform, edge.invExteriorTransform, fillerMaterial)); // interior plane\n\n        planes.push(makeWall(edge.interiorStart(), edge.interiorEnd(), edge.interiorTransform, edge.invInteriorTransform, wallMaterial)); // bottom\n        // put into basePlanes since this is always visible\n\n        basePlanes.push(buildFiller(edge, 0, THREE.BackSide, baseColor)); // top\n\n        planes.push(buildFiller(edge, wall.height, THREE.DoubleSide, fillerColor)); // sides\n\n        planes.push(buildSideFillter(edge.interiorStart(), edge.exteriorStart(), wall.height, sideColor));\n        planes.push(buildSideFillter(edge.interiorEnd(), edge.exteriorEnd(), wall.height, sideColor));\n      } // start, end have x and y attributes (i.e. corners)\n\n\n      function makeWall(start, end, transform, invTransform, material) {\n        var v1 = toVec3(start);\n        var v2 = toVec3(end);\n        var v3 = v2.clone();\n        v3.y = wall.height;\n        var v4 = v1.clone();\n        v4.y = wall.height;\n        var points = [v1.clone(), v2.clone(), v3.clone(), v4.clone()];\n        points.forEach(function (p) {\n          p.applyMatrix4(transform);\n        });\n        var shape = new THREE.Shape([new THREE.Vector2(points[0].x, points[0].y), new THREE.Vector2(points[1].x, points[1].y), new THREE.Vector2(points[2].x, points[2].y), new THREE.Vector2(points[3].x, points[3].y)]); // add holes for each wall item\n\n        wall.items.forEach(function (item) {\n          var pos = item.position.clone();\n          pos.applyMatrix4(transform);\n          var halfSize = item.halfSize;\n          var min = halfSize.clone().multiplyScalar(-1);\n          var max = halfSize.clone();\n          min.add(pos);\n          max.add(pos);\n          var holePoints = [new THREE.Vector2(min.x, min.y), new THREE.Vector2(max.x, min.y), new THREE.Vector2(max.x, max.y), new THREE.Vector2(min.x, max.y)];\n          shape.holes.push(new THREE.Path(holePoints));\n        });\n        var geometry = new THREE.ShapeGeometry(shape);\n        geometry.vertices.forEach(function (v) {\n          v.applyMatrix4(invTransform);\n        }); // make UVs\n\n        var totalDistance = BP3D.Core.Utils.distance(v1.x, v1.z, v2.x, v2.z);\n        var height = wall.height;\n        geometry.faceVertexUvs[0] = [];\n\n        function vertexToUv(vertex) {\n          var x = BP3D.Core.Utils.distance(v1.x, v1.z, vertex.x, vertex.z) / totalDistance;\n          var y = vertex.y / height;\n          return new THREE.Vector2(x, y);\n        }\n\n        geometry.faces.forEach(function (face) {\n          var vertA = geometry.vertices[face.a];\n          var vertB = geometry.vertices[face.b];\n          var vertC = geometry.vertices[face.c];\n          geometry.faceVertexUvs[0].push([vertexToUv(vertA), vertexToUv(vertB), vertexToUv(vertC)]);\n        });\n        geometry.faceVertexUvs[1] = geometry.faceVertexUvs[0];\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n        var mesh = new THREE.Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildSideFillter(p1, p2, height, color) {\n        var points = [toVec3(p1), toVec3(p2), toVec3(p2, height), toVec3(p1, height)];\n        var geometry = new THREE.Geometry();\n        points.forEach(function (p) {\n          geometry.vertices.push(p);\n        });\n        geometry.faces.push(new THREE.Face3(0, 1, 2));\n        geometry.faces.push(new THREE.Face3(0, 2, 3));\n        var fillerMaterial = new THREE.MeshBasicMaterial({\n          color: color,\n          side: THREE.DoubleSide\n        });\n        var filler = new THREE.Mesh(geometry, fillerMaterial);\n        return filler;\n      }\n\n      function buildFiller(edge, height, side, color) {\n        var points = [toVec2(edge.exteriorStart()), toVec2(edge.exteriorEnd()), toVec2(edge.interiorEnd()), toVec2(edge.interiorStart())];\n        var fillerMaterial = new THREE.MeshBasicMaterial({\n          color: color,\n          side: side\n        });\n        var shape = new THREE.Shape(points);\n        var geometry = new THREE.ShapeGeometry(shape);\n        var filler = new THREE.Mesh(geometry, fillerMaterial);\n        filler.rotation.set(Math.PI / 2, 0, 0);\n        filler.position.y = height;\n        return filler;\n      }\n\n      function toVec2(pos) {\n        return new THREE.Vector2(pos.x, pos.y);\n      }\n\n      function toVec3(pos, height) {\n        height = height || 0;\n        return new THREE.Vector3(pos.x, height, pos.y);\n      }\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Floorplan = function (scene, floorplan, controls) {\n      var scope = this;\n      this.scene = scene;\n      this.floorplan = floorplan;\n      this.controls = controls;\n      this.floors = [];\n      this.edges = [];\n      floorplan.fireOnUpdatedRooms(redraw);\n\n      function redraw() {\n        // clear scene\n        scope.floors.forEach(function (floor) {\n          floor.removeFromScene();\n        });\n        scope.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        scope.floors = [];\n        scope.edges = []; // draw floors\n\n        scope.floorplan.getRooms().forEach(function (room) {\n          var threeFloor = new Three.Floor(scene, room);\n          scope.floors.push(threeFloor);\n          threeFloor.addToScene();\n        }); // draw edges\n\n        scope.floorplan.wallEdges().forEach(function (edge) {\n          var threeEdge = new Three.Edge(scene, edge, scope.controls);\n          scope.edges.push(threeEdge);\n        });\n      }\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Lights = function (scene, floorplan) {\n      // var scope = this;\n      // var scene = scene;\n      // var floorplan = floorplan;\n      var tol = 1;\n      var height = 300; // TODO: share with Blueprint.Wall\n\n      var dirLight;\n\n      this.getDirLight = function () {\n        return dirLight;\n      };\n\n      function init() {\n        // var light = new THREE.HemisphereLight(0xffffff, 0x000000, 0.2);\n        // light.position.set(0, height, 0);\n        // scene.add(light);\n        // add some lighting\n        var ambientLight = new THREE.AmbientLight(0xffffff);\n        scene.add(ambientLight); // var spotLight = new THREE.SpotLight(0xffffff);\n        // spotLight.position.set(-40, 60, -10);\n        // spotLight.castShadow = true;\n        // scene.add(spotLight);\n\n        dirLight = new THREE.DirectionalLight(0xffffff, 0.7);\n        dirLight.position.set(0, height, 0);\n        dirLight.castShadow = true;\n        dirLight.target.position.set(0, 0, 0);\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n        dirLight.shadow.mapSize.width = 512;\n        dirLight.shadow.mapSize.height = 512;\n        dirLight.shadow.camera.near = 0.5;\n        dirLight.shadow.camera.far = 500; // dirLight.shadow.bias = -0.0001;\n        // dirLight.visible = true;\n\n        floorplan.fireOnUpdatedRooms(updateShadowCamera);\n      }\n\n      function updateShadowCamera() {\n        var size = floorplan.getSize();\n        var d = (Math.max(size.z, size.x) + tol) / 2.0;\n        var center = floorplan.getCenter();\n        var pos = new THREE.Vector3(center.x + 100, height, center.z + 60);\n        dirLight.position.copy(pos);\n        dirLight.target.position.copy(center); //dirLight.updateMatrix();\n\n        dirLight.updateWorldMatrix();\n        dirLight.shadow.camera.left = -d;\n        dirLight.shadow.camera.right = d;\n        dirLight.shadow.camera.top = d;\n        dirLight.shadow.camera.bottom = -d;\n        dirLight.shadow.camera.updateProjectionMatrix(); // this is necessary for updates\n        // if (dirLight.shadowCamera) {\n        //     dirLight.shadowCamera.left = dirLight.shadowCameraLeft;\n        //     dirLight.shadowCamera.right = dirLight.shadowCameraRight;\n        //     dirLight.shadowCamera.top = dirLight.shadowCameraTop;\n        //     dirLight.shadowCamera.bottom = dirLight.shadowCameraBottom;\n        //     dirLight.shadowCamera.updateProjectionMatrix();\n        // }\n      }\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Skybox = function (scene) {\n      // var scope = this;\n      // var scene = scene;\n      var topColor = 0xffffff; //0xD8ECF9\n\n      var bottomColor = 0xe9e9e9; //0xf9f9f9;//0x565e63\n\n      var verticalOffset = 500;\n      var sphereRadius = 4000;\n      var widthSegments = 32;\n      var heightSegments = 15;\n      var vertexShader = [\"varying vec3 vWorldPosition;\", \"void main() {\", \"  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"  vWorldPosition = worldPosition.xyz;\", \"  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join('\\n');\n      var fragmentShader = [\"uniform vec3 topColor;\", \"uniform vec3 bottomColor;\", \"uniform float offset;\", \"varying vec3 vWorldPosition;\", \"void main() {\", \"  float h = normalize( vWorldPosition + offset ).y;\", \"  gl_FragColor = vec4( mix( bottomColor, topColor, (h + 1.0) / 2.0), 1.0 );\", \"}\"].join('\\n');\n\n      function init() {\n        var uniforms = {\n          topColor: {\n            type: \"c\",\n            value: new THREE.Color(topColor)\n          },\n          bottomColor: {\n            type: \"c\",\n            value: new THREE.Color(bottomColor)\n          },\n          offset: {\n            type: \"f\",\n            value: verticalOffset\n          }\n        };\n        var skyGeo = new THREE.SphereGeometry(sphereRadius, widthSegments, heightSegments);\n        var skyMat = new THREE.ShaderMaterial({\n          vertexShader: vertexShader,\n          fragmentShader: fragmentShader,\n          uniforms: uniforms,\n          side: THREE.BackSide\n        });\n        var sky = new THREE.Mesh(skyGeo, skyMat);\n        scene.add(sky);\n      }\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n/**\r\nThis file is a modified version of THREE.OrbitControls\r\nContributors:\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\n\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Controls = function (object, domElement) {\n      this.object = object;\n      this.domElement = domElement !== undefined ? domElement : document; // Set to false to disable this control\n\n      this.enabled = true; // \"target\" sets the location of focus, where the control orbits around\n      // and where it pans with respect to.\n\n      this.target = new THREE.Vector3(); // center is old, deprecated; use \"target\" instead\n\n      this.center = this.target; // This option actually enables dollying in and out; left as \"zoom\" for\n      // backwards compatibility\n\n      this.noZoom = false;\n      this.zoomSpeed = 1.0; // Limits to how far you can dolly in and out\n\n      this.minDistance = 0;\n      this.maxDistance = 1500; //Infinity;\n      // Set to true to disable this control\n\n      this.noRotate = false;\n      this.rotateSpeed = 1.0; // Set to true to disable this control\n\n      this.noPan = false;\n      this.keyPanSpeed = 40.0; // pixels moved per arrow key push\n      // Set to true to automatically rotate around the target\n\n      this.autoRotate = false;\n      this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n      // How far you can orbit vertically, upper and lower limits.\n      // Range is 0 to Math.PI radians.\n\n      this.minPolarAngle = 0; // radians\n\n      this.maxPolarAngle = Math.PI / 2; // radians\n      // Set to true to disable use of the keys\n\n      this.noKeys = false; // The four arrow keys\n\n      this.keys = {\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        BOTTOM: 40\n      };\n      this.cameraMovedCallbacks = $.Callbacks();\n      this.needsUpdate = true; // internals\n\n      var scope = this;\n      var EPS = 0.000001;\n      var rotateStart = new THREE.Vector2();\n      var rotateEnd = new THREE.Vector2();\n      var rotateDelta = new THREE.Vector2();\n      var panStart = new THREE.Vector2();\n      var panEnd = new THREE.Vector2();\n      var panDelta = new THREE.Vector2();\n      var dollyStart = new THREE.Vector2();\n      var dollyEnd = new THREE.Vector2();\n      var dollyDelta = new THREE.Vector2();\n      var phiDelta = 0;\n      var thetaDelta = 0;\n      var scale = 1;\n      var pan = new THREE.Vector3();\n      var STATE = {\n        NONE: -1,\n        ROTATE: 0,\n        DOLLY: 1,\n        PAN: 2,\n        TOUCH_ROTATE: 3,\n        TOUCH_DOLLY: 4,\n        TOUCH_PAN: 5\n      };\n      var state = STATE.NONE;\n\n      this.controlsActive = function () {\n        return state === STATE.NONE;\n      };\n\n      this.setPan = function (vec3) {\n        pan = vec3;\n      };\n\n      this.panTo = function (vec3) {\n        var newTarget = new THREE.Vector3(vec3.x, scope.target.y, vec3.z);\n        var delta = scope.target.clone().sub(newTarget);\n        pan.sub(delta);\n        scope.update();\n      };\n\n      this.rotateLeft = function (angle) {\n        if (angle === undefined) {\n          angle = getAutoRotationAngle();\n        }\n\n        thetaDelta -= angle;\n      };\n\n      this.rotateUp = function (angle) {\n        if (angle === undefined) {\n          angle = getAutoRotationAngle();\n        }\n\n        phiDelta -= angle;\n      }; // pass in distance in world space to move left\n\n\n      this.panLeft = function (distance) {\n        var panOffset = new THREE.Vector3();\n        var te = this.object.matrix.elements; // get X column of matrix\n\n        panOffset.set(te[0], 0, te[2]);\n        panOffset.normalize();\n        panOffset.multiplyScalar(-distance);\n        pan.add(panOffset);\n      }; // pass in distance in world space to move up\n\n\n      this.panUp = function (distance) {\n        var panOffset = new THREE.Vector3();\n        var te = this.object.matrix.elements; // get Y column of matrix\n\n        panOffset.set(te[4], 0, te[6]);\n        panOffset.normalize();\n        panOffset.multiplyScalar(distance);\n        pan.add(panOffset);\n      }; // main entry point; pass in Vector2 of change desired in pixel space,\n      // right and down are positive\n\n\n      this.pan = function (delta) {\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (scope.object.fov !== undefined) {\n          // perspective\n          var position = scope.object.position;\n          var offset = position.clone().sub(scope.target);\n          var targetDistance = offset.length(); // half of the fov is center to top of screen\n\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we actually don't use screenWidth, since perspective camera is fixed to screen height\n\n          scope.panLeft(2 * delta.x * targetDistance / element.clientHeight);\n          scope.panUp(2 * delta.y * targetDistance / element.clientHeight);\n        } else if (scope.object.top !== undefined) {\n          // orthographic\n          scope.panLeft(delta.x * (scope.object.right - scope.object.left) / element.clientWidth);\n          scope.panUp(delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight);\n        } else {\n          // camera neither orthographic or perspective - warn user\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n        }\n\n        scope.update();\n      };\n\n      this.panXY = function (x, y) {\n        scope.pan(new THREE.Vector2(x, y));\n      };\n\n      this.dollyIn = function (dollyScale) {\n        if (dollyScale === undefined) {\n          dollyScale = getZoomScale();\n        }\n\n        scale /= dollyScale;\n      };\n\n      this.dollyOut = function (dollyScale) {\n        if (dollyScale === undefined) {\n          dollyScale = getZoomScale();\n        }\n\n        scale *= dollyScale;\n      };\n\n      this.update = function () {\n        var position = this.object.position;\n        var offset = position.clone().sub(this.target); // angle from z-axis around y-axis\n\n        var theta = Math.atan2(offset.x, offset.z); // angle from y-axis\n\n        var phi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);\n\n        if (this.autoRotate) {\n          this.rotateLeft(getAutoRotationAngle());\n        }\n\n        theta += thetaDelta;\n        phi += phiDelta; // restrict phi to be between desired limits\n\n        phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, phi)); // restrict phi to be betwee EPS and PI-EPS\n\n        phi = Math.max(EPS, Math.min(Math.PI - EPS, phi));\n        var radius = offset.length() * scale; // restrict radius to be between desired limits\n\n        radius = Math.max(this.minDistance, Math.min(this.maxDistance, radius)); // move target to panned location\n\n        this.target.add(pan);\n        offset.x = radius * Math.sin(phi) * Math.sin(theta);\n        offset.y = radius * Math.cos(phi);\n        offset.z = radius * Math.sin(phi) * Math.cos(theta);\n        position.copy(this.target).add(offset);\n        this.object.lookAt(this.target);\n        thetaDelta = 0;\n        phiDelta = 0;\n        scale = 1;\n        pan.set(0, 0, 0);\n        this.cameraMovedCallbacks.fire();\n        this.needsUpdate = true;\n      };\n\n      function getAutoRotationAngle() {\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n      }\n\n      function getZoomScale() {\n        return Math.pow(0.95, scope.zoomSpeed);\n      }\n\n      function onMouseDown(event) {\n        if (scope.enabled === false) {\n          return;\n        }\n\n        event.preventDefault();\n\n        if (event.button === 0) {\n          if (scope.noRotate === true) {\n            return;\n          }\n\n          state = STATE.ROTATE;\n          rotateStart.set(event.clientX, event.clientY);\n        } else if (event.button === 1) {\n          if (scope.noZoom === true) {\n            return;\n          }\n\n          state = STATE.DOLLY;\n          dollyStart.set(event.clientX, event.clientY);\n        } else if (event.button === 2) {\n          if (scope.noPan === true) {\n            return;\n          }\n\n          state = STATE.PAN;\n          panStart.set(event.clientX, event.clientY);\n        } // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\n\n        scope.domElement.addEventListener('mousemove', onMouseMove, false);\n        scope.domElement.addEventListener('mouseup', onMouseUp, false);\n      }\n\n      function onMouseMove(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault();\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (state === STATE.ROTATE) {\n          if (scope.noRotate === true) return;\n          rotateEnd.set(event.clientX, event.clientY);\n          rotateDelta.subVectors(rotateEnd, rotateStart); // rotating across whole screen goes 360 degrees around\n\n          scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n          scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n          rotateStart.copy(rotateEnd);\n        } else if (state === STATE.DOLLY) {\n          if (scope.noZoom === true) return;\n          dollyEnd.set(event.clientX, event.clientY);\n          dollyDelta.subVectors(dollyEnd, dollyStart);\n\n          if (dollyDelta.y > 0) {\n            scope.dollyIn();\n          } else {\n            scope.dollyOut();\n          }\n\n          dollyStart.copy(dollyEnd);\n        } else if (state === STATE.PAN) {\n          if (scope.noPan === true) return;\n          panEnd.set(event.clientX, event.clientY);\n          panDelta.subVectors(panEnd, panStart);\n          scope.pan(panDelta);\n          panStart.copy(panEnd);\n        } // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\n\n        scope.update();\n      }\n\n      function onMouseUp() {\n        if (scope.enabled === false) return; // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\n        scope.domElement.removeEventListener('mousemove', onMouseMove, false);\n        scope.domElement.removeEventListener('mouseup', onMouseUp, false);\n        state = STATE.NONE;\n      }\n\n      function onMouseWheel(event) {\n        if (scope.enabled === false || scope.noZoom === true) return;\n        var delta = 0;\n\n        if (event.wheelDelta) {\n          delta = event.wheelDelta;\n        } else if (event.detail) {\n          delta = -event.detail;\n        }\n\n        if (delta > 0) {\n          scope.dollyOut();\n        } else {\n          scope.dollyIn();\n        }\n\n        scope.update();\n      }\n\n      function onTouchStart(event) {\n        if (scope.enabled === false) {\n          return;\n        }\n\n        event.preventDefault();\n\n        if (scope.noRotate === true) {\n          return;\n        }\n\n        state = STATE.ROTATE;\n        rotateStart.set(event.touches[0].clientX, event.touches[0].clientY);\n        scope.domElement.addEventListener('touchmove', onTouchMove, false);\n        scope.domElement.addEventListener('touchend', onTouchEnd, false);\n      }\n\n      function onTouchMove(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault();\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (state === STATE.ROTATE) {\n          if (scope.noRotate === true) return;\n          rotateEnd.set(event.touches[0].clientX, event.touches[0].clientY);\n          rotateDelta.subVectors(rotateEnd, rotateStart); // rotating across whole screen goes 360 degrees around\n\n          scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n          scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n          rotateStart.copy(rotateEnd);\n        } else if (state === STATE.DOLLY) {\n          if (scope.noZoom === true) return;\n          dollyEnd.set(event.touches[0].clientX, event.touches[0].clientY);\n          dollyDelta.subVectors(dollyEnd, dollyStart);\n\n          if (dollyDelta.y > 0) {\n            scope.dollyIn();\n          } else {\n            scope.dollyOut();\n          }\n\n          dollyStart.copy(dollyEnd);\n        } else if (state === STATE.PAN) {\n          if (scope.noPan === true) return;\n          panEnd.set(event.touches[0].clientX, event.touches[0].clientY);\n          panDelta.subVectors(panEnd, panStart);\n          scope.pan(panDelta);\n          panStart.copy(panEnd);\n        } // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\n\n        scope.update();\n      }\n\n      function onTouchEnd() {\n        if (scope.enabled === false) return; // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\n\n        scope.domElement.removeEventListener('touchmove', onTouchMove, false);\n        scope.domElement.removeEventListener('touchend', onTouchEnd, false);\n        state = STATE.NONE;\n      }\n\n      function onKeyDown(event) {\n        if (scope.enabled === false) {\n          return;\n        }\n\n        if (scope.noKeys === true) {\n          return;\n        }\n\n        if (scope.noPan === true) {\n          return;\n        }\n\n        if ($('.modal-open').length) {\n          return;\n        }\n\n        switch (event.keyCode) {\n          case scope.keys.UP:\n            scope.pan(new THREE.Vector2(0, scope.keyPanSpeed));\n            break;\n\n          case scope.keys.BOTTOM:\n            scope.pan(new THREE.Vector2(0, -scope.keyPanSpeed));\n            break;\n\n          case scope.keys.LEFT:\n            scope.pan(new THREE.Vector2(scope.keyPanSpeed, 0));\n            break;\n\n          case scope.keys.RIGHT:\n            scope.pan(new THREE.Vector2(-scope.keyPanSpeed, 0));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.domElement.addEventListener('contextmenu', function (event) {\n        event.preventDefault();\n      }, false);\n      this.domElement.addEventListener('mousedown', onMouseDown, false);\n      this.domElement.addEventListener('mousewheel', onMouseWheel, false);\n      this.domElement.addEventListener('touchstart', onTouchStart, false);\n      this.domElement.addEventListener('DOMMouseScroll', onMouseWheel, false); // firefox\n\n      document.addEventListener('keydown', onKeyDown, false);\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    /**\r\n     * Drawings on \"top\" of the scene. e.g. rotate arrows\r\n     */\n    Three.HUD = function (three) {\n      var scope = this; // var three = three;\n\n      var scene = new THREE.Scene();\n      var selectedItem = null;\n      var rotating = false;\n      var mouseover = false; // var tolerance = 10;\n      // eslint-disable-next-line no-unused-vars\n\n      var height = 5;\n      var distance = 20;\n      var color = \"#ffffff\";\n      var hoverColor = \"#f1c40f\";\n      var activeObject = null;\n\n      this.getScene = function () {\n        return scene;\n      };\n\n      this.getObject = function () {\n        return activeObject;\n      };\n\n      function init() {\n        three.itemSelectedCallbacks.add(itemSelected);\n        three.itemUnselectedCallbacks.add(itemUnselected);\n      }\n\n      function resetSelectedItem() {\n        selectedItem = null;\n\n        if (activeObject) {\n          scene.remove(activeObject);\n          activeObject = null;\n        }\n      }\n\n      function itemSelected(item) {\n        if (selectedItem !== item) {\n          resetSelectedItem();\n\n          if (item.allowRotate && !item.fixed) {\n            selectedItem = item;\n            activeObject = makeObject(selectedItem);\n            scene.add(activeObject);\n          }\n        }\n      }\n\n      function itemUnselected() {\n        resetSelectedItem();\n      }\n\n      this.setRotating = function (isRotating) {\n        rotating = isRotating;\n        setColor();\n      };\n\n      this.setMouseover = function (isMousedOver) {\n        mouseover = isMousedOver;\n        setColor();\n      };\n\n      function setColor() {\n        if (activeObject) {\n          activeObject.children.forEach(function (obj) {\n            obj.material.color.set(getColor());\n          });\n        }\n\n        three.needsUpdate();\n      }\n\n      function getColor() {\n        return mouseover || rotating ? hoverColor : color;\n      }\n\n      this.update = function () {\n        if (activeObject) {\n          activeObject.rotation.y = selectedItem.rotation.y;\n          activeObject.position.x = selectedItem.position.x;\n          activeObject.position.z = selectedItem.position.z;\n          activeObject.position.y = selectedItem.position.y - selectedItem.halfSize.y;\n        }\n      };\n\n      function makeLineGeometry(item) {\n        var geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(0, 0, 0), rotateVector(item));\n        return geometry;\n      }\n\n      function rotateVector(item) {\n        var vec = new THREE.Vector3(0, 0, Math.max(item.halfSize.x, item.halfSize.z) + 1.4 + distance);\n        return vec;\n      }\n\n      function centreVector(item) {\n        var vec = new THREE.Vector3(0, 0, 0);\n        return vec;\n      }\n\n      function makeLineMaterial(rotating) {\n        var mat = new THREE.LineBasicMaterial({\n          color: getColor(),\n          linewidth: 3\n        });\n        return mat;\n      }\n\n      function makeCone(item) {\n        var coneGeo = new THREE.CylinderGeometry(5, 0, 10);\n        var coneMat = new THREE.MeshBasicMaterial({\n          color: getColor()\n        });\n        var cone = new THREE.Mesh(coneGeo, coneMat);\n        cone.position.copy(rotateVector(item));\n        cone.rotation.x = -Math.PI / 2.0;\n        return cone;\n      }\n\n      function makeSphere(item) {\n        var geometry = new THREE.SphereGeometry(4, 16, 16);\n        var material = new THREE.MeshBasicMaterial({\n          color: getColor()\n        });\n        var sphere = new THREE.Mesh(geometry, material);\n        sphere.position.copy(centreVector(item));\n        return sphere;\n      }\n\n      function makeObject(item) {\n        var object = new THREE.Object3D();\n        var line = new THREE.Line(makeLineGeometry(item), makeLineMaterial(scope.rotating), THREE.LineSegments);\n        var cone = makeCone(item);\n        var sphere = makeSphere(item);\n        object.add(line);\n        object.add(cone);\n        object.add(sphere);\n        object.rotation.y = item.rotation.y;\n        object.position.x = item.position.x;\n        object.position.z = item.position.z;\n        object.position.y = item.position.y - item.halfSize.y;\n        return object;\n      }\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Three;\n\n  (function (Three) {\n    Three.Main = function (model, element, canvasElement, opts) {\n      var scope = this;\n      var options = {\n        resize: true,\n        pushHref: false,\n        spin: true,\n        spinSpeed: .00002,\n        clickPan: true,\n        canMoveFixedItems: false\n      }; // override with manually set options\n\n      for (var opt in options) {\n        if (options.hasOwnProperty(opt) && opts.hasOwnProperty(opt)) {\n          options[opt] = opts[opt];\n        }\n      } // var model = model;\n\n\n      var scene = model.scene;\n      this.element = $(element);\n      var domElement;\n      var camera;\n      var renderer; // eslint-disable-next-line no-unused-expressions\n\n      this.controls; // var canvas;\n\n      var controller; // eslint-disable-next-line no-unused-vars\n\n      var floorplan; //var canvas;\n      //var canvasElement = canvasElement;\n\n      var needsUpdate = false;\n      var lastRender = Date.now();\n      var mouseOver = false;\n      var hasClicked = false;\n      var hud; // eslint-disable-next-line no-unused-expressions\n\n      this.heightMargin; // eslint-disable-next-line no-unused-expressions\n\n      this.widthMargin; // eslint-disable-next-line no-unused-expressions\n\n      this.elementHeight; // eslint-disable-next-line no-unused-expressions\n\n      this.elementWidth;\n      this.itemSelectedCallbacks = $.Callbacks(); // item\n\n      this.itemUnselectedCallbacks = $.Callbacks();\n      this.wallClicked = $.Callbacks(); // wall\n\n      this.floorClicked = $.Callbacks(); // floor\n\n      this.nothingClicked = $.Callbacks();\n\n      function init() {\n        // THREE.ImageUtils.crossOrigin = \"\";\n        // THREE.TextureLoader.setCrossOrigin('anonymous')\n        THREE.Cache.enabled = true;\n        domElement = scope.element.get(0); // Container\n\n        camera = new THREE.PerspectiveCamera(45, 1, 1, 10000);\n        renderer = new THREE.WebGLRenderer({\n          antialias: true,\n          preserveDrawingBuffer: true // required to support .toDataURL()\n\n        });\n        renderer.autoClear = false;\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMapSoft = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap; // eslint-disable-next-line no-unused-vars\n\n        var skybox = new Three.Skybox(scene);\n        scope.controls = new Three.Controls(camera, domElement);\n        hud = new Three.HUD(scope);\n        controller = new Three.Controller(scope, model, camera, scope.element, scope.controls, hud);\n        domElement.appendChild(renderer.domElement); // handle window resizing\n\n        scope.updateWindowSize();\n\n        if (options.resize) {\n          $(window).resize(scope.updateWindowSize);\n        } // setup camera nicely\n\n\n        scope.centerCamera();\n        model.floorplan.fireOnUpdatedRooms(scope.centerCamera); // eslint-disable-next-line no-unused-vars\n\n        var lights = new Three.Lights(scene, model.floorplan);\n        floorplan = new Three.Floorplan(scene, model.floorplan, scope.controls);\n        animate();\n        scope.element.mouseenter(function () {\n          mouseOver = true;\n        }).mouseleave(function () {\n          mouseOver = false;\n        }).click(function () {\n          hasClicked = true;\n        });\n        scope.element.on(\"touchstart\", function () {\n          mouseOver = true;\n          hasClicked = true;\n        });\n        scope.element.on(\"touchend\", function () {\n          mouseOver = false;\n        }); //canvas = new ThreeCanvas(canvasElement, scope);\n      }\n\n      function spin() {\n        if (options.spin && !mouseOver && !hasClicked) {\n          var theta = 2 * Math.PI * options.spinSpeed * (Date.now() - lastRender);\n          scope.controls.rotateLeft(theta);\n          scope.controls.update();\n        }\n      }\n\n      this.dataUrl = function () {\n        var dataUrl = renderer.domElement.toDataURL(\"image/png\");\n        return dataUrl;\n      };\n\n      this.stopSpin = function () {\n        hasClicked = true;\n      };\n\n      this.options = function () {\n        return options;\n      };\n\n      this.getModel = function () {\n        return model;\n      };\n\n      this.getScene = function () {\n        return scene;\n      };\n\n      this.getController = function () {\n        return controller;\n      };\n\n      this.getCamera = function () {\n        return camera;\n      };\n\n      this.needsUpdate = function () {\n        needsUpdate = true;\n      };\n\n      function shouldRender() {\n        // Do we need to draw a new frame\n        if (scope.controls.needsUpdate || controller.needsUpdate || needsUpdate || model.scene.needsUpdate) {\n          scope.controls.needsUpdate = false;\n          controller.needsUpdate = false;\n          needsUpdate = false;\n          model.scene.needsUpdate = false;\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      function render() {\n        spin();\n\n        if (shouldRender()) {\n          renderer.clear();\n          renderer.render(scene.getScene(), camera);\n          renderer.clearDepth();\n          renderer.render(hud.getScene(), camera);\n        }\n\n        lastRender = Date.now();\n      }\n\n      ;\n\n      function animate() {\n        var delay = 50;\n        setTimeout(function () {\n          requestAnimationFrame(animate);\n        }, delay);\n        render();\n      }\n\n      ;\n\n      this.rotatePressed = function () {\n        controller.rotatePressed();\n      };\n\n      this.rotateReleased = function () {\n        controller.rotateReleased();\n      };\n\n      this.setCursorStyle = function (cursorStyle) {\n        domElement.style.cursor = cursorStyle;\n      };\n\n      this.updateWindowSize = function () {\n        scope.heightMargin = scope.element.offset().top;\n        scope.widthMargin = scope.element.offset().left;\n        scope.elementWidth = scope.element.innerWidth();\n\n        if (options.resize) {\n          scope.elementHeight = window.innerHeight - scope.heightMargin;\n        } else {\n          scope.elementHeight = scope.element.innerHeight();\n        }\n\n        camera.aspect = scope.elementWidth / scope.elementHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(scope.elementWidth, scope.elementHeight);\n        needsUpdate = true;\n      };\n\n      this.centerCamera = function () {\n        var yOffset = 150.0;\n        var pan = model.floorplan.getCenter();\n        pan.y = yOffset;\n        scope.controls.target = pan;\n        var distance = model.floorplan.getSize().z * 1.5;\n        var offset = pan.clone().add(new THREE.Vector3(0, distance, distance)); //scope.controls.setOffset(offset);\n\n        camera.position.copy(offset);\n        scope.controls.update();\n      }; // projects the object's center point into x,y screen coords\n      // x,y are relative to top left corner of viewer\n\n\n      this.projectVector = function (vec3, ignoreMargin) {\n        ignoreMargin = ignoreMargin || false;\n        var widthHalf = scope.elementWidth / 2;\n        var heightHalf = scope.elementHeight / 2;\n        var vector = new THREE.Vector3();\n        vector.copy(vec3);\n        vector.project(camera);\n        var vec2 = new THREE.Vector2();\n        vec2.x = vector.x * widthHalf + widthHalf;\n        vec2.y = -(vector.y * heightHalf) + heightHalf;\n\n        if (!ignoreMargin) {\n          vec2.x += scope.widthMargin;\n          vec2.y += scope.heightMargin;\n        }\n\n        return vec2;\n      };\n\n      init();\n    };\n  })(Three = BP3D.Three || (BP3D.Three = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  /** Blueprint3D core application. */\n  var Blueprint3d = function () {\n    /** Creates an instance.\r\n     * @param options The initialization options.\r\n     */\n    function Blueprint3d(options) {\n      this.model = new BP3D.Model.Model(options.textureDir);\n      this.three = new BP3D.Three.Main(this.model, options.threeElement, options.threeCanvasElement, {});\n\n      if (!options.widget) {\n        this.floorplanner = new BP3D.Floorplanner.Floorplanner(options.floorplannerElement, this.model.floorplan);\n      } else {\n        this.three.getController().enabled = false;\n      }\n    }\n\n    return Blueprint3d;\n  }();\n\n  BP3D.Blueprint3d = Blueprint3d;\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Core;\n\n  (function (Core) {\n    /** Enumeration of log contexts. */\n    (function (ELogContext) {\n      /** Log nothing. */\n      ELogContext[ELogContext[\"None\"] = 0] = \"None\";\n      /** Log all. */\n\n      ELogContext[ELogContext[\"All\"] = 1] = \"All\";\n      /** 2D interaction */\n\n      ELogContext[ELogContext[\"Interaction2d\"] = 2] = \"Interaction2d\";\n      /** Interior items */\n\n      ELogContext[ELogContext[\"Item\"] = 3] = \"Item\";\n      /** Wall (connectivity) */\n\n      ELogContext[ELogContext[\"Wall\"] = 4] = \"Wall\";\n      /** Room(s) */\n\n      ELogContext[ELogContext[\"Room\"] = 5] = \"Room\";\n    })(Core.ELogContext || (Core.ELogContext = {}));\n\n    var ELogContext = Core.ELogContext;\n    /** Enumeration of log levels. */\n\n    (function (ELogLevel) {\n      /** An information. */\n      ELogLevel[ELogLevel[\"Information\"] = 0] = \"Information\";\n      /** A warning. */\n\n      ELogLevel[ELogLevel[\"Warning\"] = 1] = \"Warning\";\n      /** An error. */\n\n      ELogLevel[ELogLevel[\"Error\"] = 2] = \"Error\";\n      /** A fatal error. */\n\n      ELogLevel[ELogLevel[\"Fatal\"] = 3] = \"Fatal\";\n      /** A debug message. */\n\n      ELogLevel[ELogLevel[\"Debug\"] = 4] = \"Debug\";\n    })(Core.ELogLevel || (Core.ELogLevel = {}));\n\n    var ELogLevel = Core.ELogLevel;\n    /** The current log context. To be set when initializing the Application. */\n\n    Core.logContext = ELogContext.None;\n    /** Pre-check if logging for specified context and/or level is enabled.\r\n     * This may be used to avoid compilation of complex logs.\r\n     * @param context The log context to be verified.\r\n     * @param level The log level to be verified.\r\n     * @returns If this context/levels is currently logged.\r\n     */\n\n    function isLogging(context, level) {\n      return Core.logContext === ELogContext.All || Core.logContext === context || level === ELogLevel.Warning || level === ELogLevel.Error || level === ELogLevel.Fatal;\n    }\n\n    Core.isLogging = isLogging;\n    /** Log the passed message in the context and with given level.\r\n     * @param context The context in which the message should be logged.\r\n     * @param level The level of the message.\r\n     * @param message The messages to be logged.\r\n     */\n\n    function log(context, level, message) {\n      if (isLogging(context, level) === false) {\n        return;\n      }\n\n      var tPrefix = \"\";\n\n      switch (level) {\n        case ELogLevel.Information:\n          tPrefix = \"[INFO_] \";\n          break;\n\n        case ELogLevel.Warning:\n          tPrefix = \"[WARNG] \";\n          break;\n\n        case ELogLevel.Error:\n          tPrefix = \"[ERROR] \";\n          break;\n\n        case ELogLevel.Fatal:\n          tPrefix = \"[FATAL] \";\n          break;\n\n        case ELogLevel.Debug:\n          tPrefix = \"[DEBUG] \";\n          break;\n\n        default:\n          break;\n      }\n\n      console.log(tPrefix + message);\n    }\n\n    Core.log = log;\n  })(Core = BP3D.Core || (BP3D.Core = {}));\n})(BP3D || (BP3D = {}));\n\n(function (BP3D) {\n  // eslint-disable-next-line no-unused-vars\n  var Core;\n\n  (function (Core) {\n    /** Version information. */\n    var Version = function () {\n      function Version() {}\n      /** The informal version. */\n\n\n      Version.getInformalVersion = function () {\n        return \"1.0 Beta 1\";\n      };\n      /** The technical version. */\n\n\n      Version.getTechnicalVersion = function () {\n        return \"1.0.0.1\";\n      };\n\n      return Version;\n    }();\n\n    Core.Version = Version;\n  })(Core = BP3D.Core || (BP3D.Core = {}));\n})(BP3D || (BP3D = {}));\n\nconsole.log(\"Blueprint3D \" + BP3D.Core.Version.getInformalVersion() + \" (\" + BP3D.Core.Version.getTechnicalVersion() + \")\");","map":{"version":3,"sources":["C:/Users/carli/OneDrive/Escritorio/Dev/astrid/InteriorDesing/src/engine/blueprint3d.js"],"names":["THREE","GLTFLoader","$","BASE_URL","ASSETS","DEFAULT_FLOOR_MAP","DEFAULT_WALL_MAP","BP3D","Core","Utils","pointDistanceFromLine","x","y","x1","y1","x2","y2","tPoint","closestPointOnLine","tDx","tDy","Math","sqrt","tA","tB","tC","tD","tDot","tLenSq","tParam","tXx","tYy","distance","pow","angle","tDet","tAngle","atan2","angle2pi","tTheta","PI","isClockwise","points","tSubX","min","apply","map","p","tSubY","tNewPoints","tSum","tI","length","tC1","tC2","guid","tS4","floor","random","toString","substring","polygonPolygonIntersect","firstCorners","secondCorners","tFirstCorner","tSecondCorner","linePolygonIntersect","corners","lineLineIntersect","x3","y3","x4","y4","tCCW","p1","p2","p3","tE","tF","tP1","tP2","tP3","tP4","pointInPolygon","startX","startY","tMinX","tMinY","tIntersects","polygonInsidePolygon","insideCorners","outsideCorners","polygonOutsidePolygon","forEach","array","action","forEachIndexed","func","tResult","element","push","removeIf","cycle","arr","shift","tReturn","slice","tmp","unique","hashFunc","tResults","tMap","hasOwnProperty","removeValue","value","splice","subtract","subArray","el","hasValue","dimInch","dimMeter","dimCentiMeter","dimMilliMeter","Dimensioning","cmToMeasure","cm","Configuration","getStringValue","configDimUnit","realFeet","feet","inches","round","configWallHeight","configWallThickness","setValue","key","data","Error","getNumericValue","dimUnit","wallHeight","wallThickness","__extends","d","b","__","constructor","prototype","Object","create","Items","Item","_super","model","metadata","geometry","material","position","rotation","scale","call","errorGlow","Mesh","hover","selected","highlighted","error","emissiveColor","errorColor","obstructFloorMoves","obstructInWallMoves","obstructOnFloorMoves","obstructCeilingMoves","allowRotate","fixed","dragOffset","Vector3","getHeight","halfSize","getWidth","getDepth","z","getElevation","initObject","placeInRoom","scene","needsUpdate","resizable","castShadow","receiveShadow","copy","position_set","computeBoundingBox","applyMatrix4","Matrix4","makeTranslation","boundingBox","max","objectHalfSize","setScale","remove","removeItem","isElevationAdjustable","elevate","elevation","resize","height","width","depth","scaleVec","multiply","set","resized","setFixed","removed","updateHighlight","on","hex","materials","mouseOver","mouseOff","setSelected","setUnselected","clickPressed","intersection","point","sub","clickDragged","moveToPosition","rotate","snapTolerance","i","abs","vec3","clickReleased","hideError","customIntersectionPlanes","getCorners","xDim","yDim","clone","c1","c2","c3","c4","transform","makeRotationY","add","getCornersXZ","wallTol","getCornersXZBIG","maxSize","getCornersXY","getCornersYZ","showError","createGlow","objectBox","Box3","setFromObject","divideScalar","color","opacity","ignoreDepth","glowMaterial","MeshBasicMaterial","blending","AdditiveBlending","transparent","depthTest","glow","Model","cornerTolerance","Corner","floorplan","id","wallStarts","wallEnds","moved_callbacks","Callbacks","deleted_callbacks","action_callbacks","fireOnMove","fireOnDelete","fireOnAction","getX","getY","snapToAxis","tolerance","snapped","scope","adjacentCorners","corner","relativeMove","dx","dy","move","fireAction","fire","removeAll","newX","newY","mergeWithIntersected","wall","fireMoved","retArray","getEnd","getStart","isWallConnected","distanceFrom","distanceFromWall","distanceFromCorner","detachWall","attachStart","attachEnd","wallTo","wallFrom","wallToOrFrom","combineWithCorner","setStart","setEnd","removeDuplicateWalls","update","getWalls","newWall","wallEndpoints","wallStartpoints","HalfEdge","room","front","plane","box","interiorTransform","invInteriorTransform","exteriorTransform","invExteriorTransform","redrawCallbacks","edgeSelectedCallbacks","edgeUnSelectedCallbacks","generatePlane","transformCorner","v1","interiorStart","v2","interiorEnd","v3","v4","Geometry","vertices","faces","Face3","computeFaceNormals","visible","edge","computeTransforms","exteriorStart","exteriorEnd","offset","thickness","frontEdge","backEdge","drawOutline","BoxHelper","removeOutline","getTexture","frontTexture","backTexture","setTexture","textureUrl","textureStretch","textureScale","texture","url","stretch","interiorDistance","start","end","invTransform","tt","tr","multiplyMatrices","getInverse","distanceTo","getOppositeEdge","vec","halfAngleVector","next","prev","interiorCenter","v1startX","v1startY","v1endX","v1endY","v2startX","v2startY","v2endX","v2endY","theta","cs","cos","sn","sin","v2dx","v2dy","vx","vy","mag","desiredMag","scalar","defaultWallTexture","Wall","orphan","items","onItems","getUuid","join","resetFrontBack","dontFireOnDelete","fireRedraw","getStartX","getEndX","getStartY","getEndY","oppositeCorner","console","log","defaultRoomTexture","Room","interiorCorners","edgePointer","floorPlane","customTexture","floorChangeCallbacks","roomSelectedCallbacks","roomUnSelectedCallbacks","updateWalls","updateInteriorCorners","cornerUuids","c","sort","fireOnFloorChange","callback","uuid","tex","getFloorTexture","setFloorTexture","Vector2","shape","Shape","ShapeGeometry","side","DoubleSide","cycleIndex","index","prevEdge","firstEdge","firstCorner","secondCorner","defaultFloorPlanTolerance","Floorplan","walls","rooms","new_wall_callbacks","new_corner_callbacks","redraw_callbacks","updated_rooms","roomLoadedCallbacks","floorTextures","wallEdges","edges","wallEdgePlanes","planes","floorPlanes","fireOnNewWall","fireOnNewCorner","fireOnRedraw","fireOnUpdatedRooms","removeWall","newCorner","_this","removeCorner","getRooms","overlappedCorner","overlappedWall","saveFloorplan","wallTextures","newFloorTextures","loadFloorplan","reset","corner1","corner2","updateFloorTextures","uuids","tmpCorners","tmpWalls","roomCorners","findRooms","assignOrphanEdges","getCenter","getDimensions","getSize","center","xMin","Infinity","xMax","zMin","zMax","ret","orphanWalls","back","_calculateTheta","previousCorner","currentCorner","nextCorner","_removeDuplicateRooms","roomArray","results","lookup","sep","j","roomShift","str","_findTightestCycle","stack","previousCorners","visited","compFunc","a","pushFunc","addToStack","pop","loops","uniqueLoops","uniqueCCWLoops","FloorItem","setYPos","yPos","isValidPosition","isInARoom","objects","getItems","AnywhereItem","pos","undefined","getYPos","val","cmToIn","toFixed","CeilingItem","WallItem","currentWallEdge","refVec","wallOffsetScalar","sizeX","sizeY","addToWall","boundToFloor","frontVisible","backVisible","closestWallEdge","wallEdge","minDistance","itemX","itemZ","redrawWall","updateEdgeVisibility","updateSize","changeWallEdge","newPos","boundMove","object","getWallOffset","bind","normal2","normal3","normal","InWallItem","cornersXZ","InWallFloorItem","OnFloorItem","WallFloorItem","item_types","Factory","getClass","itemType","Scene","textureDir","itemLoadingCallbacks","itemLoadedCallbacks","itemRemovedCallbacks","loader","mesh","getScene","itemCount","clearItems","item","dontRemove","addItem","fileName","loaderCallback","Cache","addToMaterials","newmaterial","mat","name","gltfCallback","gltfModel","newmaterials","newGeometry","traverse","child","isMesh","materialindices","k","newItems","isBufferGeometry","tGeometry","fromBufferGeometry","face","materialIndex","updateMatrix","merge","matrix","mergeMesh","get","load","e","Model_1","roomLoadingCallbacks","roomSavedCallbacks","roomDeletedCallbacks","loadSerialized","json","JSON","parse","newRoom","exportSerialized","items_arr","item_name","itemName","item_type","model_url","modelUrl","xpos","ypos","zpos","scale_x","scale_y","scale_z","stringify","Floorplanner","floorplannerModes","MOVE","DRAW","DELETE","gridSpacing","gridWidth","gridColor","roomColor","wallWidth","wallWidthHover","wallColor","wallColorHover","edgeColor","edgeColorHover","edgeWidth","deleteColor","cornerRadius","cornerRadiusHover","cornerColor","cornerColorHover","FloorplannerView","viewmodel","canvas","canvasElement","document","getElementById","context","getContext","window","handleWindowResize","canvasSel","parent","innerHeight","innerWidth","draw","clearRect","drawGrid","drawRoom","drawWall","drawCorner","mode","drawTarget","targetX","targetY","lastNode","drawWallLabels","drawEdgeLabel","activeWall","drawLine","convertX","convertY","drawEdge","font","fillStyle","textBaseline","textAlign","strokeStyle","lineWidth","strokeText","fillText","drawPolygon","activeCorner","drawCircle","endX","endY","beginPath","moveTo","lineTo","stroke","xArr","yArr","fill","fillColor","strokeColor","strokeWidth","closePath","centerX","centerY","radius","arc","calculateGridOffset","n","offsetX","originX","offsetY","originY","Floorplanner_1","modeResetCallbacks","mouseDown","mouseMoved","mouseMovedCount","mouseX","mouseY","rawMouseX","rawMouseY","lastX","lastY","view","cmPerFoot","pixelsPerFoot","cmPerPixel","pixelsPerCm","setMode","mousedown","mousemove","event","mouseup","mouseleave","keyup","keyCode","escapeKey","updateTarget","clientX","clientY","left","top","hoverCorner","hoverWall","resizeView","resetOrigin","centerFloorplan","Three","Controller","three","camera","controls","hud","enabled","mouse","intersectedObject","mouseoverObject","selectedObject","mouseMovedCounter","rotateMouseOver","states","UNSELECTED","SELECTED","DRAGGING","ROTATING","ROTATING_FREE","PANNING","DRAGGING_FREE","state","init","mouseDownEvent","mouseUpEvent","mouseMoveEvent","touchStartEvent","touchMoveEvent","touchEndEvent","itemRemoved","itemLoaded","setGroundPlane","setSelectedObject","switchState","vec2","itemIntersection","isRotating","size","PlaneGeometry","checkWallsAndFloors","wallIntersects","getIntersections","wallClicked","floorIntersects","floorClicked","nothingClicked","preventDefault","updateIntersections","updateMouseover","touches","newState","onExit","onEntry","setRotating","setCursorStyle","hudObject","getObject","hudIntersects","setMouseover","intersects","normalizeVector2","retVec","widthMargin","heightMargin","mouseToVec3","normVec2","vector","unproject","customIntersections","intersections","filterByNormals","onlyVisible","recursive","linePrecision","direction","normalize","raycaster","Raycaster","params","Line","threshold","Array","intersectObjects","intersectObject","dot","itemSelectedCallbacks","itemUnselectedCallbacks","Floor","redraw","buildFloor","removeFromScene","addToScene","textureSettings","texLoader","TextureLoader","setCrossOrigin","floorTexture","wrapS","RepeatWrapping","wrapT","repeat","floorMaterialTop","MeshPhongMaterial","specular","buildRoof","roofMaterial","FrontSide","roof","Edge","basePlanes","fillerColor","sideColor","baseColor","cameraMovedCallbacks","updateVisibility","updateTexture","updatePlanes","focus","updateObjectVisibility","textureData","wallMaterial","fillerMaterial","makeWall","buildFiller","BackSide","buildSideFillter","toVec3","multiplyScalar","holePoints","holes","Path","v","totalDistance","faceVertexUvs","vertexToUv","vertex","vertA","vertB","vertC","computeVertexNormals","filler","toVec2","floors","threeFloor","threeEdge","Lights","tol","dirLight","getDirLight","ambientLight","AmbientLight","DirectionalLight","target","shadow","mapSize","near","far","updateShadowCamera","updateWorldMatrix","right","bottom","updateProjectionMatrix","Skybox","topColor","bottomColor","verticalOffset","sphereRadius","widthSegments","heightSegments","vertexShader","fragmentShader","uniforms","type","Color","skyGeo","SphereGeometry","skyMat","ShaderMaterial","sky","Controls","domElement","noZoom","zoomSpeed","maxDistance","noRotate","rotateSpeed","noPan","keyPanSpeed","autoRotate","autoRotateSpeed","minPolarAngle","maxPolarAngle","noKeys","keys","LEFT","UP","RIGHT","BOTTOM","EPS","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","phiDelta","thetaDelta","pan","STATE","NONE","ROTATE","DOLLY","PAN","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","controlsActive","setPan","panTo","newTarget","delta","rotateLeft","getAutoRotationAngle","rotateUp","panLeft","panOffset","te","elements","panUp","body","fov","targetDistance","tan","clientHeight","clientWidth","warn","panXY","dollyIn","dollyScale","getZoomScale","dollyOut","phi","lookAt","onMouseDown","button","addEventListener","onMouseMove","onMouseUp","subVectors","removeEventListener","onMouseWheel","wheelDelta","detail","onTouchStart","onTouchMove","onTouchEnd","onKeyDown","HUD","selectedItem","rotating","mouseover","hoverColor","activeObject","itemSelected","itemUnselected","resetSelectedItem","makeObject","setColor","isMousedOver","children","obj","getColor","makeLineGeometry","rotateVector","centreVector","makeLineMaterial","LineBasicMaterial","linewidth","makeCone","coneGeo","CylinderGeometry","coneMat","cone","makeSphere","sphere","Object3D","line","LineSegments","Main","opts","options","pushHref","spin","spinSpeed","clickPan","canMoveFixedItems","opt","renderer","controller","lastRender","Date","now","hasClicked","elementHeight","elementWidth","PerspectiveCamera","WebGLRenderer","antialias","preserveDrawingBuffer","autoClear","shadowMap","shadowMapSoft","PCFSoftShadowMap","skybox","appendChild","updateWindowSize","centerCamera","lights","animate","mouseenter","click","dataUrl","toDataURL","stopSpin","getModel","getController","getCamera","shouldRender","render","clear","clearDepth","delay","setTimeout","requestAnimationFrame","rotatePressed","rotateReleased","cursorStyle","style","cursor","aspect","setSize","yOffset","projectVector","ignoreMargin","widthHalf","heightHalf","project","Blueprint3d","threeElement","threeCanvasElement","widget","floorplanner","floorplannerElement","ELogContext","ELogLevel","logContext","None","isLogging","level","All","Warning","Fatal","message","tPrefix","Information","Debug","Version","getInformalVersion","getTechnicalVersion"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\r\nimport {\r\n    GLTFLoader\r\n} from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport $ from \"jquery\";\r\nimport {\r\n    BASE_URL,\r\n    ASSETS,\r\n    DEFAULT_FLOOR_MAP,\r\n    DEFAULT_WALL_MAP\r\n} from \"../Constants.js\";\r\n\r\n\r\nexport var BP3D;\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Core;\r\n    (function (Core) {\r\n        /** Collection of utility functions. */\r\n        var Utils = (function () {\r\n            function Utils() {}\r\n            /** Determines the distance of a point from a line.\r\n             * @param x Point's x coordinate.\r\n             * @param y Point's y coordinate.\r\n             * @param x1 Line-Point 1's x coordinate.\r\n             * @param y1 Line-Point 1's y coordinate.\r\n             * @param x2 Line-Point 2's x coordinate.\r\n             * @param y2 Line-Point 2's y coordinate.\r\n             * @returns The distance.\r\n             */\r\n            Utils.pointDistanceFromLine = function (x, y, x1, y1, x2, y2) {\r\n                var tPoint = Utils.closestPointOnLine(x, y, x1, y1, x2, y2);\r\n                var tDx = x - tPoint.x;\r\n                var tDy = y - tPoint.y;\r\n                return Math.sqrt(tDx * tDx + tDy * tDy);\r\n            };\r\n            /** Gets the projection of a point onto a line.\r\n             * @param x Point's x coordinate.\r\n             * @param y Point's y coordinate.\r\n             * @param x1 Line-Point 1's x coordinate.\r\n             * @param y1 Line-Point 1's y coordinate.\r\n             * @param x2 Line-Point 2's x coordinate.\r\n             * @param y2 Line-Point 2's y coordinate.\r\n             * @returns The point.\r\n             */\r\n            Utils.closestPointOnLine = function (x, y, x1, y1, x2, y2) {\r\n                // Inspired by: http://stackoverflow.com/a/6853926\r\n                var tA = x - x1;\r\n                var tB = y - y1;\r\n                var tC = x2 - x1;\r\n                var tD = y2 - y1;\r\n                var tDot = tA * tC + tB * tD;\r\n                var tLenSq = tC * tC + tD * tD;\r\n                var tParam = tDot / tLenSq;\r\n                var tXx, tYy;\r\n                if (tParam < 0 || (x1 === x2 && y1 === y2)) {\r\n                    tXx = x1;\r\n                    tYy = y1;\r\n                } else if (tParam > 1) {\r\n                    tXx = x2;\r\n                    tYy = y2;\r\n                } else {\r\n                    tXx = x1 + tParam * tC;\r\n                    tYy = y1 + tParam * tD;\r\n                }\r\n                return {\r\n                    x: tXx,\r\n                    y: tYy\r\n                };\r\n            };\r\n            /** Gets the distance of two points.\r\n             * @param x1 X part of first point.\r\n             * @param y1 Y part of first point.\r\n             * @param x2 X part of second point.\r\n             * @param y2 Y part of second point.\r\n             * @returns The distance.\r\n             */\r\n            Utils.distance = function (x1, y1, x2, y2) {\r\n                return Math.sqrt(Math.pow(x2 - x1, 2) +\r\n                    Math.pow(y2 - y1, 2));\r\n            };\r\n            /**  Gets the angle between 0,0 -> x1,y1 and 0,0 -> x2,y2 (-pi to pi)\r\n             * @returns The angle.\r\n             */\r\n            Utils.angle = function (x1, y1, x2, y2) {\r\n                var tDot = x1 * x2 + y1 * y2;\r\n                var tDet = x1 * y2 - y1 * x2;\r\n                var tAngle = -Math.atan2(tDet, tDot);\r\n                return tAngle;\r\n            };\r\n            /** shifts angle to be 0 to 2pi */\r\n            Utils.angle2pi = function (x1, y1, x2, y2) {\r\n                var tTheta = Utils.angle(x1, y1, x2, y2);\r\n                if (tTheta < 0) {\r\n                    tTheta += 2 * Math.PI;\r\n                }\r\n                return tTheta;\r\n            };\r\n            /** Checks if an array of points is clockwise.\r\n             * @param points Is array of points with x,y attributes\r\n             * @returns True if clockwise.\r\n             */\r\n            Utils.isClockwise = function (points) {\r\n                // make positive\r\n                var tSubX = Math.min(0, Math.min.apply(null, Utils.map(points, function (p) {\r\n                    return p.x;\r\n                })));\r\n                var tSubY = Math.min(0, Math.min.apply(null, Utils.map(points, function (p) {\r\n                    return p.x;\r\n                })));\r\n                var tNewPoints = Utils.map(points, function (p) {\r\n                    return {\r\n                        x: p.x - tSubX,\r\n                        y: p.y - tSubY\r\n                    };\r\n                });\r\n                // determine CW/CCW, based on:\r\n                // http://stackoverflow.com/questions/1165647\r\n                var tSum = 0;\r\n                for (var tI = 0; tI < tNewPoints.length; tI++) {\r\n                    var tC1 = tNewPoints[tI];\r\n                    var tC2;\r\n                    if (tI === tNewPoints.length - 1) {\r\n                        tC2 = tNewPoints[0];\r\n                    } else {\r\n                        tC2 = tNewPoints[tI + 1];\r\n                    }\r\n                    tSum += (tC2.x - tC1.x) * (tC2.y + tC1.y);\r\n                }\r\n                return (tSum >= 0);\r\n            };\r\n            /** Creates a Guid.\r\n             * @returns A new Guid.\r\n             */\r\n            Utils.guid = function () {\r\n                var tS4 = function () {\r\n                    return Math.floor((1 + Math.random()) * 0x10000)\r\n                        .toString(16)\r\n                        .substring(1);\r\n                };\r\n                return tS4() + tS4() + '-' + tS4() + '-' + tS4() + '-' +\r\n                    tS4() + '-' + tS4() + tS4() + tS4();\r\n            };\r\n            /** both arguments are arrays of corners with x,y attributes */\r\n            Utils.polygonPolygonIntersect = function (firstCorners, secondCorners) {\r\n                for (var tI = 0; tI < firstCorners.length; tI++) {\r\n                    var tFirstCorner = firstCorners[tI],\r\n                        tSecondCorner;\r\n                    if (tI === firstCorners.length - 1) {\r\n                        tSecondCorner = firstCorners[0];\r\n                    } else {\r\n                        tSecondCorner = firstCorners[tI + 1];\r\n                    }\r\n                    if (Utils.linePolygonIntersect(tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y, secondCorners)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            /** Corners is an array of points with x,y attributes */\r\n            Utils.linePolygonIntersect = function (x1, y1, x2, y2, corners) {\r\n                for (var tI = 0; tI < corners.length; tI++) {\r\n                    var tFirstCorner = corners[tI],\r\n                        tSecondCorner;\r\n                    if (tI === corners.length - 1) {\r\n                        tSecondCorner = corners[0];\r\n                    } else {\r\n                        tSecondCorner = corners[tI + 1];\r\n                    }\r\n                    if (Utils.lineLineIntersect(x1, y1, x2, y2, tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y)) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            /** */\r\n            Utils.lineLineIntersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {\r\n                function tCCW(p1, p2, p3) {\r\n                    var tA = p1.x,\r\n                        tB = p1.y,\r\n                        tC = p2.x,\r\n                        tD = p2.y,\r\n                        tE = p3.x,\r\n                        tF = p3.y;\r\n                    return (tF - tB) * (tC - tA) > (tD - tB) * (tE - tA);\r\n                }\r\n                var tP1 = {\r\n                        x: x1,\r\n                        y: y1\r\n                    },\r\n                    tP2 = {\r\n                        x: x2,\r\n                        y: y2\r\n                    },\r\n                    tP3 = {\r\n                        x: x3,\r\n                        y: y3\r\n                    },\r\n                    tP4 = {\r\n                        x: x4,\r\n                        y: y4\r\n                    };\r\n                return (tCCW(tP1, tP3, tP4) !== tCCW(tP2, tP3, tP4)) && (tCCW(tP1, tP2, tP3) !== tCCW(tP1, tP2, tP4));\r\n            };\r\n            /**\r\n             @param corners Is an array of points with x,y attributes\r\n              @param startX X start coord for raycast\r\n              @param startY Y start coord for raycast\r\n            */\r\n            Utils.pointInPolygon = function (x, y, corners, startX, startY) {\r\n                startX = startX || 0;\r\n                startY = startY || 0;\r\n                //ensure that point(startX, startY) is outside the polygon consists of corners\r\n                var tMinX = 0,\r\n                    tMinY = 0;\r\n                // if (startX === undefined || startY === undefined) {\r\n                for (let tI = 0; tI < corners.length; tI++) {\r\n                    tMinX = Math.min(tMinX, corners[tI].x);\r\n                    tMinY = Math.min(tMinX, corners[tI].y);\r\n                }\r\n                startX = tMinX - 10;\r\n                startY = tMinY - 10;\r\n                // }\r\n                var tIntersects = 0;\r\n                for (let tI = 0; tI < corners.length; tI++) {\r\n                    var tFirstCorner = corners[tI],\r\n                        tSecondCorner;\r\n                    if (tI === corners.length - 1) {\r\n                        tSecondCorner = corners[0];\r\n                    } else {\r\n                        tSecondCorner = corners[tI + 1];\r\n                    }\r\n                    if (Utils.lineLineIntersect(startX, startY, x, y, tFirstCorner.x, tFirstCorner.y, tSecondCorner.x, tSecondCorner.y)) {\r\n                        tIntersects++;\r\n                    }\r\n                }\r\n                // odd intersections means the point is in the polygon\r\n                return ((tIntersects % 2) === 1);\r\n            };\r\n            /** Checks if all corners of insideCorners are inside the polygon described by outsideCorners */\r\n            Utils.polygonInsidePolygon = function (insideCorners, outsideCorners, startX, startY) {\r\n                startX = startX || 0;\r\n                startY = startY || 0;\r\n                for (var tI = 0; tI < insideCorners.length; tI++) {\r\n                    if (!Utils.pointInPolygon(insideCorners[tI].x, insideCorners[tI].y, outsideCorners, startX, startY)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n            /** Checks if any corners of firstCorners is inside the polygon described by secondCorners */\r\n            Utils.polygonOutsidePolygon = function (insideCorners, outsideCorners, startX, startY) {\r\n                startX = startX || 0;\r\n                startY = startY || 0;\r\n                for (var tI = 0; tI < insideCorners.length; tI++) {\r\n                    if (Utils.pointInPolygon(insideCorners[tI].x, insideCorners[tI].y, outsideCorners, startX, startY)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n            // arrays\r\n            Utils.forEach = function (array, action) {\r\n                for (var tI = 0; tI < array.length; tI++) {\r\n                    action(array[tI]);\r\n                }\r\n            };\r\n            Utils.forEachIndexed = function (array, action) {\r\n                for (var tI = 0; tI < array.length; tI++) {\r\n                    action(tI, array[tI]);\r\n                }\r\n            };\r\n            Utils.map = function (array, func) {\r\n                var tResult = [];\r\n                array.forEach(function (element) {\r\n                    tResult.push(func(element));\r\n                });\r\n                return tResult;\r\n            };\r\n            /** Remove elements in array if func(element) returns true */\r\n            Utils.removeIf = function (array, func) {\r\n                var tResult = [];\r\n                array.forEach(function (element) {\r\n                    if (!func(element)) {\r\n                        tResult.push(element);\r\n                    }\r\n                });\r\n                return tResult;\r\n            };\r\n            /** Shift the items in an array by shift (positive integer) */\r\n            Utils.cycle = function (arr, shift) {\r\n                var tReturn = arr.slice(0);\r\n                for (var tI = 0; tI < shift; tI++) {\r\n                    var tmp = tReturn.shift();\r\n                    tReturn.push(tmp);\r\n                }\r\n                return tReturn;\r\n            };\r\n            /** Returns in the unique elemnts in arr */\r\n            Utils.unique = function (arr, hashFunc) {\r\n                var tResults = [];\r\n                var tMap = {};\r\n                for (var tI = 0; tI < arr.length; tI++) {\r\n                    if (!tMap.hasOwnProperty(arr[tI])) {\r\n                        tResults.push(arr[tI]);\r\n                        tMap[hashFunc(arr[tI])] = true;\r\n                    }\r\n                }\r\n                return tResults;\r\n            };\r\n            /** Remove value from array, if it is present */\r\n            Utils.removeValue = function (array, value) {\r\n                for (var tI = array.length - 1; tI >= 0; tI--) {\r\n                    if (array[tI] === value) {\r\n                        array.splice(tI, 1);\r\n                    }\r\n                }\r\n            };\r\n            /** Subtracts the elements in subArray from array */\r\n            Utils.subtract = function (array, subArray) {\r\n                return Utils.removeIf(array, function (el) {\r\n                    return Utils.hasValue(subArray, el);\r\n                });\r\n            };\r\n            /** Checks if value is in array */\r\n            Utils.hasValue = function (array, value) {\r\n                for (var tI = 0; tI < array.length; tI++) {\r\n                    if (array[tI] === value) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            return Utils;\r\n        })();\r\n        Core.Utils = Utils;\r\n    })(Core = BP3D.Core || (BP3D.Core = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Core;\r\n    (function (Core) {\r\n        /** Dimensioning in Inch. */\r\n        Core.dimInch = \"inch\";\r\n        /** Dimensioning in Meter. */\r\n        Core.dimMeter = \"m\";\r\n        /** Dimensioning in Centi Meter. */\r\n        Core.dimCentiMeter = \"cm\";\r\n        /** Dimensioning in Milli Meter. */\r\n        Core.dimMilliMeter = \"mm\";\r\n        /** Dimensioning functions. */\r\n        var Dimensioning = (function () {\r\n            function Dimensioning() {}\r\n            /** Converts cm to dimensioning string.\r\n             * @param cm Centi meter value to be converted.\r\n             * @returns String representation.\r\n             */\r\n            Dimensioning.cmToMeasure = function (cm) {\r\n                switch (Core.Configuration.getStringValue(Core.configDimUnit)) {\r\n                    case Core.dimInch:\r\n                        var realFeet = ((cm * 0.393700) / 12);\r\n                        var feet = Math.floor(realFeet);\r\n                        var inches = Math.round((realFeet - feet) * 12);\r\n                        return feet + \"'\" + inches + '\"';\r\n                    case Core.dimMilliMeter:\r\n                        return \"\" + Math.round(10 * cm) + \" mm\";\r\n                    case Core.dimCentiMeter:\r\n                        return \"\" + Math.round(10 * cm) / 10 + \" cm\";\r\n                    case Core.dimMeter:\r\n                    default:\r\n                        return \"\" + Math.round(10 * cm) / 1000 + \" m\";\r\n                }\r\n            };\r\n            return Dimensioning;\r\n        })();\r\n        Core.Dimensioning = Dimensioning;\r\n    })(Core = BP3D.Core || (BP3D.Core = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Core;\r\n    (function (Core) {\r\n        // GENERAL:\r\n        /** The dimensioning unit for 2D floorplan measurements. */\r\n        Core.configDimUnit = \"dimUnit\";\r\n        // WALL:\r\n        /** The initial wall height in cm. */\r\n        Core.configWallHeight = \"wallHeight\";\r\n        /** The initial wall thickness in cm. */\r\n        Core.configWallThickness = \"wallThickness\";\r\n        /** Global configuration to customize the whole system.  */\r\n        var Configuration = (function () {\r\n            function Configuration() {}\r\n            /** Set a configuration parameter. */\r\n            Configuration.setValue = function (key, value) {\r\n                this.data[key] = value;\r\n            };\r\n            /** Get a string configuration parameter. */\r\n            Configuration.getStringValue = function (key) {\r\n                switch (key) {\r\n                    case Core.configDimUnit:\r\n                        return this.data[key];\r\n                    default:\r\n                        throw new Error(\"Invalid string configuration parameter: \" + key);\r\n                }\r\n            };\r\n            /** Get a numeric configuration parameter. */\r\n            Configuration.getNumericValue = function (key) {\r\n                switch (key) {\r\n                    case Core.configWallHeight:\r\n                    case Core.configWallThickness:\r\n                        return this.data[key];\r\n                    default:\r\n                        throw new Error(\"Invalid numeric configuration parameter: \" + key);\r\n                }\r\n            };\r\n            /** Configuration data loaded from/stored to extern. */\r\n            Configuration.data = {\r\n                dimUnit: Core.dimInch,\r\n                wallHeight: 250,\r\n                wallThickness: 10\r\n            };\r\n            return Configuration;\r\n        })();\r\n        Core.Configuration = Configuration;\r\n    })(Core = BP3D.Core || (BP3D.Core = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b)\r\n        if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\r\n    function __() {\r\n        this.constructor = d;\r\n    }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /**\r\n         * An Item is an abstract entity for all things placed in the scene,\r\n         * e.g. at walls or on the floor.\r\n         */\r\n        var Item = (function (_super) {\r\n            __extends(Item, _super);\r\n            /** Constructs an item.\r\n             * @param model TODO\r\n             * @param metadata TODO\r\n             * @param geometry TODO\r\n             * @param material TODO\r\n             * @param position TODO\r\n             * @param rotation TODO\r\n             * @param scale TODO\r\n             */\r\n            function Item(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this);\r\n                this.model = model;\r\n                this.metadata = metadata;\r\n                /** */\r\n                this.errorGlow = new THREE.Mesh();\r\n                /** */\r\n                this.hover = false;\r\n                /** */\r\n                this.selected = false;\r\n                /** */\r\n                this.highlighted = false;\r\n                /** */\r\n                this.error = false;\r\n                /** */\r\n                this.emissiveColor = 0x444444;\r\n                /** */\r\n                this.errorColor = 0xff0000;\r\n                /** Does this object affect other floor items */\r\n                this.obstructFloorMoves = true;\r\n                /** Does this object affect other in wall items */\r\n                this.obstructInWallMoves = false;\r\n                /** Does this object affect other on floor items */\r\n                this.obstructOnFloorMoves = false;\r\n                /** Does this object affect other on ceiling items */\r\n                this.obstructCeilingMoves = false;\r\n                /** Show rotate option in context menu */\r\n                this.allowRotate = true;\r\n                /** */\r\n                this.fixed = false;\r\n                /** dragging */\r\n                this.dragOffset = new THREE.Vector3();\r\n                /** */\r\n                this.getHeight = function () {\r\n                    return this.halfSize.y * 2.0;\r\n                };\r\n                /** */\r\n                this.getWidth = function () {\r\n                    return this.halfSize.x * 2.0;\r\n                };\r\n                /** */\r\n                this.getDepth = function () {\r\n                    return this.halfSize.z * 2.0;\r\n                };\r\n                /** */\r\n                this.getElevation = function () {\r\n                    return this.position.y - this.halfSize.y;\r\n                };\r\n                /** */\r\n                this.initObject = function (position) {\r\n                    this.placeInRoom(position);\r\n                    // select and stuff\r\n                    this.scene.needsUpdate = true;\r\n                };\r\n                this.scene = this.model.scene;\r\n                this.geometry = geometry;\r\n                this.material = material;\r\n                this.errorColor = 0xff0000;\r\n                this.resizable = metadata.resizable;\r\n                this.castShadow = true;\r\n                this.receiveShadow = true;\r\n                this.geometry = geometry;\r\n                this.material = material;\r\n                if (position) {\r\n                    this.position.copy(position);\r\n                    this.position_set = true;\r\n                } else {\r\n                    this.position_set = false;\r\n                }\r\n                // center in its boundingbox\r\n                this.geometry.computeBoundingBox();\r\n                this.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(-0.5 * (this.geometry.boundingBox.max.x + this.geometry.boundingBox.min.x), -0.5 * (this.geometry.boundingBox.max.y + this.geometry.boundingBox.min.y), -0.5 * (this.geometry.boundingBox.max.z + this.geometry.boundingBox.min.z)));\r\n                this.geometry.computeBoundingBox();\r\n                this.halfSize = this.objectHalfSize();\r\n                if (rotation) {\r\n                    this.rotation.y = rotation;\r\n                }\r\n                if (scale != null) {\r\n                    this.setScale(scale.x, scale.y, scale.z);\r\n                }\r\n            };\r\n            /** */\r\n            Item.prototype.remove = function () {\r\n                this.scene.removeItem(this);\r\n            };\r\n            /** */\r\n            Item.prototype.isElevationAdjustable = function () {\r\n                return false;\r\n            };\r\n            /** */\r\n            Item.prototype.elevate = function (elevation) {\r\n                if (elevation > 0 && elevation < BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y)) {\r\n                    this.position.y = this.halfSize.y + elevation;\r\n                }\r\n            };\r\n            /** */\r\n            Item.prototype.resize = function (height, width, depth) {\r\n                if (height > 0 && width > 0 && depth > 0) {\r\n                    var x = width / this.getWidth();\r\n                    var y = height / this.getHeight();\r\n                    var z = depth / this.getDepth();\r\n                    this.setScale(x, y, z);\r\n                }\r\n            };\r\n            /** */\r\n            Item.prototype.setScale = function (x, y, z) {\r\n                var scaleVec = new THREE.Vector3(x, y, z);\r\n                this.halfSize.multiply(scaleVec);\r\n                scaleVec.multiply(this.scale);\r\n                this.scale.set(scaleVec.x, scaleVec.y, scaleVec.z);\r\n                this.resized();\r\n                this.scene.needsUpdate = true;\r\n            };;\r\n            /** */\r\n            Item.prototype.setFixed = function (fixed) {\r\n                this.fixed = fixed;\r\n            };\r\n            /** */\r\n            Item.prototype.removed = function () {};\r\n            /** on is a bool */\r\n            Item.prototype.updateHighlight = function () {\r\n                var on = this.hover || this.selected;\r\n                this.highlighted = on;\r\n                // eslint-disable-next-line no-unused-vars\r\n                var hex = on ? this.emissiveColor : 0x000000;\r\n                // eslint-disable-next-line no-unused-vars\r\n                var materials = this.material.materials;\r\n                // if (materials) {\r\n                //   (<THREE.MeshFaceMaterial>this.material).materials.forEach((material) => {\r\n                //     // TODO_Ekki emissive doesn't exist anymore?\r\n                //     if (material) {\r\n                //       if (material.emissive) {\r\n                //         (<any>material).emissive.setHex(hex);\r\n                //       }\r\n                //     }\r\n                //   });\r\n                // }\r\n            };\r\n            /** */\r\n            Item.prototype.mouseOver = function () {\r\n                this.hover = true;\r\n                this.updateHighlight();\r\n            };;\r\n            /** */\r\n            Item.prototype.mouseOff = function () {\r\n                this.hover = false;\r\n                this.updateHighlight();\r\n            };;\r\n            /** */\r\n            Item.prototype.setSelected = function () {\r\n                this.selected = true;\r\n                this.updateHighlight();\r\n            };;\r\n            /** */\r\n            Item.prototype.setUnselected = function () {\r\n                this.selected = false;\r\n                this.updateHighlight();\r\n            };;\r\n            /** intersection has attributes point (vec3) and object (THREE.Mesh) */\r\n            Item.prototype.clickPressed = function (intersection) {\r\n                this.dragOffset.copy(intersection.point).sub(this.position);\r\n            };;\r\n            /** */\r\n            Item.prototype.clickDragged = function (intersection) {\r\n                if (intersection) {\r\n                    this.moveToPosition(intersection.point.sub(this.dragOffset), intersection);\r\n                }\r\n            };;\r\n            /** */\r\n            Item.prototype.rotate = function (intersection) {\r\n                if (intersection) {\r\n                    var angle = BP3D.Core.Utils.angle(0, 1, intersection.point.x - this.position.x, intersection.point.z - this.position.z);\r\n                    var snapTolerance = Math.PI / 16.0;\r\n                    // snap to intervals near Math.PI/2\r\n                    for (var i = -4; i <= 4; i++) {\r\n                        if (Math.abs(angle - (i * (Math.PI / 2))) < snapTolerance) {\r\n                            angle = i * (Math.PI / 2);\r\n                            break;\r\n                        }\r\n                    }\r\n                    this.rotation.y = angle;\r\n                }\r\n            };\r\n            /** */\r\n            Item.prototype.moveToPosition = function (vec3, intersection) {\r\n                this.position.copy(vec3);\r\n            };\r\n            /** */\r\n            Item.prototype.clickReleased = function () {\r\n                if (this.error) {\r\n                    this.hideError();\r\n                }\r\n            };;\r\n            /**\r\n             * Returns an array of planes to use other than the ground plane\r\n             * for passing intersection to clickPressed and clickDragged\r\n             */\r\n            Item.prototype.customIntersectionPlanes = function () {\r\n                return [];\r\n            };\r\n            /**\r\n             * returns the 2d corners of the bounding polygon\r\n             *\r\n             * offset is Vector3 (used for getting corners of object at a new position)\r\n             *\r\n             * TODO: handle rotated objects better!\r\n             */\r\n            Item.prototype.getCorners = function (xDim, yDim, position) {\r\n                position = position || this.position;\r\n                var halfSize = this.halfSize.clone();\r\n                var c1 = new THREE.Vector3(-halfSize.x, 0, -halfSize.z);\r\n                var c2 = new THREE.Vector3(halfSize.x, 0, -halfSize.z);\r\n                var c3 = new THREE.Vector3(halfSize.x, 0, halfSize.z);\r\n                var c4 = new THREE.Vector3(-halfSize.x, 0, halfSize.z);\r\n                var transform = new THREE.Matrix4();\r\n                //console.log(this.rotation.y);\r\n                transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\r\n                c1.applyMatrix4(transform);\r\n                c2.applyMatrix4(transform);\r\n                c3.applyMatrix4(transform);\r\n                c4.applyMatrix4(transform);\r\n                c1.add(position);\r\n                c2.add(position);\r\n                c3.add(position);\r\n                c4.add(position);\r\n                //halfSize.applyMatrix4(transform);\r\n                //var min = position.clone().sub(halfSize);\r\n                //var max = position.clone().add(halfSize);\r\n                var corners = [{\r\n                        x: c1.x,\r\n                        y: c1.z\r\n                    },\r\n                    {\r\n                        x: c2.x,\r\n                        y: c2.z\r\n                    },\r\n                    {\r\n                        x: c3.x,\r\n                        y: c3.z\r\n                    },\r\n                    {\r\n                        x: c4.x,\r\n                        y: c4.z\r\n                    }\r\n                ];\r\n                return corners;\r\n            };\r\n\r\n            /**\r\n             * returns the 2d corners of the bounding polygon\r\n             *\r\n             * offset is Vector3 (used for getting corners of object at a new position)\r\n             *\r\n             * TODO: handle rotated objects better!\r\n             */\r\n            Item.prototype.getCornersXZ = function (xDim, yDim, position) {\r\n                position = position || this.position;\r\n                var halfSize = this.halfSize.clone();\r\n                let wallTol = 15;\r\n                var c1 = new THREE.Vector3(-(halfSize.x + wallTol), 0, -(halfSize.z + wallTol));\r\n                var c2 = new THREE.Vector3(halfSize.x + wallTol, 0, -(halfSize.z + wallTol));\r\n                var c3 = new THREE.Vector3(halfSize.x + wallTol, 0, halfSize.z + wallTol);\r\n                var c4 = new THREE.Vector3(-(halfSize.x + wallTol), 0, halfSize.z + wallTol);\r\n                var transform = new THREE.Matrix4();\r\n                //console.log(this.rotation.y);\r\n                transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\r\n                c1.applyMatrix4(transform);\r\n                c2.applyMatrix4(transform);\r\n                c3.applyMatrix4(transform);\r\n                c4.applyMatrix4(transform);\r\n                c1.add(position);\r\n                c2.add(position);\r\n                c3.add(position);\r\n                c4.add(position);\r\n                //halfSize.applyMatrix4(transform);\r\n                //var min = position.clone().sub(halfSize);\r\n                //var max = position.clone().add(halfSize);\r\n                var corners = [{\r\n                        x: c1.x,\r\n                        y: c1.z\r\n                    },\r\n                    {\r\n                        x: c2.x,\r\n                        y: c2.z\r\n                    },\r\n                    {\r\n                        x: c3.x,\r\n                        y: c3.z\r\n                    },\r\n                    {\r\n                        x: c4.x,\r\n                        y: c4.z\r\n                    }\r\n                ];\r\n                return corners;\r\n            };\r\n\r\n            /**\r\n             * returns the 2d corners of the bounding polygon\r\n             *\r\n             * offset is Vector3 (used for getting corners of object at a new position)\r\n             *\r\n             * TODO: handle rotated objects better!\r\n             */\r\n            Item.prototype.getCornersXZBIG = function (xDim, yDim, position) {\r\n                position = position || this.position;\r\n                var halfSize = this.halfSize.clone();\r\n                let maxSize = Math.max(halfSize.x, halfSize.z);\r\n                let wallTol = 15;\r\n                var c1 = new THREE.Vector3(-(maxSize + wallTol), 0, -(maxSize + wallTol));\r\n                var c2 = new THREE.Vector3((maxSize + wallTol), 0, -(maxSize + wallTol));\r\n                var c3 = new THREE.Vector3((maxSize + wallTol), 0, (maxSize + wallTol));\r\n                var c4 = new THREE.Vector3(-(maxSize + wallTol), 0, (maxSize + wallTol));\r\n                var transform = new THREE.Matrix4();\r\n                //console.log(this.rotation.y);\r\n                transform.makeRotationY(this.rotation.y); //  + Math.PI/2)\r\n                c1.applyMatrix4(transform);\r\n                c2.applyMatrix4(transform);\r\n                c3.applyMatrix4(transform);\r\n                c4.applyMatrix4(transform);\r\n                c1.add(position);\r\n                c2.add(position);\r\n                c3.add(position);\r\n                c4.add(position);\r\n                //halfSize.applyMatrix4(transform);\r\n                //var min = position.clone().sub(halfSize);\r\n                //var max = position.clone().add(halfSize);\r\n                var corners = [{\r\n                        x: c1.x,\r\n                        y: c1.z\r\n                    },\r\n                    {\r\n                        x: c2.x,\r\n                        y: c2.z\r\n                    },\r\n                    {\r\n                        x: c3.x,\r\n                        y: c3.z\r\n                    },\r\n                    {\r\n                        x: c4.x,\r\n                        y: c4.z\r\n                    }\r\n                ];\r\n                return corners;\r\n            };\r\n\r\n            /**\r\n             * returns the 2d corners of the bounding polygon\r\n             *\r\n             * offset is Vector3 (used for getting corners of object at a new position)\r\n             *\r\n             * TODO: handle rotated objects better!\r\n             */\r\n            Item.prototype.getCornersXY = function (xDim, yDim, position) {\r\n                position = position || this.position;\r\n                var halfSize = this.halfSize.clone();\r\n                var c1 = new THREE.Vector3(-halfSize.x, -halfSize.y, 0);\r\n                var c2 = new THREE.Vector3(halfSize.x, -halfSize.y, 0);\r\n                var c3 = new THREE.Vector3(halfSize.x, halfSize.y, 0);\r\n                var c4 = new THREE.Vector3(-halfSize.x, halfSize.y, 0);\r\n                var transform = new THREE.Matrix4();\r\n                //console.log(this.rotation.y);\r\n                transform.makeRotationY(this.rotation.z); //  + Math.PI/2)\r\n                c1.applyMatrix4(transform);\r\n                c2.applyMatrix4(transform);\r\n                c3.applyMatrix4(transform);\r\n                c4.applyMatrix4(transform);\r\n                c1.add(position);\r\n                c2.add(position);\r\n                c3.add(position);\r\n                c4.add(position);\r\n                //halfSize.applyMatrix4(transform);\r\n                //var min = position.clone().sub(halfSize);\r\n                //var max = position.clone().add(halfSize);\r\n                var corners = [{\r\n                        x: c1.x,\r\n                        y: c1.y\r\n                    },\r\n                    {\r\n                        x: c2.x,\r\n                        y: c2.y\r\n                    },\r\n                    {\r\n                        x: c3.x,\r\n                        y: c3.y\r\n                    },\r\n                    {\r\n                        x: c4.x,\r\n                        y: c4.y\r\n                    }\r\n                ];\r\n                return corners;\r\n            };\r\n\r\n            /**\r\n             * returns the 2d corners of the bounding polygon\r\n             *\r\n             * offset is Vector3 (used for getting corners of object at a new position)\r\n             *\r\n             * TODO: handle rotated objects better!\r\n             */\r\n            Item.prototype.getCornersYZ = function (xDim, yDim, position) {\r\n                position = position || this.position;\r\n                var halfSize = this.halfSize.clone();\r\n                var c1 = new THREE.Vector3(0, -halfSize.y, -halfSize.z);\r\n                var c2 = new THREE.Vector3(0, halfSize.y, -halfSize.z);\r\n                var c3 = new THREE.Vector3(0, halfSize.y, halfSize.z);\r\n                var c4 = new THREE.Vector3(0, -halfSize.y, halfSize.z);\r\n                var transform = new THREE.Matrix4();\r\n                //console.log(this.rotation.y);\r\n                transform.makeRotationY(this.rotation.x); //  + Math.PI/2)\r\n                c1.applyMatrix4(transform);\r\n                c2.applyMatrix4(transform);\r\n                c3.applyMatrix4(transform);\r\n                c4.applyMatrix4(transform);\r\n                c1.add(position);\r\n                c2.add(position);\r\n                c3.add(position);\r\n                c4.add(position);\r\n                //halfSize.applyMatrix4(transform);\r\n                //var min = position.clone().sub(halfSize);\r\n                //var max = position.clone().add(halfSize);\r\n                var corners = [{\r\n                        x: c1.y,\r\n                        y: c1.z\r\n                    },\r\n                    {\r\n                        x: c2.y,\r\n                        y: c2.z\r\n                    },\r\n                    {\r\n                        x: c3.y,\r\n                        y: c3.z\r\n                    },\r\n                    {\r\n                        x: c4.y,\r\n                        y: c4.z\r\n                    }\r\n                ];\r\n                return corners;\r\n            };\r\n\r\n\r\n            /** */\r\n            Item.prototype.showError = function (vec3) {\r\n                vec3 = vec3 || this.position;\r\n                if (!this.error) {\r\n                    this.error = true;\r\n                    this.errorGlow = this.createGlow(this.errorColor, 0.8, true);\r\n                    this.scene.add(this.errorGlow);\r\n                }\r\n                this.errorGlow.position.copy(vec3);\r\n            };\r\n            /** */\r\n            Item.prototype.hideError = function () {\r\n                if (this.error) {\r\n                    this.error = false;\r\n                    this.scene.remove(this.errorGlow);\r\n                }\r\n            };\r\n            /** */\r\n            Item.prototype.objectHalfSize = function () {\r\n                var objectBox = new THREE.Box3();\r\n                objectBox.setFromObject(this);\r\n                return objectBox.max.clone().sub(objectBox.min).divideScalar(2);\r\n            };\r\n            /** */\r\n            Item.prototype.createGlow = function (color, opacity, ignoreDepth) {\r\n                ignoreDepth = ignoreDepth || false;\r\n                opacity = opacity || 0.2;\r\n                var glowMaterial = new THREE.MeshBasicMaterial({\r\n                    color: color,\r\n                    blending: THREE.AdditiveBlending,\r\n                    opacity: 0.2,\r\n                    transparent: true,\r\n                    depthTest: !ignoreDepth\r\n                });\r\n                var glow = new THREE.Mesh(this.geometry.clone(), glowMaterial);\r\n                glow.position.copy(this.position);\r\n                glow.rotation.copy(this.rotation);\r\n                glow.scale.copy(this.scale);\r\n                return glow;\r\n            };;\r\n            return Item;\r\n        })(THREE.Mesh);\r\n        Items.Item = Item;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /** */\r\n        var cornerTolerance = 20;\r\n        /**\r\n         * Corners are used to define Walls.\r\n         */\r\n        var Corner = (function () {\r\n            /** Constructs a corner.\r\n             * @param floorplan The associated floorplan.\r\n             * @param x X coordinate.\r\n             * @param y Y coordinate.\r\n             * @param id An optional unique id. If not set, created internally.\r\n             */\r\n            function Corner(floorplan, x, y, id) {\r\n                this.floorplan = floorplan;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.id = id;\r\n                /** Array of start walls. */\r\n                this.wallStarts = [];\r\n                /** Array of end walls. */\r\n                this.wallEnds = [];\r\n                /** Callbacks to be fired on movement. */\r\n                this.moved_callbacks = $.Callbacks();\r\n                /** Callbacks to be fired on removal. */\r\n                this.deleted_callbacks = $.Callbacks();\r\n                /** Callbacks to be fired in case of action. */\r\n                this.action_callbacks = $.Callbacks();\r\n                this.id = id || BP3D.Core.Utils.guid();\r\n            }\r\n            /** Add function to moved callbacks.\r\n             * @param func The function to be added.\r\n             */\r\n            Corner.prototype.fireOnMove = function (func) {\r\n                this.moved_callbacks.add(func);\r\n            };\r\n            /** Add function to deleted callbacks.\r\n             * @param func The function to be added.\r\n             */\r\n            Corner.prototype.fireOnDelete = function (func) {\r\n                this.deleted_callbacks.add(func);\r\n            };\r\n            /** Add function to action callbacks.\r\n             * @param func The function to be added.\r\n             */\r\n            Corner.prototype.fireOnAction = function (func) {\r\n                this.action_callbacks.add(func);\r\n            };\r\n            /**\r\n             * @returns\r\n             * @deprecated\r\n             */\r\n            Corner.prototype.getX = function () {\r\n                return this.x;\r\n            };\r\n            /**\r\n             * @returns\r\n             * @deprecated\r\n             */\r\n            Corner.prototype.getY = function () {\r\n                return this.y;\r\n            };\r\n            /**\r\n             *\r\n             */\r\n            Corner.prototype.snapToAxis = function (tolerance) {\r\n                // try to snap this corner to an axis\r\n                var snapped = {\r\n                    x: false,\r\n                    y: false\r\n                };\r\n                var scope = this;\r\n                this.adjacentCorners().forEach(function (corner) {\r\n                    if (Math.abs(corner.x - scope.x) < tolerance) {\r\n                        scope.x = corner.x;\r\n                        snapped.x = true;\r\n                    }\r\n                    if (Math.abs(corner.y - scope.y) < tolerance) {\r\n                        scope.y = corner.y;\r\n                        snapped.y = true;\r\n                    }\r\n                });\r\n                return snapped;\r\n            };\r\n            /** Moves corner relatively to new position.\r\n             * @param dx The delta x.\r\n             * @param dy The delta y.\r\n             */\r\n            Corner.prototype.relativeMove = function (dx, dy) {\r\n                this.move(this.x + dx, this.y + dy);\r\n            };\r\n            Corner.prototype.fireAction = function (action) {\r\n                this.action_callbacks.fire(action);\r\n            };\r\n            /** Remove callback. Fires the delete callbacks. */\r\n            Corner.prototype.remove = function () {\r\n                this.deleted_callbacks.fire(this);\r\n            };\r\n            /** Removes all walls. */\r\n            Corner.prototype.removeAll = function () {\r\n                for (let i = 0; i < this.wallStarts.length; i++) {\r\n                    this.wallStarts[i].remove();\r\n                }\r\n                for (let i = 0; i < this.wallEnds.length; i++) {\r\n                    this.wallEnds[i].remove();\r\n                }\r\n                this.remove();\r\n            };\r\n            /** Moves corner to new position.\r\n             * @param newX The new x position.\r\n             * @param newY The new y position.\r\n             */\r\n            Corner.prototype.move = function (newX, newY) {\r\n                this.x = newX;\r\n                this.y = newY;\r\n                this.mergeWithIntersected();\r\n                this.moved_callbacks.fire(this.x, this.y);\r\n                this.wallStarts.forEach(function (wall) {\r\n                    wall.fireMoved();\r\n                });\r\n                this.wallEnds.forEach(function (wall) {\r\n                    wall.fireMoved();\r\n                });\r\n            };\r\n            /** Gets the adjacent corners.\r\n             * @returns Array of corners.\r\n             */\r\n            Corner.prototype.adjacentCorners = function () {\r\n                var retArray = [];\r\n                for (let i = 0; i < this.wallStarts.length; i++) {\r\n                    retArray.push(this.wallStarts[i].getEnd());\r\n                }\r\n                for (let i = 0; i < this.wallEnds.length; i++) {\r\n                    retArray.push(this.wallEnds[i].getStart());\r\n                }\r\n                return retArray;\r\n            };\r\n            /** Checks if a wall is connected.\r\n             * @param wall A wall.\r\n             * @returns True in case of connection.\r\n             */\r\n            Corner.prototype.isWallConnected = function (wall) {\r\n                for (let i = 0; i < this.wallStarts.length; i++) {\r\n                    if (this.wallStarts[i] === wall) {\r\n                        return true;\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.wallEnds.length; i++) {\r\n                    if (this.wallEnds[i] === wall) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            /**\r\n             *\r\n             */\r\n            Corner.prototype.distanceFrom = function (x, y) {\r\n                var distance = BP3D.Core.Utils.distance(x, y, this.x, this.y);\r\n                //console.log('x,y ' + x + ',' + y + ' to ' + this.getX() + ',' + this.getY() + ' is ' + distance);\r\n                return distance;\r\n            };\r\n            /** Gets the distance from a wall.\r\n             * @param wall A wall.\r\n             * @returns The distance.\r\n             */\r\n            Corner.prototype.distanceFromWall = function (wall) {\r\n                return wall.distanceFrom(this.x, this.y);\r\n            };\r\n            /** Gets the distance from a corner.\r\n             * @param corner A corner.\r\n             * @returns The distance.\r\n             */\r\n            Corner.prototype.distanceFromCorner = function (corner) {\r\n                return this.distanceFrom(corner.x, corner.y);\r\n            };\r\n            /** Detaches a wall.\r\n             * @param wall A wall.\r\n             */\r\n            Corner.prototype.detachWall = function (wall) {\r\n                BP3D.Core.Utils.removeValue(this.wallStarts, wall);\r\n                BP3D.Core.Utils.removeValue(this.wallEnds, wall);\r\n                if (this.wallStarts.length === 0 && this.wallEnds.length === 0) {\r\n                    this.remove();\r\n                }\r\n            };\r\n            /** Attaches a start wall.\r\n             * @param wall A wall.\r\n             */\r\n            Corner.prototype.attachStart = function (wall) {\r\n                this.wallStarts.push(wall);\r\n            };\r\n            /** Attaches an end wall.\r\n             * @param wall A wall.\r\n             */\r\n            Corner.prototype.attachEnd = function (wall) {\r\n                this.wallEnds.push(wall);\r\n            };\r\n            /** Get wall to corner.\r\n             * @param corner A corner.\r\n             * @return The associated wall or null.\r\n             */\r\n            Corner.prototype.wallTo = function (corner) {\r\n                for (var i = 0; i < this.wallStarts.length; i++) {\r\n                    if (this.wallStarts[i].getEnd() === corner) {\r\n                        return this.wallStarts[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /** Get wall from corner.\r\n             * @param corner A corner.\r\n             * @return The associated wall or null.\r\n             */\r\n            Corner.prototype.wallFrom = function (corner) {\r\n                for (var i = 0; i < this.wallEnds.length; i++) {\r\n                    if (this.wallEnds[i].getStart() === corner) {\r\n                        return this.wallEnds[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /** Get wall to or from corner.\r\n             * @param corner A corner.\r\n             * @return The associated wall or null.\r\n             */\r\n            Corner.prototype.wallToOrFrom = function (corner) {\r\n                return this.wallTo(corner) || this.wallFrom(corner);\r\n            };\r\n            /**\r\n             *\r\n             */\r\n            Corner.prototype.combineWithCorner = function (corner) {\r\n                // update position to other corner's\r\n                this.x = corner.x;\r\n                this.y = corner.y;\r\n                // absorb the other corner's wallStarts and wallEnds\r\n                for (let i = corner.wallStarts.length - 1; i >= 0; i--) {\r\n                    corner.wallStarts[i].setStart(this);\r\n                }\r\n                for (let i = corner.wallEnds.length - 1; i >= 0; i--) {\r\n                    corner.wallEnds[i].setEnd(this);\r\n                }\r\n                // delete the other corner\r\n                corner.removeAll();\r\n                this.removeDuplicateWalls();\r\n                this.floorplan.update();\r\n            };\r\n            Corner.prototype.mergeWithIntersected = function () {\r\n                //console.log('mergeWithIntersected for object: ' + this.type);\r\n                // check corners\r\n                for (var i = 0; i < this.floorplan.getCorners().length; i++) {\r\n                    var corner = this.floorplan.getCorners()[i];\r\n                    if (this.distanceFromCorner(corner) < cornerTolerance && corner !== this) {\r\n                        this.combineWithCorner(corner);\r\n                        return true;\r\n                    }\r\n                }\r\n                // check walls\r\n                for (let i = 0; i < this.floorplan.getWalls().length; i++) {\r\n                    var wall = this.floorplan.getWalls()[i];\r\n                    if (this.distanceFromWall(wall) < cornerTolerance && !this.isWallConnected(wall)) {\r\n                        // update position to be on wall\r\n                        var intersection = BP3D.Core.Utils.closestPointOnLine(this.x, this.y, wall.getStart().x, wall.getStart().y, wall.getEnd().x, wall.getEnd().y);\r\n                        this.x = intersection.x;\r\n                        this.y = intersection.y;\r\n                        // merge this corner into wall by breaking wall into two parts\r\n                        this.floorplan.newWall(this, wall.getEnd());\r\n                        wall.setEnd(this);\r\n                        this.floorplan.update();\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            /** Ensure we do not have duplicate walls (i.e. same start and end points) */\r\n            Corner.prototype.removeDuplicateWalls = function () {\r\n                // delete the wall between these corners, if it exists\r\n                var wallEndpoints = {};\r\n                var wallStartpoints = {};\r\n                for (let i = this.wallStarts.length - 1; i >= 0; i--) {\r\n                    if (this.wallStarts[i].getEnd() === this) {\r\n                        // remove zero length wall \r\n                        this.wallStarts[i].remove();\r\n                    } else if (this.wallStarts[i].getEnd().id in wallEndpoints) {\r\n                        // remove duplicated wall\r\n                        this.wallStarts[i].remove();\r\n                    } else {\r\n                        wallEndpoints[this.wallStarts[i].getEnd().id] = true;\r\n                    }\r\n                }\r\n                for (let i = this.wallEnds.length - 1; i >= 0; i--) {\r\n                    if (this.wallEnds[i].getStart() === this) {\r\n                        // removed zero length wall \r\n                        this.wallEnds[i].remove();\r\n                    } else if (this.wallEnds[i].getStart().id in wallStartpoints) {\r\n                        // removed duplicated wall\r\n                        this.wallEnds[i].remove();\r\n                    } else {\r\n                        wallStartpoints[this.wallEnds[i].getStart().id] = true;\r\n                    }\r\n                }\r\n            };\r\n            return Corner;\r\n        })();\r\n        Model.Corner = Corner;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /**\r\n         * Half Edges are created by Room.\r\n         *\r\n         * Once rooms have been identified, Half Edges are created for each interior wall.\r\n         *\r\n         * A wall can have two half edges if it is visible from both sides.\r\n         */\r\n        var HalfEdge = (function () {\r\n            /**\r\n             * Constructs a half edge.\r\n             * @param room The associated room.\r\n             * @param wall The corresponding wall.\r\n             * @param front True if front side.\r\n             */\r\n            function HalfEdge(room, wall, front) {\r\n                this.room = room;\r\n                this.wall = wall;\r\n                this.front = front;\r\n                /** used for intersection testing... not convinced this belongs here */\r\n                this.plane = null;\r\n\r\n                this.box = null;\r\n                /** transform from world coords to wall planes (z=0) */\r\n                this.interiorTransform = new THREE.Matrix4();\r\n                /** transform from world coords to wall planes (z=0) */\r\n                this.invInteriorTransform = new THREE.Matrix4();\r\n                /** transform from world coords to wall planes (z=0) */\r\n                this.exteriorTransform = new THREE.Matrix4();\r\n                /** transform from world coords to wall planes (z=0) */\r\n                this.invExteriorTransform = new THREE.Matrix4();\r\n                /** */\r\n                this.redrawCallbacks = $.Callbacks();\r\n\r\n                this.edgeSelectedCallbacks = $.Callbacks();\r\n                this.edgeUnSelectedCallbacks = $.Callbacks();\r\n                /**\r\n                 * this feels hacky, but need wall items\r\n                 */\r\n                this.generatePlane = function () {\r\n                    function transformCorner(corner) {\r\n                        return new THREE.Vector3(corner.x, 0, corner.y);\r\n                    }\r\n                    var v1 = transformCorner(this.interiorStart());\r\n                    var v2 = transformCorner(this.interiorEnd());\r\n                    var v3 = v2.clone();\r\n                    v3.y = this.wall.height;\r\n                    var v4 = v1.clone();\r\n                    v4.y = this.wall.height;\r\n                    var geometry = new THREE.Geometry();\r\n                    geometry.vertices = [v1, v2, v3, v4];\r\n                    geometry.faces.push(new THREE.Face3(0, 1, 2));\r\n                    geometry.faces.push(new THREE.Face3(0, 2, 3));\r\n                    geometry.computeFaceNormals();\r\n                    geometry.computeBoundingBox();\r\n                    this.plane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\r\n                    this.plane.visible = false;\r\n                    this.plane.edge = this; // js monkey patch\r\n                    this.computeTransforms(this.interiorTransform, this.invInteriorTransform, this.interiorStart(), this.interiorEnd());\r\n                    this.computeTransforms(this.exteriorTransform, this.invExteriorTransform, this.exteriorStart(), this.exteriorEnd());\r\n                };\r\n                this.front = front || false;\r\n                this.offset = wall.thickness / 2.0;\r\n                this.height = wall.height;\r\n                if (this.front) {\r\n                    this.wall.frontEdge = this;\r\n                } else {\r\n                    this.wall.backEdge = this;\r\n                }\r\n            }\r\n\r\n            HalfEdge.prototype.drawOutline = function () {\r\n                this.box = new THREE.BoxHelper(this.plane, 0xffff00);\r\n                this.edgeSelectedCallbacks.fire(this.box);\r\n            }\r\n\r\n            HalfEdge.prototype.removeOutline = function () {\r\n                this.edgeUnSelectedCallbacks.fire(this.box);\r\n            }\r\n            /**\r\n             *\r\n             */\r\n            HalfEdge.prototype.getTexture = function () {\r\n                if (this.front) {\r\n                    return this.wall.frontTexture;\r\n                } else {\r\n                    return this.wall.backTexture;\r\n                }\r\n            };\r\n            /**\r\n             *\r\n             */\r\n            HalfEdge.prototype.setTexture = function (textureUrl, textureStretch, textureScale) {\r\n                var texture = {\r\n                    url: textureUrl,\r\n                    stretch: textureStretch,\r\n                    scale: textureScale\r\n                };\r\n                if (this.front) {\r\n                    this.wall.frontTexture = texture;\r\n                } else {\r\n                    this.wall.backTexture = texture;\r\n                }\r\n                this.redrawCallbacks.fire();\r\n            };\r\n            HalfEdge.prototype.interiorDistance = function () {\r\n                var start = this.interiorStart();\r\n                var end = this.interiorEnd();\r\n                return BP3D.Core.Utils.distance(start.x, start.y, end.x, end.y);\r\n            };\r\n            HalfEdge.prototype.computeTransforms = function (transform, invTransform, start, end) {\r\n                var v1 = start;\r\n                var v2 = end;\r\n                var angle = BP3D.Core.Utils.angle(1, 0, v2.x - v1.x, v2.y - v1.y);\r\n                var tt = new THREE.Matrix4();\r\n                tt.makeTranslation(-v1.x, 0, -v1.y);\r\n                var tr = new THREE.Matrix4();\r\n                tr.makeRotationY(-angle);\r\n                transform.multiplyMatrices(tr, tt);\r\n                invTransform.getInverse(transform);\r\n            };\r\n            /** Gets the distance from specified point.\r\n             * @param x X coordinate of the point.\r\n             * @param y Y coordinate of the point.\r\n             * @returns The distance.\r\n             */\r\n            HalfEdge.prototype.distanceTo = function (x, y) {\r\n                // x, y, x1, y1, x2, y2\r\n                return BP3D.Core.Utils.pointDistanceFromLine(x, y, this.interiorStart().x, this.interiorStart().y, this.interiorEnd().x, this.interiorEnd().y);\r\n            };\r\n            HalfEdge.prototype.getStart = function () {\r\n                if (this.front) {\r\n                    return this.wall.getStart();\r\n                } else {\r\n                    return this.wall.getEnd();\r\n                }\r\n            };\r\n            HalfEdge.prototype.getEnd = function () {\r\n                if (this.front) {\r\n                    return this.wall.getEnd();\r\n                } else {\r\n                    return this.wall.getStart();\r\n                }\r\n            };\r\n            HalfEdge.prototype.getOppositeEdge = function () {\r\n                if (this.front) {\r\n                    return this.wall.backEdge;\r\n                } else {\r\n                    return this.wall.frontEdge;\r\n                }\r\n            };\r\n            // these return an object with attributes x, y\r\n            HalfEdge.prototype.interiorEnd = function () {\r\n                var vec = this.halfAngleVector(this, this.next);\r\n                return {\r\n                    x: this.getEnd().x + vec.x,\r\n                    y: this.getEnd().y + vec.y\r\n                };\r\n            };\r\n            HalfEdge.prototype.interiorStart = function () {\r\n                var vec = this.halfAngleVector(this.prev, this);\r\n                return {\r\n                    x: this.getStart().x + vec.x,\r\n                    y: this.getStart().y + vec.y\r\n                };\r\n            };\r\n            HalfEdge.prototype.interiorCenter = function () {\r\n                return {\r\n                    x: (this.interiorStart().x + this.interiorEnd().x) / 2.0,\r\n                    y: (this.interiorStart().y + this.interiorEnd().y) / 2.0,\r\n                };\r\n            };\r\n            HalfEdge.prototype.exteriorEnd = function () {\r\n                var vec = this.halfAngleVector(this, this.next);\r\n                return {\r\n                    x: this.getEnd().x - vec.x,\r\n                    y: this.getEnd().y - vec.y\r\n                };\r\n            };\r\n            HalfEdge.prototype.exteriorStart = function () {\r\n                var vec = this.halfAngleVector(this.prev, this);\r\n                return {\r\n                    x: this.getStart().x - vec.x,\r\n                    y: this.getStart().y - vec.y\r\n                };\r\n            };\r\n            /** Get the corners of the half edge.\r\n             * @returns An array of x,y pairs.\r\n             */\r\n            HalfEdge.prototype.corners = function () {\r\n                return [this.interiorStart(), this.interiorEnd(),\r\n                    this.exteriorEnd(), this.exteriorStart()\r\n                ];\r\n            };\r\n            /**\r\n             * Gets CCW angle from v1 to v2\r\n             */\r\n            HalfEdge.prototype.halfAngleVector = function (v1, v2) {\r\n                // make the best of things if we dont have prev or next\r\n                var v1startX;\r\n                var v1startY;\r\n                var v1endX;\r\n                var v1endY;\r\n\r\n                var v2startX;\r\n                var v2startY;\r\n                var v2endX;\r\n                var v2endY;\r\n                if (!v1) {\r\n                    v1startX = v2.getStart().x - (v2.getEnd().x - v2.getStart().x);\r\n                    v1startY = v2.getStart().y - (v2.getEnd().y - v2.getStart().y);\r\n                    v1endX = v2.getStart().x;\r\n                    v1endY = v2.getStart().y;\r\n                } else {\r\n                    v1startX = v1.getStart().x;\r\n                    v1startY = v1.getStart().y;\r\n                    v1endX = v1.getEnd().x;\r\n                    v1endY = v1.getEnd().y;\r\n                }\r\n                if (!v2) {\r\n                    v2startX = v1.getEnd().x;\r\n                    v2startY = v1.getEnd().y;\r\n                    v2endX = v1.getEnd().x + (v1.getEnd().x - v1.getStart().x);\r\n                    v2endY = v1.getEnd().y + (v1.getEnd().y - v1.getStart().y);\r\n                } else {\r\n                    v2startX = v2.getStart().x;\r\n                    v2startY = v2.getStart().y;\r\n                    v2endX = v2.getEnd().x;\r\n                    v2endY = v2.getEnd().y;\r\n                }\r\n                // CCW angle between edges\r\n                var theta = BP3D.Core.Utils.angle2pi(v1startX - v1endX, v1startY - v1endY, v2endX - v1endX, v2endY - v1endY);\r\n                // cosine and sine of half angle\r\n                var cs = Math.cos(theta / 2.0);\r\n                var sn = Math.sin(theta / 2.0);\r\n                // rotate v2\r\n                var v2dx = v2endX - v2startX;\r\n                var v2dy = v2endY - v2startY;\r\n                var vx = v2dx * cs - v2dy * sn;\r\n                var vy = v2dx * sn + v2dy * cs;\r\n                // normalize\r\n                var mag = BP3D.Core.Utils.distance(0, 0, vx, vy);\r\n                var desiredMag = (this.offset) / sn;\r\n                var scalar = desiredMag / mag;\r\n                var halfAngleVector = {\r\n                    x: vx * scalar,\r\n                    y: vy * scalar\r\n                };\r\n                return halfAngleVector;\r\n            };\r\n            return HalfEdge;\r\n        })();\r\n        Model.HalfEdge = HalfEdge;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /** The default wall texture. */\r\n        var defaultWallTexture = {\r\n            url: BASE_URL + ASSETS + DEFAULT_WALL_MAP,\r\n            stretch: true,\r\n            scale: 0\r\n        };\r\n        /**\r\n         * A Wall is the basic element to create Rooms.\r\n         *\r\n         * Walls consists of two half edges.\r\n         */\r\n        var Wall = (function () {\r\n            /**\r\n             * Constructs a new wall.\r\n             * @param start Start corner.\r\n             * @param end End corner.\r\n             */\r\n            function Wall(start, end) {\r\n                this.start = start;\r\n                this.end = end;\r\n                /** Front is the plane from start to end. */\r\n                this.frontEdge = null;\r\n                /** Back is the plane from end to start. */\r\n                this.backEdge = null;\r\n                /** */\r\n                this.orphan = false;\r\n                /** Items attached to this wall */\r\n                this.items = [];\r\n                /** */\r\n                this.onItems = [];\r\n                /** The front-side texture. */\r\n                this.frontTexture = defaultWallTexture;\r\n                /** The back-side texture. */\r\n                this.backTexture = defaultWallTexture;\r\n                /** Wall thickness. */\r\n                this.thickness = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallThickness);\r\n                /** Wall height. */\r\n                this.height = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight);\r\n                /** Actions to be applied after movement. */\r\n                this.moved_callbacks = $.Callbacks();\r\n                /** Actions to be applied on removal. */\r\n                this.deleted_callbacks = $.Callbacks();\r\n                /** Actions to be applied explicitly. */\r\n                this.action_callbacks = $.Callbacks();\r\n                this.id = this.getUuid();\r\n                this.start.attachStart(this);\r\n                this.end.attachEnd(this);\r\n            }\r\n            Wall.prototype.getUuid = function () {\r\n                return [this.start.id, this.end.id].join();\r\n            };\r\n            Wall.prototype.resetFrontBack = function () {\r\n                this.frontEdge = null;\r\n                this.backEdge = null;\r\n                this.orphan = false;\r\n            };\r\n            Wall.prototype.snapToAxis = function (tolerance) {\r\n                // order here is important, but unfortunately arbitrary\r\n                this.start.snapToAxis(tolerance);\r\n                this.end.snapToAxis(tolerance);\r\n            };\r\n            Wall.prototype.fireOnMove = function (func) {\r\n                this.moved_callbacks.add(func);\r\n            };\r\n            Wall.prototype.fireOnDelete = function (func) {\r\n                this.deleted_callbacks.add(func);\r\n            };\r\n            Wall.prototype.dontFireOnDelete = function (func) {\r\n                this.deleted_callbacks.remove(func);\r\n            };\r\n            Wall.prototype.fireOnAction = function (func) {\r\n                this.action_callbacks.add(func);\r\n            };\r\n            Wall.prototype.fireAction = function (action) {\r\n                this.action_callbacks.fire(action);\r\n            };\r\n            Wall.prototype.relativeMove = function (dx, dy) {\r\n                this.start.relativeMove(dx, dy);\r\n                this.end.relativeMove(dx, dy);\r\n            };\r\n            Wall.prototype.fireMoved = function () {\r\n                this.moved_callbacks.fire();\r\n            };\r\n            Wall.prototype.fireRedraw = function () {\r\n                if (this.frontEdge) {\r\n                    this.frontEdge.redrawCallbacks.fire();\r\n                }\r\n                if (this.backEdge) {\r\n                    this.backEdge.redrawCallbacks.fire();\r\n                }\r\n            };\r\n            Wall.prototype.getStart = function () {\r\n                return this.start;\r\n            };\r\n            Wall.prototype.getEnd = function () {\r\n                return this.end;\r\n            };\r\n            Wall.prototype.getStartX = function () {\r\n                return this.start.getX();\r\n            };\r\n            Wall.prototype.getEndX = function () {\r\n                return this.end.getX();\r\n            };\r\n            Wall.prototype.getStartY = function () {\r\n                return this.start.getY();\r\n            };\r\n            Wall.prototype.getEndY = function () {\r\n                return this.end.getY();\r\n            };\r\n            Wall.prototype.remove = function () {\r\n                this.start.detachWall(this);\r\n                this.end.detachWall(this);\r\n                this.deleted_callbacks.fire(this);\r\n            };\r\n            Wall.prototype.setStart = function (corner) {\r\n                this.start.detachWall(this);\r\n                corner.attachStart(this);\r\n                this.start = corner;\r\n                this.fireMoved();\r\n            };\r\n            Wall.prototype.setEnd = function (corner) {\r\n                this.end.detachWall(this);\r\n                corner.attachEnd(this);\r\n                this.end = corner;\r\n                this.fireMoved();\r\n            };\r\n            Wall.prototype.distanceFrom = function (x, y) {\r\n                return BP3D.Core.Utils.pointDistanceFromLine(x, y, this.getStartX(), this.getStartY(), this.getEndX(), this.getEndY());\r\n            };\r\n            /** Return the corner opposite of the one provided.\r\n             * @param corner The given corner.\r\n             * @returns The opposite corner.\r\n             */\r\n            Wall.prototype.oppositeCorner = function (corner) {\r\n                if (this.start === corner) {\r\n                    return this.end;\r\n                } else if (this.end === corner) {\r\n                    return this.start;\r\n                } else {\r\n                    console.log('Wall does not connect to corner');\r\n                }\r\n            };\r\n            return Wall;\r\n        })();\r\n        Model.Wall = Wall;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n/*\r\nTODO\r\nvar Vec2 = require('vec2')\r\nvar segseg = require('segseg')\r\nvar Polygon = require('polygon')\r\n*/\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /** Default texture to be used if nothing is provided. */\r\n        var defaultRoomTexture = {\r\n            url: BASE_URL + ASSETS + DEFAULT_FLOOR_MAP,\r\n            scale: 400\r\n        };\r\n        /**\r\n         * A Room is the combination of a Floorplan with a floor plane.\r\n         */\r\n        var Room = (function () {\r\n            /**\r\n             *  ordered CCW\r\n             */\r\n            function Room(floorplan, corners) {\r\n                this.floorplan = floorplan;\r\n                this.corners = corners;\r\n                /** */\r\n                this.interiorCorners = [];\r\n                /** */\r\n                this.edgePointer = null;\r\n                /** floor plane for intersection testing */\r\n                this.floorPlane = null;\r\n\r\n                this.box = null;\r\n                /** */\r\n                this.customTexture = false;\r\n                /** */\r\n                this.floorChangeCallbacks = $.Callbacks();\r\n\r\n                this.roomSelectedCallbacks = $.Callbacks();\r\n                this.roomUnSelectedCallbacks = $.Callbacks();\r\n                this.updateWalls();\r\n                this.updateInteriorCorners();\r\n                this.generatePlane();\r\n            }\r\n\r\n            Room.prototype.drawOutline = function () {\r\n                this.box = new THREE.BoxHelper(this.floorPlane, 0xffff00);\r\n                this.roomSelectedCallbacks.fire(this.box);\r\n            }\r\n\r\n            Room.prototype.removeOutline = function () {\r\n                this.roomUnSelectedCallbacks.fire(this.box);\r\n            }\r\n\r\n            Room.prototype.getUuid = function () {\r\n                var cornerUuids = BP3D.Core.Utils.map(this.corners, function (c) {\r\n                    return c.id;\r\n                });\r\n                cornerUuids.sort();\r\n                return cornerUuids.join();\r\n            };\r\n            Room.prototype.fireOnFloorChange = function (callback) {\r\n                this.floorChangeCallbacks.add(callback);\r\n            };\r\n            Room.prototype.getTexture = function () {\r\n                var uuid = this.getUuid();\r\n                var tex = this.floorplan.getFloorTexture(uuid);\r\n                return tex || defaultRoomTexture;\r\n            };\r\n            /**\r\n             * textureStretch always true, just an argument for consistency with walls\r\n             */\r\n            Room.prototype.setTexture = function (textureUrl, textureStretch, textureScale) {\r\n                var uuid = this.getUuid();\r\n                this.floorplan.setFloorTexture(uuid, textureUrl, textureScale);\r\n                this.floorChangeCallbacks.fire();\r\n            };\r\n            Room.prototype.generatePlane = function () {\r\n                var points = [];\r\n                this.interiorCorners.forEach(function (corner) {\r\n                    points.push(new THREE.Vector2(corner.x, corner.y));\r\n                });\r\n                var shape = new THREE.Shape(points);\r\n                var geometry = new THREE.ShapeGeometry(shape);\r\n                this.floorPlane = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\r\n                    side: THREE.DoubleSide\r\n                }));\r\n                this.floorPlane.visible = false;\r\n                this.floorPlane.rotation.set(Math.PI / 2, 0, 0);\r\n                this.floorPlane.room = this; // js monkey patch\r\n            };\r\n            Room.prototype.cycleIndex = function (index) {\r\n                if (index < 0) {\r\n                    return index += this.corners.length;\r\n                } else {\r\n                    return index % this.corners.length;\r\n                }\r\n            };\r\n\r\n            Room.prototype.updateInteriorCorners = function () {\r\n                var edge = this.edgePointer;\r\n                while (true) {\r\n                    this.interiorCorners.push(edge.interiorStart());\r\n                    edge.generatePlane();\r\n                    if (edge.next === this.edgePointer) {\r\n                        break;\r\n                    } else {\r\n                        edge = edge.next;\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Populates each wall's half edge relating to this room\r\n             * this creates a fancy doubly connected edge list (DCEL)\r\n             */\r\n            Room.prototype.updateWalls = function () {\r\n                var prevEdge = null;\r\n                var firstEdge = null;\r\n                for (var i = 0; i < this.corners.length; i++) {\r\n                    var firstCorner = this.corners[i];\r\n                    var secondCorner = this.corners[(i + 1) % this.corners.length];\r\n                    // find if wall is heading in that direction\r\n                    var wallTo = firstCorner.wallTo(secondCorner);\r\n                    var wallFrom = firstCorner.wallFrom(secondCorner);\r\n                    var edge;\r\n                    if (wallTo) {\r\n                        edge = new Model.HalfEdge(this, wallTo, true);\r\n                    } else if (wallFrom) {\r\n                        edge = new Model.HalfEdge(this, wallFrom, false);\r\n                    } else {\r\n                        // something horrible has happened\r\n                        console.log(\"corners arent connected by a wall, uh oh\");\r\n                    }\r\n                    if (i === 0) {\r\n                        firstEdge = edge;\r\n                    } else {\r\n                        edge.prev = prevEdge;\r\n                        prevEdge.next = edge;\r\n                        if (i + 1 === this.corners.length) {\r\n                            firstEdge.prev = edge;\r\n                            edge.next = firstEdge;\r\n                        }\r\n                    }\r\n                    prevEdge = edge;\r\n                }\r\n                // hold on to an edge reference\r\n                this.edgePointer = firstEdge;\r\n            };\r\n            return Room;\r\n        })();\r\n        Model.Room = Room;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /** */\r\n        var defaultFloorPlanTolerance = 10.0;\r\n        /**\r\n         * A Floorplan represents a number of Walls, Corners and Rooms.\r\n         */\r\n        var Floorplan = (function () {\r\n            /** Constructs a floorplan. */\r\n            function Floorplan() {\r\n                /** */\r\n                this.walls = [];\r\n                /** */\r\n                this.corners = [];\r\n                /** */\r\n                this.rooms = [];\r\n                /** */\r\n                this.new_wall_callbacks = $.Callbacks();\r\n                /** */\r\n                this.new_corner_callbacks = $.Callbacks();\r\n                /** */\r\n                this.redraw_callbacks = $.Callbacks();\r\n                /** */\r\n                this.updated_rooms = $.Callbacks();\r\n                /** */\r\n                this.roomLoadedCallbacks = $.Callbacks();\r\n                /**\r\n                 * Floor textures are owned by the floorplan, because room objects are\r\n                 * destroyed and created each time we change the floorplan.\r\n                 * floorTextures is a map of room UUIDs (string) to a object with\r\n                 * url and scale attributes.\r\n                 */\r\n                this.floorTextures = {};\r\n            }\r\n            // hack\r\n            Floorplan.prototype.wallEdges = function () {\r\n                var edges = [];\r\n                this.walls.forEach(function (wall) {\r\n                    if (wall.frontEdge) {\r\n                        edges.push(wall.frontEdge);\r\n                    }\r\n                    if (wall.backEdge) {\r\n                        edges.push(wall.backEdge);\r\n                    }\r\n                });\r\n                return edges;\r\n            };\r\n            // hack\r\n            Floorplan.prototype.wallEdgePlanes = function () {\r\n                var planes = [];\r\n                this.walls.forEach(function (wall) {\r\n                    if (wall.frontEdge) {\r\n                        planes.push(wall.frontEdge.plane);\r\n                    }\r\n                    if (wall.backEdge) {\r\n                        planes.push(wall.backEdge.plane);\r\n                    }\r\n                });\r\n                return planes;\r\n            };\r\n            Floorplan.prototype.floorPlanes = function () {\r\n                return BP3D.Core.Utils.map(this.rooms, function (room) {\r\n                    return room.floorPlane;\r\n                });\r\n            };\r\n            Floorplan.prototype.fireOnNewWall = function (callback) {\r\n                this.new_wall_callbacks.add(callback);\r\n            };\r\n            Floorplan.prototype.fireOnNewCorner = function (callback) {\r\n                this.new_corner_callbacks.add(callback);\r\n            };\r\n            Floorplan.prototype.fireOnRedraw = function (callback) {\r\n                this.redraw_callbacks.add(callback);\r\n            };\r\n            Floorplan.prototype.fireOnUpdatedRooms = function (callback) {\r\n                this.updated_rooms.add(callback);\r\n            };\r\n            /**\r\n             * Creates a new wall.\r\n             * @param start The start corner.\r\n             * @param end he end corner.\r\n             * @returns The new wall.\r\n             */\r\n            Floorplan.prototype.newWall = function (start, end) {\r\n                var wall = new Model.Wall(start, end);\r\n                this.walls.push(wall);\r\n                var scope = this;\r\n                wall.fireOnDelete(function () {\r\n                    scope.removeWall(wall);\r\n                });\r\n                this.new_wall_callbacks.fire(wall);\r\n                this.update();\r\n                return wall;\r\n            };\r\n            /** Removes a wall.\r\n             * @param wall The wall to be removed.\r\n             */\r\n            Floorplan.prototype.removeWall = function (wall) {\r\n                BP3D.Core.Utils.removeValue(this.walls, wall);\r\n                this.update();\r\n            };\r\n            /**\r\n             * Creates a new corner.\r\n             * @param x The x coordinate.\r\n             * @param y The y coordinate.\r\n             * @param id An optional id. If unspecified, the id will be created internally.\r\n             * @returns The new corner.\r\n             */\r\n            Floorplan.prototype.newCorner = function (x, y, id) {\r\n                var _this = this;\r\n                var corner = new Model.Corner(this, x, y, id);\r\n                this.corners.push(corner);\r\n                corner.fireOnDelete(function () {\r\n                    // eslint-disable-next-line no-unused-expressions\r\n                    _this.removeCorner;\r\n                });\r\n                this.new_corner_callbacks.fire(corner);\r\n                return corner;\r\n            };\r\n            /** Removes a corner.\r\n             * @param corner The corner to be removed.\r\n             */\r\n            Floorplan.prototype.removeCorner = function (corner) {\r\n                BP3D.Core.Utils.removeValue(this.corners, corner);\r\n            };\r\n            /** Gets the walls. */\r\n            Floorplan.prototype.getWalls = function () {\r\n                return this.walls;\r\n            };\r\n            /** Gets the corners. */\r\n            Floorplan.prototype.getCorners = function () {\r\n                return this.corners;\r\n            };\r\n            /** Gets the rooms. */\r\n            Floorplan.prototype.getRooms = function () {\r\n                return this.rooms;\r\n            };\r\n            Floorplan.prototype.overlappedCorner = function (x, y, tolerance) {\r\n                tolerance = tolerance || defaultFloorPlanTolerance;\r\n                for (var i = 0; i < this.corners.length; i++) {\r\n                    if (this.corners[i].distanceFrom(x, y) < tolerance) {\r\n                        return this.corners[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            Floorplan.prototype.overlappedWall = function (x, y, tolerance) {\r\n                tolerance = tolerance || defaultFloorPlanTolerance;\r\n                for (var i = 0; i < this.walls.length; i++) {\r\n                    if (this.walls[i].distanceFrom(x, y) < tolerance) {\r\n                        return this.walls[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            // import and export -- cleanup\r\n            Floorplan.prototype.saveFloorplan = function () {\r\n                var floorplan = {\r\n                    corners: {},\r\n                    walls: [],\r\n                    wallTextures: [],\r\n                    floorTextures: {},\r\n                    newFloorTextures: {}\r\n                };\r\n                this.corners.forEach(function (corner) {\r\n                    floorplan.corners[corner.id] = {\r\n                        'x': corner.x,\r\n                        'y': corner.y\r\n                    };\r\n                });\r\n                this.walls.forEach(function (wall) {\r\n                    floorplan.walls.push({\r\n                        'corner1': wall.getStart().id,\r\n                        'corner2': wall.getEnd().id,\r\n                        'frontTexture': wall.frontTexture,\r\n                        'backTexture': wall.backTexture\r\n                    });\r\n                });\r\n                floorplan.newFloorTextures = this.floorTextures;\r\n                return floorplan;\r\n            };\r\n            Floorplan.prototype.loadFloorplan = function (floorplan) {\r\n                this.reset();\r\n                var corners = {};\r\n                if (floorplan == null || !('corners' in floorplan) || !('walls' in floorplan)) {\r\n                    return;\r\n                }\r\n                for (var id in floorplan.corners) {\r\n                    var corner = floorplan.corners[id];\r\n                    corners[id] = this.newCorner(corner.x, corner.y, id);\r\n                }\r\n                var scope = this;\r\n                floorplan.walls.forEach(function (wall) {\r\n                    var newWall = scope.newWall(corners[wall.corner1], corners[wall.corner2]);\r\n                    if (wall.frontTexture) {\r\n                        newWall.frontTexture = wall.frontTexture;\r\n                    }\r\n                    if (wall.backTexture) {\r\n                        newWall.backTexture = wall.backTexture;\r\n                    }\r\n                });\r\n                if ('newFloorTextures' in floorplan) {\r\n                    this.floorTextures = floorplan.newFloorTextures;\r\n                }\r\n                this.update();\r\n                this.roomLoadedCallbacks.fire();\r\n            };\r\n            Floorplan.prototype.getFloorTexture = function (uuid) {\r\n                if (uuid in this.floorTextures) {\r\n                    return this.floorTextures[uuid];\r\n                } else {\r\n                    return null;\r\n                }\r\n            };\r\n            Floorplan.prototype.setFloorTexture = function (uuid, url, scale) {\r\n                this.floorTextures[uuid] = {\r\n                    url: url,\r\n                    scale: scale\r\n                };\r\n            };\r\n            /** clear out obsolete floor textures */\r\n            Floorplan.prototype.updateFloorTextures = function () {\r\n                var uuids = BP3D.Core.Utils.map(this.rooms, function (room) {\r\n                    return room.getUuid();\r\n                });\r\n                for (var uuid in this.floorTextures) {\r\n                    if (!BP3D.Core.Utils.hasValue(uuids, uuid)) {\r\n                        delete this.floorTextures[uuid];\r\n                    }\r\n                }\r\n            };\r\n            /** */\r\n            Floorplan.prototype.reset = function () {\r\n                var tmpCorners = this.corners.slice(0);\r\n                var tmpWalls = this.walls.slice(0);\r\n                tmpCorners.forEach(function (corner) {\r\n                    corner.remove();\r\n                });\r\n                tmpWalls.forEach(function (wall) {\r\n                    wall.remove();\r\n                });\r\n                this.corners = [];\r\n                this.walls = [];\r\n            };\r\n            /**\r\n             * Update rooms\r\n             */\r\n            Floorplan.prototype.update = function () {\r\n                this.walls.forEach(function (wall) {\r\n                    wall.resetFrontBack();\r\n                });\r\n                var roomCorners = this.findRooms(this.corners);\r\n                this.rooms = [];\r\n                var scope = this;\r\n                roomCorners.forEach(function (corners) {\r\n                    scope.rooms.push(new Model.Room(scope, corners));\r\n                });\r\n                this.assignOrphanEdges();\r\n                this.updateFloorTextures();\r\n                this.updated_rooms.fire();\r\n            };\r\n            /**\r\n             * Returns the center of the floorplan in the y plane\r\n             */\r\n            Floorplan.prototype.getCenter = function () {\r\n                return this.getDimensions(true);\r\n            };\r\n            Floorplan.prototype.getSize = function () {\r\n                return this.getDimensions(false);\r\n            };\r\n            Floorplan.prototype.getDimensions = function (center) {\r\n                center = center || false; // otherwise, get size\r\n                var xMin = Infinity;\r\n                var xMax = -Infinity;\r\n                var zMin = Infinity;\r\n                var zMax = -Infinity;\r\n                this.corners.forEach(function (corner) {\r\n                    if (corner.x < xMin)\r\n                        xMin = corner.x;\r\n                    if (corner.x > xMax)\r\n                        xMax = corner.x;\r\n                    if (corner.y < zMin)\r\n                        zMin = corner.y;\r\n                    if (corner.y > zMax)\r\n                        zMax = corner.y;\r\n                });\r\n                var ret;\r\n                if (xMin === Infinity || xMax === -Infinity || zMin === Infinity || zMax === -Infinity) {\r\n                    ret = new THREE.Vector3();\r\n                } else {\r\n                    if (center) {\r\n                        // center\r\n                        ret = new THREE.Vector3((xMin + xMax) * 0.5, 0, (zMin + zMax) * 0.5);\r\n                    } else {\r\n                        // size\r\n                        ret = new THREE.Vector3((xMax - xMin), 0, (zMax - zMin));\r\n                    }\r\n                }\r\n                return ret;\r\n            };\r\n            Floorplan.prototype.assignOrphanEdges = function () {\r\n                // kinda hacky\r\n                // find orphaned wall segments (i.e. not part of rooms) and\r\n                // give them edges\r\n                var orphanWalls = [];\r\n                this.walls.forEach(function (wall) {\r\n                    if (!wall.backEdge && !wall.frontEdge) {\r\n                        wall.orphan = true;\r\n                        var back = new Model.HalfEdge(null, wall, false);\r\n                        back.generatePlane();\r\n                        var front = new Model.HalfEdge(null, wall, true);\r\n                        front.generatePlane();\r\n                        orphanWalls.push(wall);\r\n                    }\r\n                });\r\n            };\r\n            /*\r\n             * Find the \"rooms\" in our planar straight-line graph.\r\n             * Rooms are set of the smallest (by area) possible cycles in this graph.\r\n             * @param corners The corners of the floorplan.\r\n             * @returns The rooms, each room as an array of corners.\r\n             */\r\n            Floorplan.prototype.findRooms = function (corners) {\r\n                function _calculateTheta(previousCorner, currentCorner, nextCorner) {\r\n                    var theta = BP3D.Core.Utils.angle2pi(previousCorner.x - currentCorner.x, previousCorner.y - currentCorner.y, nextCorner.x - currentCorner.x, nextCorner.y - currentCorner.y);\r\n                    return theta;\r\n                }\r\n\r\n                function _removeDuplicateRooms(roomArray) {\r\n                    var results = [];\r\n                    var lookup = {};\r\n                    var hashFunc = function (corner) {\r\n                        return corner.id;\r\n                    };\r\n                    var sep = '-';\r\n                    for (var i = 0; i < roomArray.length; i++) {\r\n                        // rooms are cycles, shift it around to check uniqueness\r\n                        var add = true;\r\n                        var room = roomArray[i];\r\n                        for (var j = 0; j < room.length; j++) {\r\n                            var roomShift = BP3D.Core.Utils.cycle(room, j);\r\n                            var str = BP3D.Core.Utils.map(roomShift, hashFunc).join(sep);\r\n                            if (lookup.hasOwnProperty(str)) {\r\n                                add = false;\r\n                            }\r\n                        }\r\n                        if (add) {\r\n                            results.push(roomArray[i]);\r\n                            lookup[str] = true;\r\n                        }\r\n                    }\r\n                    return results;\r\n                }\r\n\r\n                function _findTightestCycle(firstCorner, secondCorner) {\r\n                    var stack = [];\r\n                    var next = {\r\n                        corner: secondCorner,\r\n                        previousCorners: [firstCorner]\r\n                    };\r\n                    var visited = {};\r\n                    visited[firstCorner.id] = true;\r\n                    var compFunc = function (a, b) {\r\n                        return (_calculateTheta(previousCorner, currentCorner, b) -\r\n                            _calculateTheta(previousCorner, currentCorner, a));\r\n                    }\r\n                    var pushFunc = function (corner) {\r\n                        stack.push({\r\n                            corner: corner,\r\n                            previousCorners: previousCorners\r\n                        });\r\n                    }\r\n\r\n                    while (next) {\r\n                        // update previous corners, current corner, and visited corners\r\n                        var currentCorner = next.corner;\r\n                        visited[currentCorner.id] = true;\r\n                        // did we make it back to the startCorner?\r\n                        if (next.corner === firstCorner && currentCorner !== secondCorner) {\r\n                            return next.previousCorners;\r\n                        }\r\n                        var addToStack = [];\r\n                        var adjacentCorners = next.corner.adjacentCorners();\r\n                        for (let i = 0; i < adjacentCorners.length; i++) {\r\n                            var nextCorner = adjacentCorners[i];\r\n                            // is this where we came from?\r\n                            // give an exception if its the first corner and we aren't at the second corner\r\n                            if (nextCorner.id in visited &&\r\n                                !(nextCorner === firstCorner && currentCorner !== secondCorner)) {\r\n                                continue;\r\n                            }\r\n                            // nope, throw it on the queue  \r\n                            addToStack.push(nextCorner);\r\n                        }\r\n                        var previousCorners = next.previousCorners.slice(0);\r\n                        previousCorners.push(currentCorner);\r\n\r\n                        if (addToStack.length > 1) {\r\n                            // visit the ones with smallest theta first\r\n                            var previousCorner = next.previousCorners[next.previousCorners.length - 1];\r\n                            addToStack.sort(compFunc);\r\n                        }\r\n                        if (addToStack.length > 0) {\r\n                            // add to the stack\r\n                            addToStack.forEach(pushFunc);\r\n                        }\r\n                        // pop off the next one\r\n                        next = stack.pop();\r\n                    }\r\n                    return [];\r\n                }\r\n                // find tightest loops, for each corner, for each adjacent\r\n                // TODO: optimize this, only check corners with > 2 adjacents, or isolated cycles\r\n                var loops = [];\r\n                corners.forEach(function (firstCorner) {\r\n                    firstCorner.adjacentCorners().forEach(function (secondCorner) {\r\n                        loops.push(_findTightestCycle(firstCorner, secondCorner));\r\n                    });\r\n                });\r\n                // remove duplicates\r\n                var uniqueLoops = _removeDuplicateRooms(loops);\r\n                //remove CW loops\r\n                var uniqueCCWLoops = BP3D.Core.Utils.removeIf(uniqueLoops, BP3D.Core.Utils.isClockwise);\r\n                return uniqueCCWLoops;\r\n            };\r\n            return Floorplan;\r\n        })();\r\n        Model.Floorplan = Floorplan;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /**\r\n         * A Floor Item is an entity to be placed related to a floor.\r\n         */\r\n        var FloorItem = (function (_super) {\r\n            __extends(FloorItem, _super);\r\n\r\n            function FloorItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n            };\r\n            /** */\r\n            FloorItem.prototype.placeInRoom = function () {\r\n                if (!this.position_set) {\r\n                    var center = this.model.floorplan.getCenter();\r\n                    this.position.x = center.x;\r\n                    this.position.z = center.z;\r\n                    this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\r\n                }\r\n            };\r\n\r\n            FloorItem.prototype.setYPos = function (yPos) {\r\n\r\n            }\r\n            /** Take action after a resize */\r\n            FloorItem.prototype.resized = function () {\r\n                this.position.y = this.halfSize.y;\r\n            };\r\n            /** */\r\n            FloorItem.prototype.moveToPosition = function (vec3, intersection) {\r\n                // keeps the position in the room and on the floor\r\n                if (!this.isValidPosition(vec3)) {\r\n                    this.showError(vec3);\r\n                    return;\r\n                } else {\r\n                    this.hideError();\r\n                    vec3.y = this.position.y; // keep it on the floor!\r\n                    this.position.copy(vec3);\r\n                }\r\n            };\r\n            /** */\r\n            FloorItem.prototype.isValidPosition = function (vec3) {\r\n                var corners = this.getCorners('x', 'z', vec3);\r\n                // check if we are in a room\r\n                var rooms = this.model.floorplan.getRooms();\r\n                var isInARoom = false;\r\n                for (let i = 0; i < rooms.length; i++) {\r\n                    if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) &&\r\n                        !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\r\n                        isInARoom = true;\r\n                    }\r\n                }\r\n                if (!isInARoom) {\r\n                    //console.log('object not in a room');\r\n                    return false;\r\n                }\r\n\r\n                // check if we are outside all other objects\r\n                if (this.obstructFloorMoves) {\r\n                    let objects = this.model.scene.getItems();\r\n                    for (let i = 0; i < objects.length; i++) {\r\n                        if (objects[i] === this || !objects[i].obstructFloorMoves) {\r\n                            continue;\r\n                        }\r\n                        if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) ||\r\n                            BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\r\n                            //console.log('object not outside other objects');\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // check if we are outside all other on floor objects\r\n                if (this.obstructOnFloorMoves) {\r\n                    let objects = this.model.scene.getItems();\r\n                    for (let i = 0; i < objects.length; i++) {\r\n                        if (objects[i] === this || !objects[i].obstructOnFloorMoves) {\r\n                            continue;\r\n                        }\r\n                        if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) ||\r\n                            BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\r\n                            //console.log('object not outside other objects');\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n            return FloorItem;\r\n        })(Items.Item);\r\n        Items.FloorItem = FloorItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /**\r\n         * AnyWhere Item\r\n         */\r\n        var AnywhereItem = (function (_super) {\r\n            __extends(AnywhereItem, _super);\r\n\r\n            function AnywhereItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n            };\r\n            /** */\r\n            AnywhereItem.prototype.placeInRoom = function (pos) {\r\n                if (!this.position_set) {\r\n                    var center = this.model.floorplan.getCenter();\r\n                    this.position.x = center.x;\r\n                    this.position.z = center.z;\r\n                    if (pos !== null && pos !== undefined) {\r\n                        this.position.y = pos.y;\r\n                    } else {\r\n                        this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\r\n                    }\r\n                }\r\n            };\r\n\r\n            AnywhereItem.prototype.setYPos = function (yPos) {\r\n                this.position.y = yPos;\r\n            }\r\n\r\n            /** */\r\n            AnywhereItem.prototype.isElevationAdjustable = function () {\r\n                return true;\r\n            };\r\n\r\n            AnywhereItem.prototype.moveToPosition = function (vec3, intersection) {\r\n                // keeps the position in the room\r\n                if (!this.isValidPosition(vec3)) {\r\n                    this.showError(vec3);\r\n                    return;\r\n                } else {\r\n                    let yPos = this.getYPos(vec3);\r\n                    vec3.y = yPos;\r\n                    $(\"#item-elevation\").val(this.cmToIn(this.getElevation()).toFixed(0));\r\n                    this.hideError();\r\n                    this.position.copy(vec3);\r\n                }\r\n            };\r\n\r\n            AnywhereItem.prototype.cmToIn = function (cm) {\r\n                return cm / 2.54;\r\n            }\r\n\r\n            /** */\r\n            AnywhereItem.prototype.isValidPosition = function (vec3) {\r\n                var corners = this.getCorners('x', 'z', vec3);\r\n                // check if we are in a room\r\n                var rooms = this.model.floorplan.getRooms();\r\n                var isInARoom = false;\r\n                for (let i = 0; i < rooms.length; i++) {\r\n                    if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) &&\r\n                        !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\r\n                        isInARoom = true;\r\n                    }\r\n                }\r\n                if (!isInARoom) {\r\n                    //console.log('object not in a room');\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            };\r\n\r\n            AnywhereItem.prototype.getYPos = function (vec3) {\r\n                var corners = this.getCorners('x', 'z', vec3);\r\n                // check if we are outside all other objects\r\n\r\n                let objects = this.model.scene.getItems();\r\n                for (let i = 0; i < objects.length; i++) {\r\n                    if (objects[i] === this || objects[i].obstructCeilingMoves || objects[i].obstructOnFloorMoves) {\r\n                        continue;\r\n                    }\r\n                    if (\r\n                        BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\r\n                        // console.log('object not outside other objects');\r\n                        return objects[i].position.y + objects[i].halfSize.y + this.halfSize.y;\r\n                    }\r\n                    if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z'))) {\r\n                        return this.position.y;\r\n                    }\r\n                }\r\n\r\n\r\n                return 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\r\n            }\r\n\r\n            return AnywhereItem;\r\n        })(Items.FloorItem);\r\n        Items.AnywhereItem = AnywhereItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /**\r\n         * AnyWhere Item\r\n         */\r\n        var CeilingItem = (function (_super) {\r\n            __extends(CeilingItem, _super);\r\n\r\n            function CeilingItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                this.obstructCeilingMoves = true;\r\n                this.obstructFloorMoves = false;\r\n                this.castShadow = false;\r\n                this.receiveShadow = false;\r\n            };\r\n            /** */\r\n            CeilingItem.prototype.placeInRoom = function () {\r\n                if (!this.position_set) {\r\n                    var center = this.model.floorplan.getCenter();\r\n                    this.position.x = center.x;\r\n                    this.position.z = center.z;\r\n                    this.position.y = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y);\r\n                }\r\n            };\r\n\r\n            CeilingItem.prototype.setYPos = function (yPos) {\r\n\r\n            }\r\n\r\n            CeilingItem.prototype.resized = function () {\r\n                this.position.y = BP3D.Core.Configuration.getNumericValue(BP3D.Core.configWallHeight) - this.halfSize.y;\r\n            };\r\n\r\n            CeilingItem.prototype.moveToPosition = function (vec3, intersection) {\r\n                // keeps the position in the room\r\n                if (!this.isValidPosition(vec3)) {\r\n                    this.showError(vec3);\r\n                    return;\r\n                } else {\r\n                    this.hideError();\r\n                    // if (vec3.y < 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y)) {\r\n                    //     vec3.y = this.position.y;\r\n                    // } else {\r\n                    vec3.y = this.position.y;\r\n                    // }\r\n                    this.position.copy(vec3);\r\n                }\r\n            };\r\n            /** */\r\n            CeilingItem.prototype.isValidPosition = function (vec3) {\r\n                var corners = this.getCorners('x', 'z', vec3);\r\n                // check if we are in a room\r\n                var rooms = this.model.floorplan.getRooms();\r\n                var isInARoom = false;\r\n                for (let i = 0; i < rooms.length; i++) {\r\n                    if (BP3D.Core.Utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) &&\r\n                        !BP3D.Core.Utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {\r\n                        isInARoom = true;\r\n                    }\r\n                }\r\n                if (!isInARoom) {\r\n                    //console.log('object not in a room');\r\n                    return false;\r\n                }\r\n\r\n                // check if we are outside all other on floor objects\r\n                if (this.obstructCeilingMoves) {\r\n                    let objects = this.model.scene.getItems();\r\n                    for (let i = 0; i < objects.length; i++) {\r\n                        if (objects[i] === this || !objects[i].obstructCeilingMoves) {\r\n                            continue;\r\n                        }\r\n                        if (!BP3D.Core.Utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) ||\r\n                            BP3D.Core.Utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {\r\n                            //console.log('object not outside other objects');\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            };\r\n            return CeilingItem;\r\n        })(Items.FloorItem);\r\n        Items.CeilingItem = CeilingItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /**\r\n         * A Wall Item is an entity to be placed related to a wall.\r\n         */\r\n        var WallItem = (function (_super) {\r\n            __extends(WallItem, _super);\r\n\r\n            function WallItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                /** The currently applied wall edge. */\r\n                this.currentWallEdge = null;\r\n                /* TODO:\r\n                   This caused a huge headache.\r\n                   HalfEdges get destroyed/created every time floorplan is edited.\r\n                   This item should store a reference to a wall and front/back,\r\n                   and grab its edge reference dynamically whenever it needs it.\r\n                 */\r\n                /** used for finding rotations */\r\n                this.refVec = new THREE.Vector2(0, 1.0);\r\n                /** */\r\n                this.wallOffsetScalar = 0;\r\n                /** */\r\n                this.sizeX = 0;\r\n                /** */\r\n                this.sizeY = 0;\r\n                /** */\r\n                this.addToWall = false;\r\n                /** */\r\n                this.boundToFloor = false;\r\n\r\n                this.obstructInWallMoves = false;\r\n                /** */\r\n                this.frontVisible = false;\r\n                /** */\r\n                this.backVisible = false;\r\n                this.allowRotate = false;\r\n            };\r\n            /** Get the closet wall edge.\r\n             * @returns The wall edge.\r\n             */\r\n            WallItem.prototype.closestWallEdge = function () {\r\n                var wallEdges = this.model.floorplan.wallEdges();\r\n                var wallEdge = null;\r\n                var minDistance = null;\r\n                var itemX = this.position.x;\r\n                var itemZ = this.position.z;\r\n                wallEdges.forEach(function (edge) {\r\n                    var distance = edge.distanceTo(itemX, itemZ);\r\n                    if (minDistance === null || distance < minDistance) {\r\n                        minDistance = distance;\r\n                        wallEdge = edge;\r\n                    }\r\n                });\r\n                return wallEdge;\r\n            };\r\n            /** */\r\n            WallItem.prototype.removed = function () {\r\n                if (this.currentWallEdge != null && this.addToWall) {\r\n                    BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.items, this);\r\n                    this.redrawWall();\r\n                }\r\n            };\r\n            /** */\r\n            WallItem.prototype.redrawWall = function () {\r\n                if (this.addToWall) {\r\n                    this.currentWallEdge.wall.fireRedraw();\r\n                }\r\n            };\r\n            /** */\r\n            WallItem.prototype.updateEdgeVisibility = function (visible, front) {\r\n                if (front) {\r\n                    this.frontVisible = visible;\r\n                } else {\r\n                    this.backVisible = visible;\r\n                }\r\n\r\n                this.visible = (this.frontVisible || this.backVisible);\r\n            };\r\n            /** */\r\n            WallItem.prototype.updateSize = function () {\r\n                this.wallOffsetScalar = (this.geometry.boundingBox.max.z - this.geometry.boundingBox.min.z) * this.scale.z / 2.0;\r\n                this.sizeX = (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x) * this.scale.x;\r\n                this.sizeY = (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y;\r\n            };\r\n            /** */\r\n            WallItem.prototype.resized = function () {\r\n                if (this.boundToFloor) {\r\n                    this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y + 0.01;\r\n                }\r\n                this.updateSize();\r\n                this.redrawWall();\r\n            };\r\n            /** */\r\n            WallItem.prototype.placeInRoom = function () {\r\n                var closestWallEdge = this.closestWallEdge();\r\n                this.changeWallEdge(closestWallEdge);\r\n                this.updateSize();\r\n                if (!this.position_set) {\r\n                    // position not set\r\n                    var center = closestWallEdge.interiorCenter();\r\n                    var newPos = new THREE.Vector3(center.x, closestWallEdge.wall.height / 2.0, center.y);\r\n                    this.boundMove(newPos);\r\n                    this.position.copy(newPos);\r\n                    this.redrawWall();\r\n                }\r\n            };\r\n\r\n            WallItem.prototype.setYPos = function (yPos) {\r\n\r\n            }\r\n            /** */\r\n            WallItem.prototype.moveToPosition = function (vec3, intersection) {\r\n                this.changeWallEdge(intersection.object.edge);\r\n                this.boundMove(vec3);\r\n                this.position.copy(vec3);\r\n                this.redrawWall();\r\n            };\r\n\r\n\r\n\r\n            /** */\r\n            WallItem.prototype.getWallOffset = function () {\r\n                return this.wallOffsetScalar;\r\n            };\r\n            /** */\r\n            WallItem.prototype.changeWallEdge = function (wallEdge) {\r\n                if (this.currentWallEdge != null) {\r\n                    if (this.addToWall) {\r\n                        BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.items, this);\r\n                        this.redrawWall();\r\n                    } else {\r\n                        BP3D.Core.Utils.removeValue(this.currentWallEdge.wall.onItems, this);\r\n                    }\r\n                }\r\n                // handle subscription to wall being removed\r\n                if (this.currentWallEdge != null) {\r\n                    this.currentWallEdge.wall.dontFireOnDelete(this.remove.bind(this));\r\n                }\r\n                wallEdge.wall.fireOnDelete(this.remove.bind(this));\r\n                // find angle between wall normals\r\n                var normal2 = new THREE.Vector2();\r\n                var normal3 = wallEdge.plane.geometry.faces[0].normal;\r\n                normal2.x = normal3.x;\r\n                normal2.y = normal3.z;\r\n                var angle = BP3D.Core.Utils.angle(this.refVec.x, this.refVec.y, normal2.x, normal2.y);\r\n                this.rotation.y = angle;\r\n                // update currentWall\r\n                this.currentWallEdge = wallEdge;\r\n                if (this.addToWall) {\r\n                    wallEdge.wall.items.push(this);\r\n                    this.redrawWall();\r\n                } else {\r\n                    wallEdge.wall.onItems.push(this);\r\n                }\r\n            };\r\n            /** Returns an array of planes to use other than the ground plane\r\n             * for passing intersection to clickPressed and clickDragged */\r\n            WallItem.prototype.customIntersectionPlanes = function () {\r\n                return this.model.floorplan.wallEdgePlanes();\r\n            };\r\n            /** takes the move vec3, and makes sure object stays bounded on plane */\r\n            WallItem.prototype.boundMove = function (vec3) {\r\n                var tolerance = 1;\r\n                var edge = this.currentWallEdge;\r\n                vec3.applyMatrix4(edge.interiorTransform);\r\n                if (vec3.x < this.sizeX / 2.0 + tolerance) {\r\n                    vec3.x = this.sizeX / 2.0 + tolerance;\r\n                } else if (vec3.x > (edge.interiorDistance() - this.sizeX / 2.0 - tolerance)) {\r\n                    vec3.x = edge.interiorDistance() - this.sizeX / 2.0 - tolerance;\r\n                }\r\n                if (this.boundToFloor) {\r\n                    vec3.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y + 0.01;\r\n                } else {\r\n                    if (vec3.y < this.sizeY / 2.0 + tolerance) {\r\n                        vec3.y = this.sizeY / 2.0 + tolerance;\r\n                    } else if (vec3.y > edge.height - this.sizeY / 2.0 - tolerance) {\r\n                        vec3.y = edge.height - this.sizeY / 2.0 - tolerance;\r\n                    }\r\n                }\r\n                vec3.z = this.getWallOffset();\r\n                vec3.applyMatrix4(edge.invInteriorTransform);\r\n            };\r\n\r\n            //obstruct\r\n            return WallItem;\r\n        })(Items.Item);\r\n        Items.WallItem = WallItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /** */\r\n        var InWallItem = (function (_super) {\r\n            __extends(InWallItem, _super);\r\n\r\n            function InWallItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                this.addToWall = true;\r\n                this.obstructInWallMoves = true;\r\n            };\r\n\r\n            /** */\r\n            InWallItem.prototype.moveToPosition = function (vec3, intersection) {\r\n                if (this.isValidPosition(vec3)) {\r\n                    this.changeWallEdge(intersection.object.edge);\r\n                    this.boundMove(vec3);\r\n                    this.position.copy(vec3);\r\n                    this.redrawWall();\r\n                } else {\r\n                    return;\r\n                }\r\n            };\r\n\r\n            /** */\r\n            InWallItem.prototype.getWallOffset = function () {\r\n                // fudge factor so it saves to the right wall\r\n                return -this.currentWallEdge.offset + 0.5;\r\n            };\r\n\r\n            InWallItem.prototype.isValidPosition = function (vec3) {\r\n                var cornersXZ = this.getCornersXZBIG('x', 'z', vec3);\r\n\r\n                var objects = this.model.scene.getItems();\r\n                for (let i = 0; i < objects.length; i++) {\r\n                    if (objects[i] === this || !objects[i].obstructInWallMoves) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersXZ, objects[i].getCornersXZ('x', 'z')) ||\r\n                        !BP3D.Core.Utils.polygonOutsidePolygon(objects[i].getCornersXZ('x', 'z'), cornersXZ) ||\r\n                        BP3D.Core.Utils.polygonPolygonIntersect(cornersXZ, objects[i].getCornersXZ('x', 'z'))) {\r\n                        // console.log('object not outside other objects  XY');\r\n                        return false;\r\n                    }\r\n\r\n\r\n                    // if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersXZ, objects[i].getCorners('x', 'z')) ||\r\n                    //     BP3D.Core.Utils.polygonPolygonIntersect(cornersXZ, objects[i].getCorners('x', 'z'))) {\r\n                    //     console.log('object not outside other objects  XZ');\r\n                    //     return false;\r\n                    // }\r\n                    // if (!BP3D.Core.Utils.polygonOutsidePolygon(cornersYZ, objects[i].getCornersYZ('y', 'z')) ||\r\n                    //     BP3D.Core.Utils.polygonPolygonIntersect(cornersYZ, objects[i].getCornersYZ('y', 'z'))) {\r\n                    //     console.log('object not outside other objects YZ');\r\n                    //     return false;\r\n                    // }\r\n\r\n                }\r\n\r\n                return true;\r\n            };\r\n            return InWallItem;\r\n        })(Items.WallItem);\r\n        Items.InWallItem = InWallItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /** */\r\n        var InWallFloorItem = (function (_super) {\r\n            __extends(InWallFloorItem, _super);\r\n\r\n            function InWallFloorItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                this.boundToFloor = true;\r\n                this.obstructInWallMoves = true;\r\n                this.obstructFloorMoves = true;\r\n                this.addToWall = true;\r\n            };\r\n            return InWallFloorItem;\r\n        })(Items.InWallItem);\r\n        Items.InWallFloorItem = InWallFloorItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /** */\r\n        var OnFloorItem = (function (_super) {\r\n            __extends(OnFloorItem, _super);\r\n\r\n            function OnFloorItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                this.obstructFloorMoves = false;\r\n                this.receiveShadow = true;\r\n                this.obstructOnFloorMoves = true;\r\n            };\r\n            return OnFloorItem;\r\n        })(Items.FloorItem);\r\n        Items.OnFloorItem = OnFloorItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /** */\r\n        var WallFloorItem = (function (_super) {\r\n            __extends(WallFloorItem, _super);\r\n\r\n            function WallFloorItem(model, metadata, geometry, material, position, rotation, scale) {\r\n                _super.call(this, model, metadata, geometry, material, position, rotation, scale);\r\n                this.boundToFloor = true;\r\n            };\r\n            return WallFloorItem;\r\n        })(Items.WallItem);\r\n        Items.WallFloorItem = WallFloorItem;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Items;\r\n    (function (Items) {\r\n        /** Enumeration of item types. */\r\n        var item_types = {\r\n            1: Items.FloorItem,\r\n            2: Items.WallItem,\r\n            3: Items.InWallItem,\r\n            7: Items.InWallFloorItem,\r\n            8: Items.OnFloorItem,\r\n            9: Items.WallFloorItem,\r\n            10: Items.AnywhereItem,\r\n            11: Items.CeilingItem,\r\n        };\r\n        /** Factory class to create items. */\r\n        var Factory = (function () {\r\n            function Factory() {}\r\n            /** Gets the class for the specified item. */\r\n            Factory.getClass = function (itemType) {\r\n                return item_types[itemType];\r\n            };\r\n            return Factory;\r\n        })();\r\n        Items.Factory = Factory;\r\n    })(Items = BP3D.Items || (BP3D.Items = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model) {\r\n        /**\r\n         * The Scene is a manager of Items and also links to a ThreeJS scene.\r\n         */\r\n        var Scene = (function () {\r\n            /**\r\n             * Constructs a scene.\r\n             * @param model The associated model.\r\n             * @param textureDir The directory from which to load the textures.\r\n             */\r\n            function Scene(model, textureDir) {\r\n                this.model = model;\r\n                this.textureDir = textureDir;\r\n                /** */\r\n                this.items = [];\r\n                /** */\r\n                this.needsUpdate = false;\r\n                /** */\r\n                this.itemLoadingCallbacks = $.Callbacks();\r\n                /** Item */\r\n                this.itemLoadedCallbacks = $.Callbacks();\r\n                /** Item */\r\n                this.itemRemovedCallbacks = $.Callbacks();\r\n                this.scene = new THREE.Scene();\r\n                // init item loader\r\n                this.loader = new GLTFLoader();\r\n                // this.loader.crossOrigin = \"\";\r\n                // this.loader.setCrossOrigin('use-credentials');\r\n            }\r\n            /** Adds a non-item, basically a mesh, to the scene.\r\n             * @param mesh The mesh to be added.\r\n             */\r\n            Scene.prototype.add = function (mesh) {\r\n                this.scene.add(mesh);\r\n            };\r\n            /** Removes a non-item, basically a mesh, from the scene.\r\n             * @param mesh The mesh to be removed.\r\n             */\r\n            Scene.prototype.remove = function (mesh) {\r\n                this.scene.remove(mesh);\r\n                BP3D.Core.Utils.removeValue(this.items, mesh);\r\n            };\r\n            /** Gets the scene.\r\n             * @returns The scene.\r\n             */\r\n            Scene.prototype.getScene = function () {\r\n                return this.scene;\r\n            };\r\n            /** Gets the items.\r\n             * @returns The items.\r\n             */\r\n            Scene.prototype.getItems = function () {\r\n                return this.items;\r\n            };\r\n            /** Gets the count of items.\r\n             * @returns The count.\r\n             */\r\n            Scene.prototype.itemCount = function () {\r\n                return this.items.length;\r\n            };\r\n            /** Removes all items. */\r\n            Scene.prototype.clearItems = function () {\r\n                // var items_copy = this.items;\r\n                var scope = this;\r\n                this.items.forEach(function (item) {\r\n                    scope.removeItem(item, true);\r\n                });\r\n                this.items = [];\r\n            };\r\n            /**\r\n             * Removes an item.\r\n             * @param item The item to be removed.\r\n             * @param dontRemove If not set, also remove the item from the items list.\r\n             */\r\n            Scene.prototype.removeItem = function (item, dontRemove) {\r\n                dontRemove = dontRemove || false;\r\n                // use this for item meshes\r\n                this.itemRemovedCallbacks.fire(item);\r\n                item.removed();\r\n                this.scene.remove(item);\r\n                if (!dontRemove) {\r\n                    BP3D.Core.Utils.removeValue(this.items, item);\r\n                }\r\n            };\r\n            /**\r\n             * Creates an item and adds it to the scene.\r\n             * @param itemType The type of the item given by an enumerator.\r\n             * @param fileName The name of the file to load.\r\n             * @param metadata TODO\r\n             * @param position The initial position.\r\n             * @param rotation The initial rotation around the y axis.\r\n             * @param scale The initial scaling.\r\n             * @param fixed True if fixed.\r\n             */\r\n            Scene.prototype.addItem = function (itemType, fileName, metadata, position, rotation, scale, fixed) {\r\n                itemType = itemType || 1;\r\n                var scope = this;\r\n\r\n                var loaderCallback = function (geometry, materials) {\r\n                    var item = new(BP3D.Items.Factory.getClass(itemType))(scope.model, metadata, geometry, materials, position, rotation, scale);\r\n                    item.fixed = fixed || false;\r\n                    scope.items.push(item);\r\n                    scope.add(item);\r\n                    item.initObject(position);\r\n                    if (position !== null && position !== undefined) {\r\n                        item.setYPos(position.y)\r\n                    }\r\n                    scope.itemLoadedCallbacks.fire(item);\r\n                    THREE.Cache.add(fileName, {\r\n                        geometry: geometry,\r\n                        materials: materials\r\n                    });\r\n\r\n                };\r\n\r\n                function addToMaterials(materials, newmaterial) {\r\n                    for (var i = 0; i < materials.length; i++) {\r\n                        var mat = materials[i];\r\n                        if (mat.name === newmaterial.name) {\r\n                            return [materials, i];\r\n                        }\r\n                    }\r\n                    materials.push(newmaterial);\r\n                    return [materials, materials.length - 1];\r\n                }\r\n                var gltfCallback = function (gltfModel) {\r\n                    // console.log(gltfModel)\r\n                    var newmaterials = [];\r\n                    var newGeometry = new THREE.Geometry();\r\n                    gltfModel.scene.traverse(function (child) {\r\n                        if (child.isMesh) {\r\n                            var materialindices = [];\r\n                            if (child.material.length) {\r\n                                for (var k = 0; k < child.material.length; k++) {\r\n                                    var newItems = addToMaterials(newmaterials, child.material[k]);\r\n                                    newmaterials = newItems[0];\r\n                                    materialindices.push(newItems[1]);\r\n                                }\r\n                            } else {\r\n                                newItems = addToMaterials(newmaterials, child.material); //materials.push(child.material);\r\n                                newmaterials = newItems[0];\r\n                                materialindices.push(newItems[1]);\r\n                            }\r\n\r\n                            if (child.geometry.isBufferGeometry) {\r\n                                var tGeometry = new THREE.Geometry().fromBufferGeometry(child.geometry);\r\n                                tGeometry.faces.forEach((face) => {\r\n                                    face.materialIndex = materialindices[face.materialIndex];\r\n                                });\r\n                                child.updateMatrix();\r\n                                newGeometry.merge(tGeometry, child.matrix);\r\n                            } else {\r\n                                child.geometry.faces.forEach((face) => {\r\n                                    face.materialIndex = materialindices[face.materialIndex];\r\n                                });\r\n                                child.updateMatrix();\r\n                                newGeometry.mergeMesh(child);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    loaderCallback(newGeometry, newmaterials);\r\n\r\n                    // loaderCallback(gltfModel.scene, newmaterials, true);\r\n                };\r\n                this.itemLoadingCallbacks.fire();\r\n                if (THREE.Cache.get(fileName) === undefined) {\r\n                    try {\r\n                        this.loader.load(fileName, gltfCallback, null, null); // TODO_Ekki\r\n                    } catch (e) {\r\n                        console.log(e);\r\n                        this.itemLoadedCallbacks.fire();\r\n                    }\r\n\r\n                } else {\r\n                    loaderCallback(THREE.Cache.get(fileName).geometry, THREE.Cache.get(fileName).materials);\r\n                }\r\n                // this.loader.load(fileName, gltfCallback, null, null);\r\n            };\r\n            return Scene;\r\n        })();\r\n        Model.Scene = Scene;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Model;\r\n    (function (Model_1) {\r\n        /**\r\n         * A Model connects a Floorplan and a Scene.\r\n         */\r\n        var Model = (function () {\r\n            /** Constructs a new model.\r\n             * @param textureDir The directory containing the textures.\r\n             */\r\n            function Model(textureDir) {\r\n                /** */\r\n                this.roomLoadingCallbacks = $.Callbacks();\r\n                /** */\r\n                this.roomLoadedCallbacks = $.Callbacks();\r\n                /** name */\r\n                this.roomSavedCallbacks = $.Callbacks();\r\n                /** success (bool), copy (bool) */\r\n                this.roomDeletedCallbacks = $.Callbacks();\r\n                this.floorplan = new Model_1.Floorplan();\r\n                this.scene = new Model_1.Scene(this, textureDir);\r\n            }\r\n            Model.prototype.loadSerialized = function (json) {\r\n                // TODO: better documentation on serialization format.\r\n                // TODO: a much better serialization format.\r\n                this.roomLoadingCallbacks.fire();\r\n                var data = JSON.parse(json);\r\n                this.newRoom(data.floorplan, data.items);\r\n                this.roomLoadedCallbacks.fire();\r\n            };\r\n            Model.prototype.exportSerialized = function () {\r\n                var items_arr = [];\r\n                var objects = this.scene.getItems();\r\n                for (var i = 0; i < objects.length; i++) {\r\n                    var object = objects[i];\r\n                    items_arr[i] = {\r\n                        item_name: object.metadata.itemName,\r\n                        item_type: object.metadata.itemType,\r\n                        model_url: object.metadata.modelUrl,\r\n                        xpos: object.position.x,\r\n                        ypos: object.position.y,\r\n                        zpos: object.position.z,\r\n                        rotation: object.rotation.y,\r\n                        scale_x: object.scale.x,\r\n                        scale_y: object.scale.y,\r\n                        scale_z: object.scale.z,\r\n                        fixed: object.fixed\r\n                    };\r\n                }\r\n                var room = {\r\n                    floorplan: (this.floorplan.saveFloorplan()),\r\n                    items: items_arr\r\n                };\r\n                return JSON.stringify(room);\r\n            };\r\n            Model.prototype.newRoom = function (floorplan, items) {\r\n                var _this = this;\r\n                this.scene.clearItems();\r\n                this.floorplan.loadFloorplan(floorplan);\r\n                items.forEach(function (item) {\r\n                    var position = new THREE.Vector3(item.xpos, item.ypos, item.zpos);\r\n                    var metadata = {\r\n                        itemName: item.item_name,\r\n                        resizable: item.resizable,\r\n                        itemType: item.item_type,\r\n                        modelUrl: item.model_url\r\n                    };\r\n                    var scale = new THREE.Vector3(item.scale_x, item.scale_y, item.scale_z);\r\n                    _this.scene.addItem(item.item_type, item.model_url, metadata, position, item.rotation, scale, item.fixed);\r\n                });\r\n            };\r\n            return Model;\r\n        })();\r\n        Model_1.Model = Model;\r\n    })(Model = BP3D.Model || (BP3D.Model = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Floorplanner;\r\n    (function (Floorplanner) {\r\n        /** */\r\n        Floorplanner.floorplannerModes = {\r\n            MOVE: 0,\r\n            DRAW: 1,\r\n            DELETE: 2\r\n        };\r\n        // grid parameters\r\n        var gridSpacing = 20; // pixels\r\n        var gridWidth = 1;\r\n        var gridColor = \"#f1f1f1\";\r\n        // room config\r\n        var roomColor = \"#f9f9f9\";\r\n        // wall config\r\n        var wallWidth = 5;\r\n        var wallWidthHover = 7;\r\n        var wallColor = \"#dddddd\";\r\n        var wallColorHover = \"#008cba\";\r\n        var edgeColor = \"#888888\";\r\n        var edgeColorHover = \"#008cba\";\r\n        var edgeWidth = 1;\r\n        var deleteColor = \"#ff0000\";\r\n        // corner config\r\n        var cornerRadius = 0;\r\n        var cornerRadiusHover = 7;\r\n        var cornerColor = \"#cccccc\";\r\n        var cornerColorHover = \"#008cba\";\r\n        /**\r\n         * The View to be used by a Floorplanner to render in/interact with.\r\n         */\r\n        var FloorplannerView = (function () {\r\n            /** */\r\n            function FloorplannerView(floorplan, viewmodel, canvas) {\r\n                this.floorplan = floorplan;\r\n                this.viewmodel = viewmodel;\r\n                this.canvas = canvas;\r\n                this.canvasElement = document.getElementById(canvas);\r\n                this.context = this.canvasElement.getContext('2d');\r\n                var scope = this;\r\n                $(window).resize(function () {\r\n                    scope.handleWindowResize();\r\n                });\r\n                this.handleWindowResize();\r\n            }\r\n            /** */\r\n            FloorplannerView.prototype.handleWindowResize = function () {\r\n                var canvasSel = $(\"#\" + this.canvas);\r\n                var parent = canvasSel.parent();\r\n                canvasSel.height(parent.innerHeight());\r\n                canvasSel.width(parent.innerWidth());\r\n                this.canvasElement.height = parent.innerHeight();\r\n                this.canvasElement.width = parent.innerWidth();\r\n                this.draw();\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.draw = function () {\r\n                var _this = this;\r\n                this.context.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\r\n                this.drawGrid();\r\n                this.floorplan.getRooms().forEach(function (room) {\r\n                    _this.drawRoom(room);\r\n                });\r\n                this.floorplan.getWalls().forEach(function (wall) {\r\n                    _this.drawWall(wall);\r\n                });\r\n                this.floorplan.getCorners().forEach(function (corner) {\r\n                    _this.drawCorner(corner);\r\n                });\r\n                if (this.viewmodel.mode === Floorplanner.floorplannerModes.DRAW) {\r\n                    this.drawTarget(this.viewmodel.targetX, this.viewmodel.targetY, this.viewmodel.lastNode);\r\n                }\r\n                this.floorplan.getWalls().forEach(function (wall) {\r\n                    _this.drawWallLabels(wall);\r\n                });\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawWallLabels = function (wall) {\r\n                // we'll just draw the shorter label... idk\r\n                if (wall.backEdge && wall.frontEdge) {\r\n                    if (wall.backEdge.interiorDistance < wall.frontEdge.interiorDistance) {\r\n                        this.drawEdgeLabel(wall.backEdge);\r\n                    } else {\r\n                        this.drawEdgeLabel(wall.frontEdge);\r\n                    }\r\n                } else if (wall.backEdge) {\r\n                    this.drawEdgeLabel(wall.backEdge);\r\n                } else if (wall.frontEdge) {\r\n                    this.drawEdgeLabel(wall.frontEdge);\r\n                }\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawWall = function (wall) {\r\n                var hover = (wall === this.viewmodel.activeWall);\r\n                var color = wallColor;\r\n                if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\r\n                    color = deleteColor;\r\n                } else if (hover) {\r\n                    color = wallColorHover;\r\n                }\r\n                this.drawLine(this.viewmodel.convertX(wall.getStartX()), this.viewmodel.convertY(wall.getStartY()), this.viewmodel.convertX(wall.getEndX()), this.viewmodel.convertY(wall.getEndY()), hover ? wallWidthHover : wallWidth, color);\r\n                if (!hover && wall.frontEdge) {\r\n                    this.drawEdge(wall.frontEdge, hover);\r\n                }\r\n                if (!hover && wall.backEdge) {\r\n                    this.drawEdge(wall.backEdge, hover);\r\n                }\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawEdgeLabel = function (edge) {\r\n                var pos = edge.interiorCenter();\r\n                var length = edge.interiorDistance();\r\n                if (length < 60) {\r\n                    // dont draw labels on walls this short\r\n                    return;\r\n                }\r\n                this.context.font = \"normal 12px Arial\";\r\n                this.context.fillStyle = \"#000000\";\r\n                this.context.textBaseline = \"middle\";\r\n                this.context.textAlign = \"center\";\r\n                this.context.strokeStyle = \"#ffffff\";\r\n                this.context.lineWidth = 4;\r\n                this.context.strokeText(BP3D.Core.Dimensioning.cmToMeasure(length), this.viewmodel.convertX(pos.x), this.viewmodel.convertY(pos.y));\r\n                this.context.fillText(BP3D.Core.Dimensioning.cmToMeasure(length), this.viewmodel.convertX(pos.x), this.viewmodel.convertY(pos.y));\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawEdge = function (edge, hover) {\r\n                var color = edgeColor;\r\n                if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\r\n                    color = deleteColor;\r\n                } else if (hover) {\r\n                    color = edgeColorHover;\r\n                }\r\n                var corners = edge.corners();\r\n                var scope = this;\r\n                this.drawPolygon(BP3D.Core.Utils.map(corners, function (corner) {\r\n                    return scope.viewmodel.convertX(corner.x);\r\n                }), BP3D.Core.Utils.map(corners, function (corner) {\r\n                    return scope.viewmodel.convertY(corner.y);\r\n                }), false, null, true, color, edgeWidth);\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawRoom = function (room) {\r\n                var scope = this;\r\n                this.drawPolygon(BP3D.Core.Utils.map(room.corners, function (corner) {\r\n                    return scope.viewmodel.convertX(corner.x);\r\n                }), BP3D.Core.Utils.map(room.corners, function (corner) {\r\n                    return scope.viewmodel.convertY(corner.y);\r\n                }), true, roomColor);\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawCorner = function (corner) {\r\n                var hover = (corner === this.viewmodel.activeCorner);\r\n                var color = cornerColor;\r\n                if (hover && this.viewmodel.mode === Floorplanner.floorplannerModes.DELETE) {\r\n                    color = deleteColor;\r\n                } else if (hover) {\r\n                    color = cornerColorHover;\r\n                }\r\n                this.drawCircle(this.viewmodel.convertX(corner.x), this.viewmodel.convertY(corner.y), hover ? cornerRadiusHover : cornerRadius, color);\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawTarget = function (x, y, lastNode) {\r\n                this.drawCircle(this.viewmodel.convertX(x), this.viewmodel.convertY(y), cornerRadiusHover, cornerColorHover);\r\n                if (this.viewmodel.lastNode) {\r\n                    this.drawLine(this.viewmodel.convertX(lastNode.x), this.viewmodel.convertY(lastNode.y), this.viewmodel.convertX(x), this.viewmodel.convertY(y), wallWidthHover, wallColorHover);\r\n                }\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawLine = function (startX, startY, endX, endY, width, color) {\r\n                // width is an integer\r\n                // color is a hex string, i.e. #ff0000\r\n                this.context.beginPath();\r\n                this.context.moveTo(startX, startY);\r\n                this.context.lineTo(endX, endY);\r\n                this.context.lineWidth = width;\r\n                this.context.strokeStyle = color;\r\n                this.context.stroke();\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawPolygon = function (xArr, yArr, fill, fillColor, stroke, strokeColor, strokeWidth) {\r\n                // fillColor is a hex string, i.e. #ff0000\r\n                fill = fill || false;\r\n                stroke = stroke || false;\r\n                this.context.beginPath();\r\n                this.context.moveTo(xArr[0], yArr[0]);\r\n                for (var i = 1; i < xArr.length; i++) {\r\n                    this.context.lineTo(xArr[i], yArr[i]);\r\n                }\r\n                this.context.closePath();\r\n                if (fill) {\r\n                    this.context.fillStyle = fillColor;\r\n                    this.context.fill();\r\n                }\r\n                if (stroke) {\r\n                    this.context.lineWidth = strokeWidth;\r\n                    this.context.strokeStyle = strokeColor;\r\n                    this.context.stroke();\r\n                }\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawCircle = function (centerX, centerY, radius, fillColor) {\r\n                this.context.beginPath();\r\n                this.context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n                this.context.fillStyle = fillColor;\r\n                this.context.fill();\r\n            };\r\n            /** returns n where -gridSize/2 < n <= gridSize/2  */\r\n            FloorplannerView.prototype.calculateGridOffset = function (n) {\r\n                if (n >= 0) {\r\n                    return (n + gridSpacing / 2.0) % gridSpacing - gridSpacing / 2.0;\r\n                } else {\r\n                    return (n - gridSpacing / 2.0) % gridSpacing + gridSpacing / 2.0;\r\n                }\r\n            };\r\n            /** */\r\n            FloorplannerView.prototype.drawGrid = function () {\r\n                var offsetX = this.calculateGridOffset(-this.viewmodel.originX);\r\n                var offsetY = this.calculateGridOffset(-this.viewmodel.originY);\r\n                var width = this.canvasElement.width;\r\n                var height = this.canvasElement.height;\r\n                for (var x = 0; x <= (width / gridSpacing); x++) {\r\n                    this.drawLine(gridSpacing * x + offsetX, 0, gridSpacing * x + offsetX, height, gridWidth, gridColor);\r\n                }\r\n                for (var y = 0; y <= (height / gridSpacing); y++) {\r\n                    this.drawLine(0, gridSpacing * y + offsetY, width, gridSpacing * y + offsetY, gridWidth, gridColor);\r\n                }\r\n            };\r\n            return FloorplannerView;\r\n        })();\r\n        Floorplanner.FloorplannerView = FloorplannerView;\r\n    })(Floorplanner = BP3D.Floorplanner || (BP3D.Floorplanner = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Floorplanner;\r\n    (function (Floorplanner_1) {\r\n        /** how much will we move a corner to make a wall axis aligned (cm) */\r\n        var snapTolerance = 25;\r\n        /**\r\n         * The Floorplanner implements an interactive tool for creation of floorplans.\r\n         */\r\n        var Floorplanner = (function () {\r\n            /** */\r\n            function Floorplanner(canvas, floorplan) {\r\n                this.floorplan = floorplan;\r\n                /** */\r\n                this.mode = 0;\r\n                /** */\r\n                this.activeWall = null;\r\n                /** */\r\n                this.activeCorner = null;\r\n                /** */\r\n                this.originX = 0;\r\n                /** */\r\n                this.originY = 0;\r\n                /** drawing state */\r\n                this.targetX = 0;\r\n                /** drawing state */\r\n                this.targetY = 0;\r\n                /** drawing state */\r\n                this.lastNode = null;\r\n                /** */\r\n                this.modeResetCallbacks = $.Callbacks();\r\n                /** */\r\n                this.mouseDown = false;\r\n                /** */\r\n                this.mouseMoved = false;\r\n                /** */\r\n                this.mouseMovedCount = 0;\r\n                /** in ThreeJS coords */\r\n                this.mouseX = 0;\r\n                /** in ThreeJS coords */\r\n                this.mouseY = 0;\r\n                /** in ThreeJS coords */\r\n                this.rawMouseX = 0;\r\n                /** in ThreeJS coords */\r\n                this.rawMouseY = 0;\r\n                /** mouse position at last click */\r\n                this.lastX = 0;\r\n                /** mouse position at last click */\r\n                this.lastY = 0;\r\n                this.canvasElement = $(\"#\" + canvas);\r\n                this.view = new Floorplanner_1.FloorplannerView(this.floorplan, this, canvas);\r\n                var cmPerFoot = 30.48;\r\n                var pixelsPerFoot = 15.0;\r\n                this.cmPerPixel = cmPerFoot * (1.0 / pixelsPerFoot);\r\n                this.pixelsPerCm = 1.0 / this.cmPerPixel;\r\n                this.wallWidth = 10.0 * this.pixelsPerCm;\r\n                // Initialization:\r\n                this.setMode(Floorplanner_1.floorplannerModes.MOVE);\r\n                var scope = this;\r\n                this.canvasElement.mousedown(function () {\r\n                    scope.mousedown();\r\n                });\r\n                this.canvasElement.mousemove(function (event) {\r\n                    scope.mousemove(event);\r\n                });\r\n                this.canvasElement.mouseup(function () {\r\n                    scope.mouseup();\r\n                });\r\n                this.canvasElement.mouseleave(function () {\r\n                    scope.mouseleave();\r\n                });\r\n                $(document).keyup(function (e) {\r\n                    if (e.keyCode === 27) {\r\n                        scope.escapeKey();\r\n                    }\r\n                });\r\n                floorplan.roomLoadedCallbacks.add(function () {\r\n                    scope.reset();\r\n                });\r\n            }\r\n            /** */\r\n            Floorplanner.prototype.escapeKey = function () {\r\n                this.setMode(Floorplanner_1.floorplannerModes.MOVE);\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.updateTarget = function () {\r\n                if (this.mode === Floorplanner_1.floorplannerModes.DRAW && this.lastNode) {\r\n                    if (Math.abs(this.mouseX - this.lastNode.x) < snapTolerance) {\r\n                        this.targetX = this.lastNode.x;\r\n                    } else {\r\n                        this.targetX = this.mouseX;\r\n                    }\r\n                    if (Math.abs(this.mouseY - this.lastNode.y) < snapTolerance) {\r\n                        this.targetY = this.lastNode.y;\r\n                    } else {\r\n                        this.targetY = this.mouseY;\r\n                    }\r\n                } else {\r\n                    this.targetX = this.mouseX;\r\n                    this.targetY = this.mouseY;\r\n                }\r\n                this.view.draw();\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.mousedown = function () {\r\n                // console.log(\"mouse down\");\r\n                this.mouseDown = true;\r\n                this.mouseMoved = false;\r\n                this.mouseMovedCount = 0;\r\n                this.lastX = this.rawMouseX;\r\n                this.lastY = this.rawMouseY;\r\n                // delete\r\n                if (this.mode === Floorplanner_1.floorplannerModes.DELETE) {\r\n                    if (this.activeCorner) {\r\n                        this.activeCorner.removeAll();\r\n                    } else if (this.activeWall) {\r\n                        this.activeWall.remove();\r\n                    } else {\r\n                        this.setMode(Floorplanner_1.floorplannerModes.MOVE);\r\n                    }\r\n                }\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.mousemove = function (event) {\r\n                // console.log(\"mouse move\");\r\n                this.mouseMovedCount++;\r\n                this.mouseMoved = true;\r\n                // update mouse\r\n                this.rawMouseX = event.clientX;\r\n                this.rawMouseY = event.clientY;\r\n                this.mouseX = (event.clientX - this.canvasElement.offset().left) * this.cmPerPixel + this.originX * this.cmPerPixel;\r\n                this.mouseY = (event.clientY - this.canvasElement.offset().top) * this.cmPerPixel + this.originY * this.cmPerPixel;\r\n                // update target (snapped position of actual mouse)\r\n                if (this.mode === Floorplanner_1.floorplannerModes.DRAW || (this.mode === Floorplanner_1.floorplannerModes.MOVE && this.mouseDown)) {\r\n                    this.updateTarget();\r\n                }\r\n                // update object target\r\n                if (this.mode !== Floorplanner_1.floorplannerModes.DRAW && !this.mouseDown) {\r\n                    var hoverCorner = this.floorplan.overlappedCorner(this.mouseX, this.mouseY);\r\n                    var hoverWall = this.floorplan.overlappedWall(this.mouseX, this.mouseY);\r\n                    var draw = false;\r\n                    if (hoverCorner !== this.activeCorner) {\r\n                        this.activeCorner = hoverCorner;\r\n                        draw = true;\r\n                    }\r\n                    // corner takes precendence\r\n                    if (this.activeCorner == null) {\r\n                        if (hoverWall !== this.activeWall) {\r\n                            this.activeWall = hoverWall;\r\n                            draw = true;\r\n                        }\r\n                    } else {\r\n                        this.activeWall = null;\r\n                    }\r\n                    if (draw) {\r\n                        this.view.draw();\r\n                    }\r\n                }\r\n                // panning\r\n                if (this.mouseDown && !this.activeCorner && !this.activeWall) {\r\n                    this.originX += (this.lastX - this.rawMouseX);\r\n                    this.originY += (this.lastY - this.rawMouseY);\r\n                    this.lastX = this.rawMouseX;\r\n                    this.lastY = this.rawMouseY;\r\n                    this.view.draw();\r\n                }\r\n                // dragging\r\n                if (this.mode === Floorplanner_1.floorplannerModes.MOVE && this.mouseDown) {\r\n                    if (this.activeCorner) {\r\n                        this.activeCorner.move(this.mouseX, this.mouseY);\r\n                        this.activeCorner.snapToAxis(snapTolerance);\r\n                    } else if (this.activeWall) {\r\n                        this.activeWall.relativeMove((this.rawMouseX - this.lastX) * this.cmPerPixel, (this.rawMouseY - this.lastY) * this.cmPerPixel);\r\n                        this.activeWall.snapToAxis(snapTolerance);\r\n                        this.lastX = this.rawMouseX;\r\n                        this.lastY = this.rawMouseY;\r\n                    }\r\n                    this.view.draw();\r\n                }\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.mouseup = function () {\r\n                this.mouseDown = false;\r\n                // console.log(\"mouse up\");\r\n                // console.log(this.mouseMoved);\r\n                // drawing\r\n                if (this.mode === Floorplanner_1.floorplannerModes.DRAW && (this.mouseMovedCount === 1 || this.mouseMovedCount === 0)) {\r\n                    // console.log(this.targetX);\r\n                    // console.log(this.targetY);\r\n                    var corner = this.floorplan.newCorner(this.targetX, this.targetY);\r\n                    if (this.lastNode != null) {\r\n                        this.floorplan.newWall(this.lastNode, corner);\r\n                    }\r\n                    if (corner.mergeWithIntersected() && this.lastNode != null) {\r\n                        this.setMode(Floorplanner_1.floorplannerModes.MOVE);\r\n                    }\r\n                    this.lastNode = corner;\r\n                }\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.mouseleave = function () {\r\n                this.mouseDown = false;\r\n                //scope.setMode(scope.modes.MOVE);\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.reset = function () {\r\n                // this.resizeView();\r\n                // this.setMode(Floorplanner_1.floorplannerModes.MOVE);\r\n                // this.resetOrigin();\r\n                // this.view.draw();\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.resizeView = function () {\r\n                this.view.handleWindowResize();\r\n            };\r\n            /** */\r\n            Floorplanner.prototype.setMode = function (mode) {\r\n                this.lastNode = null;\r\n                this.mode = mode;\r\n                this.modeResetCallbacks.fire(mode);\r\n                this.updateTarget();\r\n            };\r\n            /** Sets the origin so that floorplan is centered */\r\n            Floorplanner.prototype.resetOrigin = function () {\r\n                var centerX = this.canvasElement.innerWidth() / 2;\r\n                var centerY = this.canvasElement.innerHeight() / 2;\r\n                var centerFloorplan = this.floorplan.getCenter();\r\n                this.originX = centerFloorplan.x * this.pixelsPerCm - centerX;\r\n                this.originY = centerFloorplan.z * this.pixelsPerCm - centerY;\r\n            };\r\n            /** Convert from THREEjs coords to canvas coords. */\r\n            Floorplanner.prototype.convertX = function (x) {\r\n                return (x - this.originX * this.cmPerPixel) * this.pixelsPerCm;\r\n            };\r\n            /** Convert from THREEjs coords to canvas coords. */\r\n            Floorplanner.prototype.convertY = function (y) {\r\n                return (y - this.originY * this.cmPerPixel) * this.pixelsPerCm;\r\n            };\r\n            return Floorplanner;\r\n        })();\r\n        Floorplanner_1.Floorplanner = Floorplanner;\r\n    })(Floorplanner = BP3D.Floorplanner || (BP3D.Floorplanner = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Controller = function (three, model, camera, element, controls, hud) {\r\n            var scope = this;\r\n            this.enabled = true;\r\n            // var three = three;\r\n            // var model = model;\r\n            var scene = model.scene;\r\n            // var element = element;\r\n            // var camera = camera;\r\n            // var controls = controls;\r\n            // var hud = hud;\r\n            var plane; // ground plane used for intersection testing\r\n            var mouse;\r\n            var intersectedObject;\r\n            var mouseoverObject;\r\n            var selectedObject;\r\n            var mouseDown = false;\r\n            // eslint-disable-next-line no-unused-vars\r\n            var mouseMoved = false; // has mouse moved since down click\r\n            var mouseMovedCounter = 0;\r\n            var rotateMouseOver = false;\r\n            var states = {\r\n                UNSELECTED: 0,\r\n                SELECTED: 1,\r\n                DRAGGING: 2,\r\n                ROTATING: 3,\r\n                ROTATING_FREE: 4,\r\n                PANNING: 5,\r\n                DRAGGING_FREE: 6\r\n            };\r\n            var state = states.UNSELECTED;\r\n            this.needsUpdate = true;\r\n\r\n            function init() {\r\n                element.mousedown(mouseDownEvent);\r\n                element.mouseup(mouseUpEvent);\r\n                element.mousemove(mouseMoveEvent);\r\n                element.on(\"touchstart\", touchStartEvent);\r\n                element.on(\"touchmove\", touchMoveEvent);\r\n                element.on(\"touchend\", touchEndEvent);\r\n                mouse = new THREE.Vector2();\r\n                scene.itemRemovedCallbacks.add(itemRemoved);\r\n                scene.itemLoadedCallbacks.add(itemLoaded);\r\n                setGroundPlane();\r\n            }\r\n            // invoked via callback when item is loaded\r\n            function itemLoaded(item) {\r\n                if (item !== undefined && item !== null) {\r\n                    if (!item.position_set) {\r\n                        scope.setSelectedObject(item);\r\n                        switchState(states.DRAGGING_FREE);\r\n                    }\r\n                    item.position_set = true;\r\n                }\r\n            }\r\n\r\n            function clickPressed(vec2) {\r\n                vec2 = vec2 || mouse;\r\n                var intersection = scope.itemIntersection(mouse, selectedObject);\r\n                if (intersection) {\r\n                    selectedObject.clickPressed(intersection);\r\n                }\r\n            }\r\n\r\n            function clickDragged(vec2) {\r\n                vec2 = vec2 || mouse;\r\n                var intersection = scope.itemIntersection(mouse, selectedObject);\r\n                if (intersection) {\r\n                    if (scope.isRotating()) {\r\n                        selectedObject.rotate(intersection);\r\n                    } else {\r\n                        selectedObject.clickDragged(intersection);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function itemRemoved(item) {\r\n                // invoked as a callback to event in Scene\r\n                if (item === selectedObject) {\r\n                    selectedObject.setUnselected();\r\n                    selectedObject.mouseOff();\r\n                    scope.setSelectedObject(null);\r\n                }\r\n            }\r\n\r\n            function setGroundPlane() {\r\n                // ground plane used to find intersections\r\n                var size = 10000;\r\n                plane = new THREE.Mesh(new THREE.PlaneGeometry(size, size), new THREE.MeshBasicMaterial());\r\n                plane.rotation.x = -Math.PI / 2;\r\n                plane.visible = false;\r\n                scene.add(plane);\r\n            }\r\n\r\n            function checkWallsAndFloors() {\r\n                // console.log(\"checking floor and wall\")\r\n                // double click on a wall or floor brings up texture change modal\r\n                if (state === states.UNSELECTED && mouseoverObject == null) {\r\n                    // check walls\r\n                    var wallEdgePlanes = model.floorplan.wallEdgePlanes();\r\n                    var wallIntersects = scope.getIntersections(mouse, wallEdgePlanes, true);\r\n                    if (wallIntersects.length > 0) {\r\n                        var wall = wallIntersects[0].object.edge;\r\n                        three.wallClicked.fire(wall);\r\n                        return;\r\n                    }\r\n                    // check floors\r\n                    var floorPlanes = model.floorplan.floorPlanes();\r\n                    var floorIntersects = scope.getIntersections(mouse, floorPlanes, false);\r\n                    if (floorIntersects.length > 0) {\r\n                        var room = floorIntersects[0].object.room;\r\n                        three.floorClicked.fire(room);\r\n                        return;\r\n                    }\r\n                    three.nothingClicked.fire();\r\n                }\r\n            }\r\n\r\n            function mouseMoveEvent(event) {\r\n                if (scope.enabled) {\r\n                    event.preventDefault();\r\n                    mouseMoved = true;\r\n                    // console.log(\"mousemoved\")\r\n                    mouseMovedCounter++;\r\n                    mouse.x = event.clientX;\r\n                    mouse.y = event.clientY;\r\n                    if (!mouseDown) {\r\n                        // console.log(\"Mouse Moving\");\r\n                        if (state === states.DRAGGING_FREE) {\r\n                            // console.log(\"in Dragging without mouse down\")\r\n                            clickDragged();\r\n                            hud.update();\r\n                            scope.needsUpdate = true;\r\n                        } else {\r\n                            // console.log(\"updating intersections\");\r\n                            updateIntersections();\r\n                        }\r\n                    }\r\n                    switch (state) {\r\n                        case states.UNSELECTED:\r\n                            updateMouseover();\r\n                            break;\r\n                        case states.SELECTED:\r\n                            updateMouseover();\r\n                            break;\r\n                        case states.DRAGGING:\r\n                        case states.ROTATING:\r\n                        case states.ROTATING_FREE:\r\n                            clickDragged();\r\n                            hud.update();\r\n                            scope.needsUpdate = true;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            this.isRotating = function () {\r\n                return (state === states.ROTATING || state === states.ROTATING_FREE);\r\n            };\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            function touchStartEvent(event) {\r\n                touchMoveEvent(event);\r\n                if (scope.enabled) {\r\n                    event.preventDefault();\r\n                    mouseMoved = false;\r\n                    // console.log(\"mousedown\")\r\n                    mouseMovedCounter = 0;\r\n                    mouseDown = true;\r\n                    switch (state) {\r\n                        case states.SELECTED:\r\n                            if (rotateMouseOver) {\r\n                                switchState(states.ROTATING);\r\n                            } else if (intersectedObject != null) {\r\n                                scope.setSelectedObject(intersectedObject);\r\n                                if (!intersectedObject.fixed) {\r\n                                    switchState(states.DRAGGING);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case states.UNSELECTED:\r\n\r\n                            if (intersectedObject != null) {\r\n                                // console.log(\"calling set sel1bjhbjhbj\")\r\n                                scope.setSelectedObject(intersectedObject);\r\n                                if (!intersectedObject.fixed) {\r\n                                    switchState(states.DRAGGING);\r\n                                }\r\n                            } else {\r\n                                // console.log(\"no object\")\r\n                            }\r\n                            break;\r\n                        case states.DRAGGING:\r\n                        case states.ROTATING:\r\n                            break;\r\n                        case states.ROTATING_FREE:\r\n                            switchState(states.SELECTED);\r\n                            break;\r\n                        case states.DRAGGING_FREE:\r\n                            switchState(states.DRAGGING);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            function touchMoveEvent(event) {\r\n                if (scope.enabled) {\r\n                    event.preventDefault();\r\n                    mouseMoved = true;\r\n                    // console.log(\"mousemoved\")\r\n                    mouseMovedCounter++;\r\n                    mouse.x = event.touches[0].clientX;\r\n                    mouse.y = event.touches[0].clientY;\r\n                    if (!mouseDown) {\r\n                        // console.log(\"Mouse Moving\");\r\n                        if (state === states.DRAGGING_FREE) {\r\n                            // console.log(\"in Dragging without mouse down\")\r\n                            clickDragged();\r\n                            hud.update();\r\n                            scope.needsUpdate = true;\r\n                        } else {\r\n                            // console.log(\"updating intersections\");\r\n                            updateIntersections();\r\n                        }\r\n                    }\r\n                    switch (state) {\r\n                        case states.UNSELECTED:\r\n                            // console.log(\"updating\")\r\n                            updateMouseover();\r\n                            break;\r\n                        case states.SELECTED:\r\n                            updateMouseover();\r\n                            break;\r\n                        case states.DRAGGING:\r\n                        case states.ROTATING:\r\n                        case states.ROTATING_FREE:\r\n                            clickDragged();\r\n                            hud.update();\r\n                            scope.needsUpdate = true;\r\n                            break;\r\n                        default:\r\n                            updateMouseover();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            function touchEndEvent(event) {\r\n                if (scope.enabled) {\r\n                    mouseDown = false;\r\n                    switch (state) {\r\n                        case states.DRAGGING:\r\n                            if (selectedObject != null) {\r\n                                selectedObject.clickReleased();\r\n                            }\r\n                            switchState(states.SELECTED);\r\n\r\n                            break;\r\n                        case states.ROTATING:\r\n                            if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\r\n                                switchState(states.ROTATING_FREE);\r\n                            } else {\r\n                                switchState(states.SELECTED);\r\n                            }\r\n                            break;\r\n                        case states.UNSELECTED:\r\n                            if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\r\n                                checkWallsAndFloors();\r\n                            }\r\n                            break;\r\n                        case states.SELECTED:\r\n                            if (intersectedObject == null && (mouseMovedCounter === 0 || mouseMovedCounter === 1)) {\r\n                                switchState(states.UNSELECTED);\r\n                                checkWallsAndFloors();\r\n                            }\r\n                            break;\r\n                        case states.ROTATING_FREE:\r\n                            break;\r\n                        default:\r\n                            // checkWallsAndFloors();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function mouseDownEvent(event) {\r\n                if (scope.enabled) {\r\n                    event.preventDefault();\r\n                    mouseMoved = false;\r\n                    // console.log(\"mousedown\")\r\n                    mouseMovedCounter = 0;\r\n                    mouseDown = true;\r\n                    switch (state) {\r\n                        case states.SELECTED:\r\n                            if (rotateMouseOver) {\r\n                                switchState(states.ROTATING);\r\n                            } else if (intersectedObject != null) {\r\n                                scope.setSelectedObject(intersectedObject);\r\n                                if (!intersectedObject.fixed) {\r\n                                    switchState(states.DRAGGING);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case states.UNSELECTED:\r\n                            if (intersectedObject != null) {\r\n                                scope.setSelectedObject(intersectedObject);\r\n                                if (!intersectedObject.fixed) {\r\n                                    switchState(states.DRAGGING);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case states.DRAGGING:\r\n                        case states.ROTATING:\r\n                            break;\r\n                        case states.ROTATING_FREE:\r\n                            switchState(states.SELECTED);\r\n                            break;\r\n                        case states.DRAGGING_FREE:\r\n                            switchState(states.DRAGGING);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function mouseUpEvent(event) {\r\n                if (scope.enabled) {\r\n                    mouseDown = false;\r\n                    switch (state) {\r\n                        case states.DRAGGING:\r\n                            if (selectedObject != null) {\r\n                                selectedObject.clickReleased();\r\n                            }\r\n                            switchState(states.SELECTED);\r\n\r\n                            break;\r\n                        case states.ROTATING:\r\n                            if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\r\n                                switchState(states.ROTATING_FREE);\r\n                            } else {\r\n                                switchState(states.SELECTED);\r\n                            }\r\n                            break;\r\n                        case states.UNSELECTED:\r\n                            if (mouseMovedCounter === 0 || mouseMovedCounter === 1) {\r\n                                checkWallsAndFloors();\r\n                            }\r\n                            break;\r\n                        case states.SELECTED:\r\n                            if (intersectedObject == null && (mouseMovedCounter === 0 || mouseMovedCounter === 1)) {\r\n                                switchState(states.UNSELECTED);\r\n                                checkWallsAndFloors();\r\n                            }\r\n                            break;\r\n                        case states.ROTATING_FREE:\r\n                            break;\r\n                        default:\r\n                            checkWallsAndFloors();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function switchState(newState) {\r\n                if (newState !== state) {\r\n                    onExit(state);\r\n                    onEntry(newState);\r\n                }\r\n                state = newState;\r\n                hud.setRotating(scope.isRotating());\r\n            }\r\n\r\n            function onEntry(state) {\r\n                switch (state) {\r\n                    case states.UNSELECTED:\r\n                        scope.setSelectedObject(null);\r\n                        // eslint-disable-next-line no-fallthrough\r\n                    case states.SELECTED:\r\n                        controls.enabled = true;\r\n                        break;\r\n                    case states.ROTATING:\r\n                    case states.ROTATING_FREE:\r\n                        controls.enabled = false;\r\n                        break;\r\n                    case states.DRAGGING:\r\n                        three.setCursorStyle(\"move\");\r\n                        clickPressed();\r\n                        controls.enabled = false;\r\n                        break;\r\n                    case states.DRAGGING_FREE:\r\n                        three.setCursorStyle(\"move\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function onExit(state) {\r\n                switch (state) {\r\n                    case states.UNSELECTED:\r\n                    case states.SELECTED:\r\n                        break;\r\n                    case states.DRAGGING:\r\n                        if (mouseoverObject) {\r\n                            three.setCursorStyle(\"pointer\");\r\n                        } else {\r\n                            three.setCursorStyle(\"auto\");\r\n                        }\r\n                        break;\r\n                    case states.ROTATING:\r\n                    case states.ROTATING_FREE:\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            this.selectedObject = function () {\r\n                return selectedObject;\r\n            };\r\n            // updates the vector of the intersection with the plane of a given\r\n            // mouse position, and the intersected object\r\n            // both may be set to null if no intersection found\r\n            function updateIntersections() {\r\n                // check the rotate arrow\r\n                var hudObject = hud.getObject();\r\n                if (hudObject != null) {\r\n                    var hudIntersects = scope.getIntersections(mouse, hudObject, false, false, true);\r\n                    if (hudIntersects.length > 0) {\r\n                        rotateMouseOver = true;\r\n                        hud.setMouseover(true);\r\n                        intersectedObject = null;\r\n                        return;\r\n                    }\r\n                }\r\n                rotateMouseOver = false;\r\n                hud.setMouseover(false);\r\n                // check objects\r\n                var items = model.scene.getItems();\r\n                var intersects = scope.getIntersections(mouse, items, false, true);\r\n                if (intersects.length > 0) {\r\n                    intersectedObject = intersects[0].object;\r\n                } else {\r\n                    intersectedObject = null;\r\n                }\r\n            }\r\n            // sets coords to -1 to 1\r\n            function normalizeVector2(vec2) {\r\n                var retVec = new THREE.Vector2();\r\n                retVec.x = ((vec2.x - three.widthMargin) / (window.innerWidth - three.widthMargin)) * 2 - 1;\r\n                retVec.y = -((vec2.y - three.heightMargin) / (window.innerHeight - three.heightMargin)) * 2 + 1;\r\n                return retVec;\r\n            }\r\n            //\r\n            function mouseToVec3(vec2) {\r\n                var normVec2 = normalizeVector2(vec2);\r\n                var vector = new THREE.Vector3(normVec2.x, normVec2.y, 0.5);\r\n                vector.unproject(camera);\r\n                return vector;\r\n            }\r\n            // returns the first intersection object\r\n            this.itemIntersection = function (vec2, item) {\r\n                if (item == null) {\r\n                    return null;\r\n                }\r\n                var customIntersections = item.customIntersectionPlanes();\r\n                var intersections = null;\r\n                if (customIntersections && customIntersections.length > 0) {\r\n                    intersections = this.getIntersections(vec2, customIntersections, true);\r\n                } else {\r\n                    intersections = this.getIntersections(vec2, plane);\r\n                }\r\n                if (intersections.length > 0) {\r\n                    return intersections[0];\r\n                } else {\r\n                    return null;\r\n                }\r\n            };\r\n            // filter by normals will only return objects facing the camera\r\n            // objects can be an array of objects or a single object\r\n            this.getIntersections = function (vec2, objects, filterByNormals, onlyVisible, recursive, linePrecision) {\r\n                var vector = mouseToVec3(vec2);\r\n                onlyVisible = onlyVisible || false;\r\n                filterByNormals = filterByNormals || false;\r\n                recursive = recursive || false;\r\n                linePrecision = linePrecision || 20;\r\n                var direction = vector.sub(camera.position).normalize();\r\n                var raycaster = new THREE.Raycaster(camera.position, direction);\r\n                raycaster.params.Line.threshold = linePrecision;\r\n                // raycaster.linePrecision = linePrecision;\r\n                var intersections;\r\n                if (objects instanceof Array) {\r\n                    intersections = raycaster.intersectObjects(objects, recursive);\r\n                } else {\r\n                    intersections = raycaster.intersectObject(objects, recursive);\r\n                }\r\n                // filter by visible, if true\r\n                if (onlyVisible) {\r\n                    intersections = BP3D.Core.Utils.removeIf(intersections, function (intersection) {\r\n                        return !intersection.object.visible;\r\n                    });\r\n                }\r\n                // filter by normals, if true\r\n                if (filterByNormals) {\r\n                    intersections = BP3D.Core.Utils.removeIf(intersections, function (intersection) {\r\n                        var dot = intersection.face.normal.dot(direction);\r\n                        return (dot > 0);\r\n                    });\r\n                }\r\n                return intersections;\r\n            };\r\n            // manage the selected object\r\n            this.setSelectedObject = function (object) {\r\n                if (state === states.UNSELECTED) {\r\n                    switchState(states.SELECTED);\r\n                }\r\n                if (selectedObject != null) {\r\n                    selectedObject.setUnselected();\r\n                }\r\n                if (object != null) {\r\n                    selectedObject = object;\r\n                    selectedObject.setSelected();\r\n                    three.itemSelectedCallbacks.fire(object);\r\n                } else {\r\n                    selectedObject = null;\r\n                    three.itemUnselectedCallbacks.fire();\r\n                }\r\n                this.needsUpdate = true;\r\n            };\r\n            // TODO: there MUST be simpler logic for expressing this\r\n            function updateMouseover() {\r\n                if (intersectedObject != null) {\r\n                    if (mouseoverObject != null) {\r\n                        if (mouseoverObject !== intersectedObject) {\r\n                            mouseoverObject.mouseOff();\r\n                            mouseoverObject = intersectedObject;\r\n                            mouseoverObject.mouseOver();\r\n                            scope.needsUpdate = true;\r\n                        } else {}\r\n                    } else {\r\n                        mouseoverObject = intersectedObject;\r\n                        mouseoverObject.mouseOver();\r\n                        three.setCursorStyle(\"pointer\");\r\n                        scope.needsUpdate = true;\r\n                    }\r\n                } else if (mouseoverObject != null) {\r\n                    mouseoverObject.mouseOff();\r\n                    three.setCursorStyle(\"auto\");\r\n                    mouseoverObject = null;\r\n                    scope.needsUpdate = true;\r\n                }\r\n            }\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Floor = function (scene, room) {\r\n            var scope = this;\r\n            this.room = room;\r\n            // var scene = scene;\r\n            var floorPlane = null;\r\n            // var roofPlane = null;\r\n            init();\r\n\r\n            function init() {\r\n                scope.room.fireOnFloorChange(redraw);\r\n                floorPlane = buildFloor();\r\n                scope.room.roomSelectedCallbacks.add(drawOutline);\r\n                scope.room.roomUnSelectedCallbacks.add(removeOutline);\r\n                // roofs look weird, so commented out\r\n                //roofPlane = buildRoof();\r\n            }\r\n\r\n            function drawOutline(box) {\r\n                scene.add(box);\r\n            }\r\n\r\n            function removeOutline(box) {\r\n                scene.remove(box);\r\n            }\r\n\r\n            function redraw() {\r\n                scope.removeFromScene();\r\n                floorPlane = buildFloor();\r\n                scope.addToScene();\r\n            }\r\n\r\n            function buildFloor() {\r\n                var textureSettings = scope.room.getTexture();\r\n                // setup texture\r\n                var texLoader = new THREE.TextureLoader();\r\n                texLoader.setCrossOrigin('');\r\n                var floorTexture = texLoader.load(textureSettings.url);\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture.repeat.set(1, 1);\r\n                var floorMaterialTop = new THREE.MeshPhongMaterial({\r\n                    map: floorTexture,\r\n                    side: THREE.DoubleSide,\r\n                    // ambient: 0xffffff, TODO_Ekki\r\n                    color: 0xcccccc,\r\n                    specular: 0x0a0a0a\r\n                });\r\n                var textureScale = textureSettings.scale;\r\n                // http://stackoverflow.com/questions/19182298/how-to-texture-a-three-js-mesh-created-with-shapegeometry\r\n                // scale down coords to fit 0 -> 1, then rescale\r\n                var points = [];\r\n                scope.room.interiorCorners.forEach(function (corner) {\r\n                    points.push(new THREE.Vector2(corner.x / textureScale, corner.y / textureScale));\r\n                });\r\n                var shape = new THREE.Shape(points);\r\n                var geometry = new THREE.ShapeGeometry(shape);\r\n                var floor = new THREE.Mesh(geometry, floorMaterialTop);\r\n                floor.rotation.set(Math.PI / 2, 0, 0);\r\n                floor.scale.set(textureScale, textureScale, textureScale);\r\n                floor.receiveShadow = true;\r\n                floor.castShadow = false;\r\n                return floor;\r\n            }\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            function buildRoof() {\r\n                // setup texture\r\n                var roofMaterial = new THREE.MeshBasicMaterial({\r\n                    side: THREE.FrontSide,\r\n                    color: 0xe5e5e5\r\n                });\r\n                var points = [];\r\n                scope.room.interiorCorners.forEach(function (corner) {\r\n                    points.push(new THREE.Vector2(corner.x, corner.y));\r\n                });\r\n                var shape = new THREE.Shape(points);\r\n                var geometry = new THREE.ShapeGeometry(shape);\r\n                var roof = new THREE.Mesh(geometry, roofMaterial);\r\n                roof.rotation.set(Math.PI / 2, 0, 0);\r\n                roof.position.y = 250;\r\n                return roof;\r\n            }\r\n            this.addToScene = function () {\r\n                scene.add(floorPlane);\r\n                //scene.add(roofPlane);\r\n                // hack so we can do intersect testing\r\n                scene.add(room.floorPlane);\r\n            };\r\n            this.removeFromScene = function () {\r\n                scene.remove(floorPlane);\r\n                //scene.remove(roofPlane);\r\n                scene.remove(room.floorPlane);\r\n            };\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Edge = function (scene, edge, controls) {\r\n            var scope = this;\r\n            // var scene = scene;\r\n            // var edge = edge;\r\n            // var controls = controls;\r\n            var wall = edge.wall;\r\n            var front = edge.front;\r\n            var planes = [];\r\n            var basePlanes = []; // always visible\r\n            var texture = null;\r\n            // var lightMap = new THREE.TextureLoader().load(\"http://localhost:8001/assets/5ef849ed8188602a98c95525\");\r\n            // var lightMap = THREE.ImageUtils.loadTexture(\"rooms/textures/walllightmap.png\");\r\n            var fillerColor = 0xdddddd;\r\n            var sideColor = 0xcccccc;\r\n            var baseColor = 0xdddddd;\r\n            this.visible = false;\r\n            this.remove = function () {\r\n                edge.redrawCallbacks.remove(redraw);\r\n                controls.cameraMovedCallbacks.remove(updateVisibility);\r\n                removeFromScene();\r\n            };\r\n\r\n            function init() {\r\n                edge.redrawCallbacks.add(redraw);\r\n                edge.edgeSelectedCallbacks.add(drawOutline);\r\n                edge.edgeUnSelectedCallbacks.add(removeOutline);\r\n                controls.cameraMovedCallbacks.add(updateVisibility);\r\n                updateTexture();\r\n                updatePlanes();\r\n                addToScene();\r\n\r\n            }\r\n\r\n            function drawOutline(box) {\r\n                scene.add(box);\r\n                updatePlanes();\r\n            }\r\n\r\n            function removeOutline(box) {\r\n                scene.remove(box);\r\n                updatePlanes();\r\n            }\r\n\r\n            function redraw() {\r\n                removeFromScene();\r\n                updateTexture();\r\n                updatePlanes();\r\n                addToScene();\r\n            }\r\n\r\n            function removeFromScene() {\r\n                planes.forEach(function (plane) {\r\n                    scene.remove(plane);\r\n                });\r\n                basePlanes.forEach(function (plane) {\r\n                    scene.remove(plane);\r\n                });\r\n                planes = [];\r\n                basePlanes = [];\r\n            }\r\n\r\n            function addToScene() {\r\n                planes.forEach(function (plane) {\r\n                    scene.add(plane);\r\n                });\r\n                basePlanes.forEach(function (plane) {\r\n                    scene.add(plane);\r\n                });\r\n                updateVisibility();\r\n            }\r\n\r\n            function updateVisibility() {\r\n                // finds the normal from the specified edge\r\n                var start = edge.interiorStart();\r\n                var end = edge.interiorEnd();\r\n                var x = end.x - start.x;\r\n                var y = end.y - start.y;\r\n                // rotate 90 degrees CCW\r\n                var normal = new THREE.Vector3(-y, 0, x);\r\n                normal.normalize();\r\n                // setup camera\r\n                var position = controls.object.position.clone();\r\n                var focus = new THREE.Vector3((start.x + end.x) / 2.0, 0, (start.y + end.y) / 2.0);\r\n                var direction = position.sub(focus).normalize();\r\n                // find dot\r\n                var dot = normal.dot(direction);\r\n                // update visible\r\n                scope.visible = (dot >= 0);\r\n                // show or hide plans\r\n                planes.forEach(function (plane) {\r\n                    plane.visible = scope.visible;\r\n                });\r\n                updateObjectVisibility();\r\n            }\r\n\r\n            function updateObjectVisibility() {\r\n                wall.items.forEach(function (item) {\r\n                    item.updateEdgeVisibility(scope.visible, front);\r\n                });\r\n                wall.onItems.forEach(function (item) {\r\n                    item.updateEdgeVisibility(scope.visible, front);\r\n                });\r\n            }\r\n\r\n            function updateTexture(callback) {\r\n                // callback is fired when texture loads\r\n                callback = function (texture) {\r\n                    scene.needsUpdate = true;\r\n                    THREE.Cache.add(url, texture);\r\n                };\r\n                var textureData = edge.getTexture();\r\n                var stretch = textureData.stretch;\r\n                var url = textureData.url;\r\n                var scale = textureData.scale;\r\n                if (THREE.Cache.get(url) === undefined) {\r\n                    texture = new THREE.TextureLoader().load(url, callback, null, null);\r\n                } else {\r\n                    texture = THREE.Cache.get(url);\r\n                }\r\n\r\n                // texture = THREE.ImageUtils.loadTexture(url, null, callback);\r\n                if (!stretch) {\r\n                    var height = wall.height;\r\n                    var width = edge.interiorDistance();\r\n                    texture.wrapT = THREE.RepeatWrapping;\r\n                    texture.wrapS = THREE.RepeatWrapping;\r\n                    texture.repeat.set(width / scale, height / scale);\r\n                    texture.needsUpdate = true;\r\n                }\r\n            }\r\n\r\n            function updatePlanes() {\r\n                var wallMaterial = new THREE.MeshBasicMaterial({\r\n                    color: 0xffffff,\r\n                    // ambientColor: 0xffffff, TODO_Ekki\r\n                    //ambient: scope.wall.color,\r\n                    side: THREE.FrontSide,\r\n                    map: texture,\r\n                });\r\n                var fillerMaterial = new THREE.MeshBasicMaterial({\r\n                    color: fillerColor,\r\n                    side: THREE.DoubleSide\r\n                });\r\n                // exterior plane\r\n                planes.push(makeWall(edge.exteriorStart(), edge.exteriorEnd(), edge.exteriorTransform, edge.invExteriorTransform, fillerMaterial));\r\n                // interior plane\r\n                planes.push(makeWall(edge.interiorStart(), edge.interiorEnd(), edge.interiorTransform, edge.invInteriorTransform, wallMaterial));\r\n                // bottom\r\n                // put into basePlanes since this is always visible\r\n                basePlanes.push(buildFiller(edge, 0, THREE.BackSide, baseColor));\r\n                // top\r\n                planes.push(buildFiller(edge, wall.height, THREE.DoubleSide, fillerColor));\r\n                // sides\r\n                planes.push(buildSideFillter(edge.interiorStart(), edge.exteriorStart(), wall.height, sideColor));\r\n                planes.push(buildSideFillter(edge.interiorEnd(), edge.exteriorEnd(), wall.height, sideColor));\r\n            }\r\n            // start, end have x and y attributes (i.e. corners)\r\n            function makeWall(start, end, transform, invTransform, material) {\r\n                var v1 = toVec3(start);\r\n                var v2 = toVec3(end);\r\n                var v3 = v2.clone();\r\n                v3.y = wall.height;\r\n                var v4 = v1.clone();\r\n                v4.y = wall.height;\r\n                var points = [v1.clone(), v2.clone(), v3.clone(), v4.clone()];\r\n                points.forEach(function (p) {\r\n                    p.applyMatrix4(transform);\r\n                });\r\n                var shape = new THREE.Shape([\r\n                    new THREE.Vector2(points[0].x, points[0].y),\r\n                    new THREE.Vector2(points[1].x, points[1].y),\r\n                    new THREE.Vector2(points[2].x, points[2].y),\r\n                    new THREE.Vector2(points[3].x, points[3].y)\r\n                ]);\r\n                // add holes for each wall item\r\n                wall.items.forEach(function (item) {\r\n                    var pos = item.position.clone();\r\n                    pos.applyMatrix4(transform);\r\n                    var halfSize = item.halfSize;\r\n                    var min = halfSize.clone().multiplyScalar(-1);\r\n                    var max = halfSize.clone();\r\n                    min.add(pos);\r\n                    max.add(pos);\r\n                    var holePoints = [\r\n                        new THREE.Vector2(min.x, min.y),\r\n                        new THREE.Vector2(max.x, min.y),\r\n                        new THREE.Vector2(max.x, max.y),\r\n                        new THREE.Vector2(min.x, max.y)\r\n                    ];\r\n                    shape.holes.push(new THREE.Path(holePoints));\r\n                });\r\n                var geometry = new THREE.ShapeGeometry(shape);\r\n                geometry.vertices.forEach(function (v) {\r\n                    v.applyMatrix4(invTransform);\r\n                });\r\n                // make UVs\r\n                var totalDistance = BP3D.Core.Utils.distance(v1.x, v1.z, v2.x, v2.z);\r\n                var height = wall.height;\r\n                geometry.faceVertexUvs[0] = [];\r\n\r\n                function vertexToUv(vertex) {\r\n                    var x = BP3D.Core.Utils.distance(v1.x, v1.z, vertex.x, vertex.z) / totalDistance;\r\n                    var y = vertex.y / height;\r\n                    return new THREE.Vector2(x, y);\r\n                }\r\n                geometry.faces.forEach(function (face) {\r\n                    var vertA = geometry.vertices[face.a];\r\n                    var vertB = geometry.vertices[face.b];\r\n                    var vertC = geometry.vertices[face.c];\r\n                    geometry.faceVertexUvs[0].push([\r\n                        vertexToUv(vertA),\r\n                        vertexToUv(vertB),\r\n                        vertexToUv(vertC)\r\n                    ]);\r\n                });\r\n                geometry.faceVertexUvs[1] = geometry.faceVertexUvs[0];\r\n                geometry.computeFaceNormals();\r\n                geometry.computeVertexNormals();\r\n                var mesh = new THREE.Mesh(geometry, material);\r\n                return mesh;\r\n            }\r\n\r\n            function buildSideFillter(p1, p2, height, color) {\r\n                var points = [\r\n                    toVec3(p1),\r\n                    toVec3(p2),\r\n                    toVec3(p2, height),\r\n                    toVec3(p1, height)\r\n                ];\r\n                var geometry = new THREE.Geometry();\r\n                points.forEach(function (p) {\r\n                    geometry.vertices.push(p);\r\n                });\r\n                geometry.faces.push(new THREE.Face3(0, 1, 2));\r\n                geometry.faces.push(new THREE.Face3(0, 2, 3));\r\n                var fillerMaterial = new THREE.MeshBasicMaterial({\r\n                    color: color,\r\n                    side: THREE.DoubleSide\r\n                });\r\n                var filler = new THREE.Mesh(geometry, fillerMaterial);\r\n                return filler;\r\n            }\r\n\r\n            function buildFiller(edge, height, side, color) {\r\n                var points = [\r\n                    toVec2(edge.exteriorStart()),\r\n                    toVec2(edge.exteriorEnd()),\r\n                    toVec2(edge.interiorEnd()),\r\n                    toVec2(edge.interiorStart())\r\n                ];\r\n                var fillerMaterial = new THREE.MeshBasicMaterial({\r\n                    color: color,\r\n                    side: side\r\n                });\r\n                var shape = new THREE.Shape(points);\r\n                var geometry = new THREE.ShapeGeometry(shape);\r\n                var filler = new THREE.Mesh(geometry, fillerMaterial);\r\n                filler.rotation.set(Math.PI / 2, 0, 0);\r\n                filler.position.y = height;\r\n                return filler;\r\n            }\r\n\r\n            function toVec2(pos) {\r\n                return new THREE.Vector2(pos.x, pos.y);\r\n            }\r\n\r\n            function toVec3(pos, height) {\r\n                height = height || 0;\r\n                return new THREE.Vector3(pos.x, height, pos.y);\r\n            }\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Floorplan = function (scene, floorplan, controls) {\r\n            var scope = this;\r\n            this.scene = scene;\r\n            this.floorplan = floorplan;\r\n            this.controls = controls;\r\n            this.floors = [];\r\n            this.edges = [];\r\n            floorplan.fireOnUpdatedRooms(redraw);\r\n\r\n            function redraw() {\r\n                // clear scene\r\n                scope.floors.forEach(function (floor) {\r\n                    floor.removeFromScene();\r\n                });\r\n                scope.edges.forEach(function (edge) {\r\n                    edge.remove();\r\n                });\r\n                scope.floors = [];\r\n                scope.edges = [];\r\n                // draw floors\r\n                scope.floorplan.getRooms().forEach(function (room) {\r\n                    var threeFloor = new Three.Floor(scene, room);\r\n                    scope.floors.push(threeFloor);\r\n                    threeFloor.addToScene();\r\n                });\r\n                // draw edges\r\n                scope.floorplan.wallEdges().forEach(function (edge) {\r\n                    var threeEdge = new Three.Edge(scene, edge, scope.controls);\r\n                    scope.edges.push(threeEdge);\r\n                });\r\n            }\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Lights = function (scene, floorplan) {\r\n            // var scope = this;\r\n            // var scene = scene;\r\n            // var floorplan = floorplan;\r\n            var tol = 1;\r\n            var height = 300; // TODO: share with Blueprint.Wall\r\n            var dirLight;\r\n            this.getDirLight = function () {\r\n                return dirLight;\r\n            };\r\n\r\n            function init() {\r\n                // var light = new THREE.HemisphereLight(0xffffff, 0x000000, 0.2);\r\n                // light.position.set(0, height, 0);\r\n                // scene.add(light);\r\n\r\n                // add some lighting\r\n                var ambientLight = new THREE.AmbientLight(0xffffff);\r\n                scene.add(ambientLight);\r\n                // var spotLight = new THREE.SpotLight(0xffffff);\r\n                // spotLight.position.set(-40, 60, -10);\r\n                // spotLight.castShadow = true;\r\n                // scene.add(spotLight);\r\n\r\n                dirLight = new THREE.DirectionalLight(0xffffff, 0.7);\r\n                dirLight.position.set(0, height, 0);\r\n                dirLight.castShadow = true;\r\n                dirLight.target.position.set(0, 0, 0);\r\n                scene.add(dirLight);\r\n                scene.add(dirLight.target);\r\n\r\n                dirLight.shadow.mapSize.width = 512;\r\n                dirLight.shadow.mapSize.height = 512;\r\n                dirLight.shadow.camera.near = 0.5;\r\n                dirLight.shadow.camera.far = 500;\r\n                // dirLight.shadow.bias = -0.0001;\r\n                // dirLight.visible = true;\r\n\r\n                floorplan.fireOnUpdatedRooms(updateShadowCamera);\r\n            }\r\n\r\n\r\n\r\n            function updateShadowCamera() {\r\n                var size = floorplan.getSize();\r\n                var d = (Math.max(size.z, size.x) + tol) / 2.0;\r\n                var center = floorplan.getCenter();\r\n                var pos = new THREE.Vector3(center.x + 100, height, center.z + 60);\r\n                dirLight.position.copy(pos);\r\n                dirLight.target.position.copy(center);\r\n                //dirLight.updateMatrix();\r\n                dirLight.updateWorldMatrix()\r\n                dirLight.shadow.camera.left = -d;\r\n                dirLight.shadow.camera.right = d;\r\n                dirLight.shadow.camera.top = d;\r\n                dirLight.shadow.camera.bottom = -d;\r\n                dirLight.shadow.camera.updateProjectionMatrix();\r\n                // this is necessary for updates\r\n                // if (dirLight.shadowCamera) {\r\n                //     dirLight.shadowCamera.left = dirLight.shadowCameraLeft;\r\n                //     dirLight.shadowCamera.right = dirLight.shadowCameraRight;\r\n                //     dirLight.shadowCamera.top = dirLight.shadowCameraTop;\r\n                //     dirLight.shadowCamera.bottom = dirLight.shadowCameraBottom;\r\n                //     dirLight.shadowCamera.updateProjectionMatrix();\r\n                // }\r\n            }\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Skybox = function (scene) {\r\n            // var scope = this;\r\n            // var scene = scene;\r\n            var topColor = 0xffffff; //0xD8ECF9\r\n            var bottomColor = 0xe9e9e9; //0xf9f9f9;//0x565e63\r\n            var verticalOffset = 500;\r\n            var sphereRadius = 4000;\r\n            var widthSegments = 32;\r\n            var heightSegments = 15;\r\n            var vertexShader = [\r\n                \"varying vec3 vWorldPosition;\",\r\n                \"void main() {\",\r\n                \"  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\r\n                \"  vWorldPosition = worldPosition.xyz;\",\r\n                \"  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n                \"}\"\r\n            ].join('\\n');\r\n            var fragmentShader = [\r\n                \"uniform vec3 topColor;\",\r\n                \"uniform vec3 bottomColor;\",\r\n                \"uniform float offset;\",\r\n                \"varying vec3 vWorldPosition;\",\r\n                \"void main() {\",\r\n                \"  float h = normalize( vWorldPosition + offset ).y;\",\r\n                \"  gl_FragColor = vec4( mix( bottomColor, topColor, (h + 1.0) / 2.0), 1.0 );\",\r\n                \"}\"\r\n            ].join('\\n');\r\n\r\n            function init() {\r\n                var uniforms = {\r\n                    topColor: {\r\n                        type: \"c\",\r\n                        value: new THREE.Color(topColor)\r\n                    },\r\n                    bottomColor: {\r\n                        type: \"c\",\r\n                        value: new THREE.Color(bottomColor)\r\n                    },\r\n                    offset: {\r\n                        type: \"f\",\r\n                        value: verticalOffset\r\n                    }\r\n                };\r\n                var skyGeo = new THREE.SphereGeometry(sphereRadius, widthSegments, heightSegments);\r\n                var skyMat = new THREE.ShaderMaterial({\r\n                    vertexShader: vertexShader,\r\n                    fragmentShader: fragmentShader,\r\n                    uniforms: uniforms,\r\n                    side: THREE.BackSide\r\n                });\r\n                var sky = new THREE.Mesh(skyGeo, skyMat);\r\n                scene.add(sky);\r\n            }\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n/**\r\nThis file is a modified version of THREE.OrbitControls\r\nContributors:\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Controls = function (object, domElement) {\r\n            this.object = object;\r\n            this.domElement = (domElement !== undefined) ? domElement : document;\r\n            // Set to false to disable this control\r\n            this.enabled = true;\r\n            // \"target\" sets the location of focus, where the control orbits around\r\n            // and where it pans with respect to.\r\n            this.target = new THREE.Vector3();\r\n            // center is old, deprecated; use \"target\" instead\r\n            this.center = this.target;\r\n            // This option actually enables dollying in and out; left as \"zoom\" for\r\n            // backwards compatibility\r\n            this.noZoom = false;\r\n            this.zoomSpeed = 1.0;\r\n            // Limits to how far you can dolly in and out\r\n            this.minDistance = 0;\r\n            this.maxDistance = 1500; //Infinity;\r\n            // Set to true to disable this control\r\n            this.noRotate = false;\r\n            this.rotateSpeed = 1.0;\r\n            // Set to true to disable this control\r\n            this.noPan = false;\r\n            this.keyPanSpeed = 40.0; // pixels moved per arrow key push\r\n            // Set to true to automatically rotate around the target\r\n            this.autoRotate = false;\r\n            this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n            // How far you can orbit vertically, upper and lower limits.\r\n            // Range is 0 to Math.PI radians.\r\n            this.minPolarAngle = 0; // radians\r\n            this.maxPolarAngle = Math.PI / 2; // radians\r\n            // Set to true to disable use of the keys\r\n            this.noKeys = false;\r\n            // The four arrow keys\r\n            this.keys = {\r\n                LEFT: 37,\r\n                UP: 38,\r\n                RIGHT: 39,\r\n                BOTTOM: 40\r\n            };\r\n            this.cameraMovedCallbacks = $.Callbacks();\r\n            this.needsUpdate = true;\r\n            // internals\r\n            var scope = this;\r\n            var EPS = 0.000001;\r\n            var rotateStart = new THREE.Vector2();\r\n            var rotateEnd = new THREE.Vector2();\r\n            var rotateDelta = new THREE.Vector2();\r\n            var panStart = new THREE.Vector2();\r\n            var panEnd = new THREE.Vector2();\r\n            var panDelta = new THREE.Vector2();\r\n            var dollyStart = new THREE.Vector2();\r\n            var dollyEnd = new THREE.Vector2();\r\n            var dollyDelta = new THREE.Vector2();\r\n            var phiDelta = 0;\r\n            var thetaDelta = 0;\r\n            var scale = 1;\r\n            var pan = new THREE.Vector3();\r\n            var STATE = {\r\n                NONE: -1,\r\n                ROTATE: 0,\r\n                DOLLY: 1,\r\n                PAN: 2,\r\n                TOUCH_ROTATE: 3,\r\n                TOUCH_DOLLY: 4,\r\n                TOUCH_PAN: 5\r\n            };\r\n            var state = STATE.NONE;\r\n            this.controlsActive = function () {\r\n                return (state === STATE.NONE);\r\n            };\r\n            this.setPan = function (vec3) {\r\n                pan = vec3;\r\n            };\r\n            this.panTo = function (vec3) {\r\n                var newTarget = new THREE.Vector3(vec3.x, scope.target.y, vec3.z);\r\n                var delta = scope.target.clone().sub(newTarget);\r\n                pan.sub(delta);\r\n                scope.update();\r\n            };\r\n            this.rotateLeft = function (angle) {\r\n                if (angle === undefined) {\r\n                    angle = getAutoRotationAngle();\r\n                }\r\n                thetaDelta -= angle;\r\n            };\r\n            this.rotateUp = function (angle) {\r\n                if (angle === undefined) {\r\n                    angle = getAutoRotationAngle();\r\n                }\r\n                phiDelta -= angle;\r\n            };\r\n            // pass in distance in world space to move left\r\n            this.panLeft = function (distance) {\r\n                var panOffset = new THREE.Vector3();\r\n                var te = this.object.matrix.elements;\r\n                // get X column of matrix\r\n                panOffset.set(te[0], 0, te[2]);\r\n                panOffset.normalize();\r\n                panOffset.multiplyScalar(-distance);\r\n                pan.add(panOffset);\r\n            };\r\n            // pass in distance in world space to move up\r\n            this.panUp = function (distance) {\r\n                var panOffset = new THREE.Vector3();\r\n                var te = this.object.matrix.elements;\r\n                // get Y column of matrix\r\n                panOffset.set(te[4], 0, te[6]);\r\n                panOffset.normalize();\r\n                panOffset.multiplyScalar(distance);\r\n                pan.add(panOffset);\r\n            };\r\n            // main entry point; pass in Vector2 of change desired in pixel space,\r\n            // right and down are positive\r\n            this.pan = function (delta) {\r\n                var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n                if (scope.object.fov !== undefined) {\r\n                    // perspective\r\n                    var position = scope.object.position;\r\n                    var offset = position.clone().sub(scope.target);\r\n                    var targetDistance = offset.length();\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0);\r\n                    // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n                    scope.panLeft(2 * delta.x * targetDistance / element.clientHeight);\r\n                    scope.panUp(2 * delta.y * targetDistance / element.clientHeight);\r\n                } else if (scope.object.top !== undefined) {\r\n                    // orthographic\r\n                    scope.panLeft(delta.x * (scope.object.right - scope.object.left) / element.clientWidth);\r\n                    scope.panUp(delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight);\r\n                } else {\r\n                    // camera neither orthographic or perspective - warn user\r\n                    console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\r\n                }\r\n                scope.update();\r\n            };\r\n            this.panXY = function (x, y) {\r\n                scope.pan(new THREE.Vector2(x, y));\r\n            };\r\n            this.dollyIn = function (dollyScale) {\r\n                if (dollyScale === undefined) {\r\n                    dollyScale = getZoomScale();\r\n                }\r\n                scale /= dollyScale;\r\n            };\r\n            this.dollyOut = function (dollyScale) {\r\n                if (dollyScale === undefined) {\r\n                    dollyScale = getZoomScale();\r\n                }\r\n                scale *= dollyScale;\r\n            };\r\n            this.update = function () {\r\n                var position = this.object.position;\r\n                var offset = position.clone().sub(this.target);\r\n                // angle from z-axis around y-axis\r\n                var theta = Math.atan2(offset.x, offset.z);\r\n                // angle from y-axis\r\n                var phi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);\r\n                if (this.autoRotate) {\r\n                    this.rotateLeft(getAutoRotationAngle());\r\n                }\r\n                theta += thetaDelta;\r\n                phi += phiDelta;\r\n                // restrict phi to be between desired limits\r\n                phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, phi));\r\n                // restrict phi to be betwee EPS and PI-EPS\r\n                phi = Math.max(EPS, Math.min(Math.PI - EPS, phi));\r\n                var radius = offset.length() * scale;\r\n                // restrict radius to be between desired limits\r\n                radius = Math.max(this.minDistance, Math.min(this.maxDistance, radius));\r\n                // move target to panned location\r\n                this.target.add(pan);\r\n                offset.x = radius * Math.sin(phi) * Math.sin(theta);\r\n                offset.y = radius * Math.cos(phi);\r\n                offset.z = radius * Math.sin(phi) * Math.cos(theta);\r\n                position.copy(this.target).add(offset);\r\n                this.object.lookAt(this.target);\r\n                thetaDelta = 0;\r\n                phiDelta = 0;\r\n                scale = 1;\r\n                pan.set(0, 0, 0);\r\n                this.cameraMovedCallbacks.fire();\r\n                this.needsUpdate = true;\r\n            };\r\n\r\n            function getAutoRotationAngle() {\r\n                return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n            }\r\n\r\n            function getZoomScale() {\r\n                return Math.pow(0.95, scope.zoomSpeed);\r\n            }\r\n\r\n            function onMouseDown(event) {\r\n                if (scope.enabled === false) {\r\n                    return;\r\n                }\r\n                event.preventDefault();\r\n                if (event.button === 0) {\r\n                    if (scope.noRotate === true) {\r\n                        return;\r\n                    }\r\n                    state = STATE.ROTATE;\r\n                    rotateStart.set(event.clientX, event.clientY);\r\n                } else if (event.button === 1) {\r\n                    if (scope.noZoom === true) {\r\n                        return;\r\n                    }\r\n                    state = STATE.DOLLY;\r\n                    dollyStart.set(event.clientX, event.clientY);\r\n                } else if (event.button === 2) {\r\n                    if (scope.noPan === true) {\r\n                        return;\r\n                    }\r\n                    state = STATE.PAN;\r\n                    panStart.set(event.clientX, event.clientY);\r\n                }\r\n                // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n                scope.domElement.addEventListener('mousemove', onMouseMove, false);\r\n                scope.domElement.addEventListener('mouseup', onMouseUp, false);\r\n            }\r\n\r\n            function onMouseMove(event) {\r\n                if (scope.enabled === false)\r\n                    return;\r\n                event.preventDefault();\r\n                var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n                if (state === STATE.ROTATE) {\r\n                    if (scope.noRotate === true)\r\n                        return;\r\n                    rotateEnd.set(event.clientX, event.clientY);\r\n                    rotateDelta.subVectors(rotateEnd, rotateStart);\r\n                    // rotating across whole screen goes 360 degrees around\r\n                    scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\r\n                    // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                    scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\r\n                    rotateStart.copy(rotateEnd);\r\n                } else if (state === STATE.DOLLY) {\r\n                    if (scope.noZoom === true)\r\n                        return;\r\n                    dollyEnd.set(event.clientX, event.clientY);\r\n                    dollyDelta.subVectors(dollyEnd, dollyStart);\r\n                    if (dollyDelta.y > 0) {\r\n                        scope.dollyIn();\r\n                    } else {\r\n                        scope.dollyOut();\r\n                    }\r\n                    dollyStart.copy(dollyEnd);\r\n                } else if (state === STATE.PAN) {\r\n                    if (scope.noPan === true)\r\n                        return;\r\n                    panEnd.set(event.clientX, event.clientY);\r\n                    panDelta.subVectors(panEnd, panStart);\r\n                    scope.pan(panDelta);\r\n                    panStart.copy(panEnd);\r\n                }\r\n                // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n                scope.update();\r\n            }\r\n\r\n            function onMouseUp() {\r\n                if (scope.enabled === false)\r\n                    return;\r\n                // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n                scope.domElement.removeEventListener('mousemove', onMouseMove, false);\r\n                scope.domElement.removeEventListener('mouseup', onMouseUp, false);\r\n                state = STATE.NONE;\r\n            }\r\n\r\n            function onMouseWheel(event) {\r\n                if (scope.enabled === false || scope.noZoom === true)\r\n                    return;\r\n                var delta = 0;\r\n                if (event.wheelDelta) {\r\n                    delta = event.wheelDelta;\r\n                } else if (event.detail) {\r\n                    delta = -event.detail;\r\n                }\r\n                if (delta > 0) {\r\n                    scope.dollyOut();\r\n                } else {\r\n                    scope.dollyIn();\r\n                }\r\n                scope.update();\r\n            }\r\n\r\n            function onTouchStart(event) {\r\n                if (scope.enabled === false) {\r\n                    return;\r\n                }\r\n                event.preventDefault();\r\n\r\n                if (scope.noRotate === true) {\r\n                    return;\r\n                }\r\n                state = STATE.ROTATE;\r\n                rotateStart.set(event.touches[0].clientX, event.touches[0].clientY);\r\n\r\n\r\n                scope.domElement.addEventListener('touchmove', onTouchMove, false);\r\n                scope.domElement.addEventListener('touchend', onTouchEnd, false);\r\n\r\n            }\r\n\r\n            function onTouchMove(event) {\r\n                if (scope.enabled === false)\r\n                    return;\r\n                event.preventDefault();\r\n                var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n                if (state === STATE.ROTATE) {\r\n                    if (scope.noRotate === true)\r\n                        return;\r\n                    rotateEnd.set(event.touches[0].clientX, event.touches[0].clientY);\r\n                    rotateDelta.subVectors(rotateEnd, rotateStart);\r\n                    // rotating across whole screen goes 360 degrees around\r\n                    scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\r\n                    // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                    scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\r\n                    rotateStart.copy(rotateEnd);\r\n                } else if (state === STATE.DOLLY) {\r\n                    if (scope.noZoom === true)\r\n                        return;\r\n                    dollyEnd.set(event.touches[0].clientX, event.touches[0].clientY);\r\n                    dollyDelta.subVectors(dollyEnd, dollyStart);\r\n                    if (dollyDelta.y > 0) {\r\n                        scope.dollyIn();\r\n                    } else {\r\n                        scope.dollyOut();\r\n                    }\r\n                    dollyStart.copy(dollyEnd);\r\n                } else if (state === STATE.PAN) {\r\n                    if (scope.noPan === true)\r\n                        return;\r\n                    panEnd.set(event.touches[0].clientX, event.touches[0].clientY);\r\n                    panDelta.subVectors(panEnd, panStart);\r\n                    scope.pan(panDelta);\r\n                    panStart.copy(panEnd);\r\n                }\r\n                // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n                scope.update();\r\n            }\r\n\r\n            function onTouchEnd() {\r\n                if (scope.enabled === false)\r\n                    return;\r\n                // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n                scope.domElement.removeEventListener('touchmove', onTouchMove, false);\r\n                scope.domElement.removeEventListener('touchend', onTouchEnd, false);\r\n                state = STATE.NONE;\r\n            }\r\n\r\n            function onKeyDown(event) {\r\n                if (scope.enabled === false) {\r\n                    return;\r\n                }\r\n                if (scope.noKeys === true) {\r\n                    return;\r\n                }\r\n                if (scope.noPan === true) {\r\n                    return;\r\n                }\r\n\r\n                if ($('.modal-open').length) {\r\n                    return;\r\n                }\r\n\r\n                switch (event.keyCode) {\r\n                    case scope.keys.UP:\r\n                        scope.pan(new THREE.Vector2(0, scope.keyPanSpeed));\r\n                        break;\r\n                    case scope.keys.BOTTOM:\r\n                        scope.pan(new THREE.Vector2(0, -scope.keyPanSpeed));\r\n                        break;\r\n                    case scope.keys.LEFT:\r\n                        scope.pan(new THREE.Vector2(scope.keyPanSpeed, 0));\r\n                        break;\r\n                    case scope.keys.RIGHT:\r\n                        scope.pan(new THREE.Vector2(-scope.keyPanSpeed, 0));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n\r\n\r\n            this.domElement.addEventListener('contextmenu', function (event) {\r\n                event.preventDefault();\r\n            }, false);\r\n            this.domElement.addEventListener('mousedown', onMouseDown, false);\r\n            this.domElement.addEventListener('mousewheel', onMouseWheel, false);\r\n            this.domElement.addEventListener('touchstart', onTouchStart, false);\r\n            this.domElement.addEventListener('DOMMouseScroll', onMouseWheel, false); // firefox\r\n            document.addEventListener('keydown', onKeyDown, false);\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        /**\r\n         * Drawings on \"top\" of the scene. e.g. rotate arrows\r\n         */\r\n        Three.HUD = function (three) {\r\n            var scope = this;\r\n            // var three = three;\r\n            var scene = new THREE.Scene();\r\n            var selectedItem = null;\r\n            var rotating = false;\r\n            var mouseover = false;\r\n            // var tolerance = 10;\r\n            // eslint-disable-next-line no-unused-vars\r\n            var height = 5;\r\n            var distance = 20;\r\n            var color = \"#ffffff\";\r\n            var hoverColor = \"#f1c40f\";\r\n            var activeObject = null;\r\n            this.getScene = function () {\r\n                return scene;\r\n            };\r\n            this.getObject = function () {\r\n                return activeObject;\r\n            };\r\n\r\n            function init() {\r\n                three.itemSelectedCallbacks.add(itemSelected);\r\n                three.itemUnselectedCallbacks.add(itemUnselected);\r\n            }\r\n\r\n            function resetSelectedItem() {\r\n                selectedItem = null;\r\n                if (activeObject) {\r\n                    scene.remove(activeObject);\r\n                    activeObject = null;\r\n                }\r\n            }\r\n\r\n            function itemSelected(item) {\r\n                if (selectedItem !== item) {\r\n                    resetSelectedItem();\r\n                    if (item.allowRotate && !item.fixed) {\r\n                        selectedItem = item;\r\n                        activeObject = makeObject(selectedItem);\r\n                        scene.add(activeObject);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function itemUnselected() {\r\n                resetSelectedItem();\r\n            }\r\n            this.setRotating = function (isRotating) {\r\n                rotating = isRotating;\r\n                setColor();\r\n            };\r\n            this.setMouseover = function (isMousedOver) {\r\n                mouseover = isMousedOver;\r\n                setColor();\r\n            };\r\n\r\n            function setColor() {\r\n                if (activeObject) {\r\n                    activeObject.children.forEach(function (obj) {\r\n                        obj.material.color.set(getColor());\r\n                    });\r\n                }\r\n                three.needsUpdate();\r\n            }\r\n\r\n            function getColor() {\r\n                return (mouseover || rotating) ? hoverColor : color;\r\n            }\r\n            this.update = function () {\r\n                if (activeObject) {\r\n                    activeObject.rotation.y = selectedItem.rotation.y;\r\n                    activeObject.position.x = selectedItem.position.x;\r\n                    activeObject.position.z = selectedItem.position.z;\r\n                    activeObject.position.y = selectedItem.position.y - selectedItem.halfSize.y;\r\n                }\r\n            };\r\n\r\n            function makeLineGeometry(item) {\r\n                var geometry = new THREE.Geometry();\r\n                geometry.vertices.push(new THREE.Vector3(0, 0, 0), rotateVector(item));\r\n                return geometry;\r\n            }\r\n\r\n            function rotateVector(item) {\r\n                var vec = new THREE.Vector3(0, 0, Math.max(item.halfSize.x, item.halfSize.z) + 1.4 + distance);\r\n                return vec;\r\n            }\r\n\r\n            function centreVector(item) {\r\n                var vec = new THREE.Vector3(0, 0, 0);\r\n                return vec;\r\n            }\r\n\r\n            function makeLineMaterial(rotating) {\r\n                var mat = new THREE.LineBasicMaterial({\r\n                    color: getColor(),\r\n                    linewidth: 3\r\n                });\r\n                return mat;\r\n            }\r\n\r\n            function makeCone(item) {\r\n                var coneGeo = new THREE.CylinderGeometry(5, 0, 10);\r\n                var coneMat = new THREE.MeshBasicMaterial({\r\n                    color: getColor()\r\n                });\r\n                var cone = new THREE.Mesh(coneGeo, coneMat);\r\n                cone.position.copy(rotateVector(item));\r\n                cone.rotation.x = -Math.PI / 2.0;\r\n                return cone;\r\n            }\r\n\r\n            function makeSphere(item) {\r\n                var geometry = new THREE.SphereGeometry(4, 16, 16);\r\n                var material = new THREE.MeshBasicMaterial({\r\n                    color: getColor()\r\n                });\r\n\r\n                var sphere = new THREE.Mesh(geometry, material);\r\n                sphere.position.copy(centreVector(item));\r\n                return sphere;\r\n            }\r\n\r\n            function makeObject(item) {\r\n                var object = new THREE.Object3D();\r\n                var line = new THREE.Line(makeLineGeometry(item), makeLineMaterial(scope.rotating), THREE.LineSegments);\r\n                var cone = makeCone(item);\r\n                var sphere = makeSphere(item);\r\n                object.add(line);\r\n                object.add(cone);\r\n                object.add(sphere);\r\n                object.rotation.y = item.rotation.y;\r\n                object.position.x = item.position.x;\r\n                object.position.z = item.position.z;\r\n                object.position.y = item.position.y - item.halfSize.y;\r\n                return object;\r\n            }\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Three;\r\n    (function (Three) {\r\n        Three.Main = function (model, element, canvasElement, opts) {\r\n            var scope = this;\r\n            var options = {\r\n                resize: true,\r\n                pushHref: false,\r\n                spin: true,\r\n                spinSpeed: .00002,\r\n                clickPan: true,\r\n                canMoveFixedItems: false\r\n            };\r\n            // override with manually set options\r\n            for (var opt in options) {\r\n                if (options.hasOwnProperty(opt) && opts.hasOwnProperty(opt)) {\r\n                    options[opt] = opts[opt];\r\n                }\r\n            }\r\n            // var model = model;\r\n            var scene = model.scene;\r\n            this.element = $(element);\r\n            var domElement;\r\n            var camera;\r\n            var renderer;\r\n            // eslint-disable-next-line no-unused-expressions\r\n            this.controls;\r\n            // var canvas;\r\n            var controller;\r\n            // eslint-disable-next-line no-unused-vars\r\n            var floorplan;\r\n            //var canvas;\r\n            //var canvasElement = canvasElement;\r\n            var needsUpdate = false;\r\n            var lastRender = Date.now();\r\n            var mouseOver = false;\r\n            var hasClicked = false;\r\n            var hud;\r\n            // eslint-disable-next-line no-unused-expressions\r\n            this.heightMargin;\r\n            // eslint-disable-next-line no-unused-expressions\r\n            this.widthMargin;\r\n            // eslint-disable-next-line no-unused-expressions\r\n            this.elementHeight;\r\n            // eslint-disable-next-line no-unused-expressions\r\n            this.elementWidth;\r\n            this.itemSelectedCallbacks = $.Callbacks(); // item\r\n            this.itemUnselectedCallbacks = $.Callbacks();\r\n            this.wallClicked = $.Callbacks(); // wall\r\n            this.floorClicked = $.Callbacks(); // floor\r\n            this.nothingClicked = $.Callbacks();\r\n\r\n            function init() {\r\n                // THREE.ImageUtils.crossOrigin = \"\";\r\n                // THREE.TextureLoader.setCrossOrigin('anonymous')\r\n                THREE.Cache.enabled = true;\r\n                domElement = scope.element.get(0); // Container\r\n                camera = new THREE.PerspectiveCamera(45, 1, 1, 10000);\r\n                renderer = new THREE.WebGLRenderer({\r\n                    antialias: true,\r\n                    preserveDrawingBuffer: true // required to support .toDataURL()\r\n                });\r\n                renderer.autoClear = false;\r\n                renderer.shadowMap.enabled = true;\r\n                renderer.shadowMapSoft = true;\r\n                renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n                // eslint-disable-next-line no-unused-vars\r\n                var skybox = new Three.Skybox(scene);\r\n                scope.controls = new Three.Controls(camera, domElement);\r\n                hud = new Three.HUD(scope);\r\n                controller = new Three.Controller(scope, model, camera, scope.element, scope.controls, hud);\r\n                domElement.appendChild(renderer.domElement);\r\n                // handle window resizing\r\n                scope.updateWindowSize();\r\n                if (options.resize) {\r\n                    $(window).resize(scope.updateWindowSize);\r\n                }\r\n                // setup camera nicely\r\n                scope.centerCamera();\r\n                model.floorplan.fireOnUpdatedRooms(scope.centerCamera);\r\n                // eslint-disable-next-line no-unused-vars\r\n                var lights = new Three.Lights(scene, model.floorplan);\r\n                floorplan = new Three.Floorplan(scene, model.floorplan, scope.controls);\r\n                animate();\r\n                scope.element.mouseenter(function () {\r\n                    mouseOver = true;\r\n                }).mouseleave(function () {\r\n                    mouseOver = false;\r\n                }).click(function () {\r\n                    hasClicked = true;\r\n                });\r\n\r\n                scope.element.on(\"touchstart\", function () {\r\n                    mouseOver = true;\r\n                    hasClicked = true;\r\n                })\r\n                scope.element.on(\"touchend\", function () {\r\n                    mouseOver = false;\r\n                })\r\n                //canvas = new ThreeCanvas(canvasElement, scope);\r\n\r\n            }\r\n\r\n            function spin() {\r\n                if (options.spin && !mouseOver && !hasClicked) {\r\n                    var theta = 2 * Math.PI * options.spinSpeed * (Date.now() - lastRender);\r\n                    scope.controls.rotateLeft(theta);\r\n                    scope.controls.update();\r\n                }\r\n            }\r\n            this.dataUrl = function () {\r\n                var dataUrl = renderer.domElement.toDataURL(\"image/png\");\r\n                return dataUrl;\r\n            };\r\n            this.stopSpin = function () {\r\n                hasClicked = true;\r\n            };\r\n            this.options = function () {\r\n                return options;\r\n            };\r\n            this.getModel = function () {\r\n                return model;\r\n            };\r\n            this.getScene = function () {\r\n                return scene;\r\n            };\r\n            this.getController = function () {\r\n                return controller;\r\n            };\r\n            this.getCamera = function () {\r\n                return camera;\r\n            };\r\n            this.needsUpdate = function () {\r\n                needsUpdate = true;\r\n            };\r\n\r\n            function shouldRender() {\r\n                // Do we need to draw a new frame\r\n                if (scope.controls.needsUpdate || controller.needsUpdate || needsUpdate || model.scene.needsUpdate) {\r\n                    scope.controls.needsUpdate = false;\r\n                    controller.needsUpdate = false;\r\n                    needsUpdate = false;\r\n                    model.scene.needsUpdate = false;\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            function render() {\r\n                spin();\r\n                if (shouldRender()) {\r\n                    renderer.clear();\r\n                    renderer.render(scene.getScene(), camera);\r\n                    renderer.clearDepth();\r\n                    renderer.render(hud.getScene(), camera);\r\n                }\r\n                lastRender = Date.now();\r\n            };\r\n\r\n            function animate() {\r\n                var delay = 50;\r\n                setTimeout(function () {\r\n                    requestAnimationFrame(animate);\r\n                }, delay);\r\n                render();\r\n            };\r\n            this.rotatePressed = function () {\r\n                controller.rotatePressed();\r\n            };\r\n            this.rotateReleased = function () {\r\n                controller.rotateReleased();\r\n            };\r\n            this.setCursorStyle = function (cursorStyle) {\r\n                domElement.style.cursor = cursorStyle;\r\n            };\r\n            this.updateWindowSize = function () {\r\n                scope.heightMargin = scope.element.offset().top;\r\n                scope.widthMargin = scope.element.offset().left;\r\n                scope.elementWidth = scope.element.innerWidth();\r\n                if (options.resize) {\r\n                    scope.elementHeight = window.innerHeight - scope.heightMargin;\r\n                } else {\r\n                    scope.elementHeight = scope.element.innerHeight();\r\n                }\r\n                camera.aspect = scope.elementWidth / scope.elementHeight;\r\n                camera.updateProjectionMatrix();\r\n                renderer.setSize(scope.elementWidth, scope.elementHeight);\r\n                needsUpdate = true;\r\n            };\r\n            this.centerCamera = function () {\r\n                var yOffset = 150.0;\r\n                var pan = model.floorplan.getCenter();\r\n                pan.y = yOffset;\r\n                scope.controls.target = pan;\r\n                var distance = model.floorplan.getSize().z * 1.5;\r\n                var offset = pan.clone().add(new THREE.Vector3(0, distance, distance));\r\n                //scope.controls.setOffset(offset);\r\n                camera.position.copy(offset);\r\n                scope.controls.update();\r\n            };\r\n            // projects the object's center point into x,y screen coords\r\n            // x,y are relative to top left corner of viewer\r\n            this.projectVector = function (vec3, ignoreMargin) {\r\n                ignoreMargin = ignoreMargin || false;\r\n                var widthHalf = scope.elementWidth / 2;\r\n                var heightHalf = scope.elementHeight / 2;\r\n                var vector = new THREE.Vector3();\r\n                vector.copy(vec3);\r\n                vector.project(camera);\r\n                var vec2 = new THREE.Vector2();\r\n                vec2.x = (vector.x * widthHalf) + widthHalf;\r\n                vec2.y = -(vector.y * heightHalf) + heightHalf;\r\n                if (!ignoreMargin) {\r\n                    vec2.x += scope.widthMargin;\r\n                    vec2.y += scope.heightMargin;\r\n                }\r\n                return vec2;\r\n            };\r\n            init();\r\n        };\r\n    })(Three = BP3D.Three || (BP3D.Three = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n\r\n(function (BP3D) {\r\n    /** Blueprint3D core application. */\r\n    var Blueprint3d = (function () {\r\n        /** Creates an instance.\r\n         * @param options The initialization options.\r\n         */\r\n        function Blueprint3d(options) {\r\n            this.model = new BP3D.Model.Model(options.textureDir);\r\n            this.three = new BP3D.Three.Main(this.model, options.threeElement, options.threeCanvasElement, {});\r\n            if (!options.widget) {\r\n                this.floorplanner = new BP3D.Floorplanner.Floorplanner(options.floorplannerElement, this.model.floorplan);\r\n            } else {\r\n                this.three.getController().enabled = false;\r\n            }\r\n        }\r\n        return Blueprint3d;\r\n    })();\r\n    BP3D.Blueprint3d = Blueprint3d;\r\n})(BP3D || (BP3D = {}));\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Core;\r\n    (function (Core) {\r\n        /** Enumeration of log contexts. */\r\n        (function (ELogContext) {\r\n            /** Log nothing. */\r\n            ELogContext[ELogContext[\"None\"] = 0] = \"None\";\r\n            /** Log all. */\r\n            ELogContext[ELogContext[\"All\"] = 1] = \"All\";\r\n            /** 2D interaction */\r\n            ELogContext[ELogContext[\"Interaction2d\"] = 2] = \"Interaction2d\";\r\n            /** Interior items */\r\n            ELogContext[ELogContext[\"Item\"] = 3] = \"Item\";\r\n            /** Wall (connectivity) */\r\n            ELogContext[ELogContext[\"Wall\"] = 4] = \"Wall\";\r\n            /** Room(s) */\r\n            ELogContext[ELogContext[\"Room\"] = 5] = \"Room\";\r\n        })(Core.ELogContext || (Core.ELogContext = {}));\r\n        var ELogContext = Core.ELogContext;\r\n        /** Enumeration of log levels. */\r\n        (function (ELogLevel) {\r\n            /** An information. */\r\n            ELogLevel[ELogLevel[\"Information\"] = 0] = \"Information\";\r\n            /** A warning. */\r\n            ELogLevel[ELogLevel[\"Warning\"] = 1] = \"Warning\";\r\n            /** An error. */\r\n            ELogLevel[ELogLevel[\"Error\"] = 2] = \"Error\";\r\n            /** A fatal error. */\r\n            ELogLevel[ELogLevel[\"Fatal\"] = 3] = \"Fatal\";\r\n            /** A debug message. */\r\n            ELogLevel[ELogLevel[\"Debug\"] = 4] = \"Debug\";\r\n        })(Core.ELogLevel || (Core.ELogLevel = {}));\r\n        var ELogLevel = Core.ELogLevel;\r\n        /** The current log context. To be set when initializing the Application. */\r\n        Core.logContext = ELogContext.None;\r\n        /** Pre-check if logging for specified context and/or level is enabled.\r\n         * This may be used to avoid compilation of complex logs.\r\n         * @param context The log context to be verified.\r\n         * @param level The log level to be verified.\r\n         * @returns If this context/levels is currently logged.\r\n         */\r\n        function isLogging(context, level) {\r\n            return Core.logContext === ELogContext.All || Core.logContext === context ||\r\n                level === ELogLevel.Warning || level === ELogLevel.Error ||\r\n                level === ELogLevel.Fatal;\r\n        }\r\n        Core.isLogging = isLogging;\r\n        /** Log the passed message in the context and with given level.\r\n         * @param context The context in which the message should be logged.\r\n         * @param level The level of the message.\r\n         * @param message The messages to be logged.\r\n         */\r\n        function log(context, level, message) {\r\n            if (isLogging(context, level) === false) {\r\n                return;\r\n            }\r\n            var tPrefix = \"\";\r\n            switch (level) {\r\n                case ELogLevel.Information:\r\n                    tPrefix = \"[INFO_] \";\r\n                    break;\r\n                case ELogLevel.Warning:\r\n                    tPrefix = \"[WARNG] \";\r\n                    break;\r\n                case ELogLevel.Error:\r\n                    tPrefix = \"[ERROR] \";\r\n                    break;\r\n                case ELogLevel.Fatal:\r\n                    tPrefix = \"[FATAL] \";\r\n                    break;\r\n                case ELogLevel.Debug:\r\n                    tPrefix = \"[DEBUG] \";\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            console.log(tPrefix + message);\r\n        }\r\n        Core.log = log;\r\n    })(Core = BP3D.Core || (BP3D.Core = {}));\r\n})(BP3D || (BP3D = {}));\r\n\r\n(function (BP3D) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    var Core;\r\n    (function (Core) {\r\n        /** Version information. */\r\n        var Version = (function () {\r\n            function Version() {}\r\n            /** The informal version. */\r\n            Version.getInformalVersion = function () {\r\n                return \"1.0 Beta 1\";\r\n            };\r\n            /** The technical version. */\r\n            Version.getTechnicalVersion = function () {\r\n                return \"1.0.0.1\";\r\n            };\r\n            return Version;\r\n        })();\r\n        Core.Version = Version;\r\n    })(Core = BP3D.Core || (BP3D.Core = {}));\r\n})(BP3D || (BP3D = {}));\r\nconsole.log(\"Blueprint3D \" + BP3D.Core.Version.getInformalVersion() +\r\n    \" (\" + BP3D.Core.Version.getTechnicalVersion() + \")\");\r\n//# sourceMappingURL=blueprint3d.js.map"]},"metadata":{},"sourceType":"module"}