import { SVGPathDataTransformer } from "./SVGPathDataTransformer";
var TransformableSVG = /** @class */ (function () {
    function TransformableSVG() {
    }
    TransformableSVG.prototype.round = function (x) {
        return this.transform(SVGPathDataTransformer.ROUND(x));
    };
    TransformableSVG.prototype.toAbs = function () {
        return this.transform(SVGPathDataTransformer.TO_ABS());
    };
    TransformableSVG.prototype.toRel = function () {
        return this.transform(SVGPathDataTransformer.TO_REL());
    };
    TransformableSVG.prototype.normalizeHVZ = function (a, b, c) {
        return this.transform(SVGPathDataTransformer.NORMALIZE_HVZ(a, b, c));
    };
    TransformableSVG.prototype.normalizeST = function () {
        return this.transform(SVGPathDataTransformer.NORMALIZE_ST());
    };
    TransformableSVG.prototype.qtToC = function () {
        return this.transform(SVGPathDataTransformer.QT_TO_C());
    };
    TransformableSVG.prototype.aToC = function () {
        return this.transform(SVGPathDataTransformer.A_TO_C());
    };
    TransformableSVG.prototype.sanitize = function (eps) {
        return this.transform(SVGPathDataTransformer.SANITIZE(eps));
    };
    TransformableSVG.prototype.translate = function (x, y) {
        return this.transform(SVGPathDataTransformer.TRANSLATE(x, y));
    };
    TransformableSVG.prototype.scale = function (x, y) {
        return this.transform(SVGPathDataTransformer.SCALE(x, y));
    };
    TransformableSVG.prototype.rotate = function (a, x, y) {
        return this.transform(SVGPathDataTransformer.ROTATE(a, x, y));
    };
    TransformableSVG.prototype.matrix = function (a, b, c, d, e, f) {
        return this.transform(SVGPathDataTransformer.MATRIX(a, b, c, d, e, f));
    };
    TransformableSVG.prototype.skewX = function (a) {
        return this.transform(SVGPathDataTransformer.SKEW_X(a));
    };
    TransformableSVG.prototype.skewY = function (a) {
        return this.transform(SVGPathDataTransformer.SKEW_Y(a));
    };
    TransformableSVG.prototype.xSymmetry = function (xOffset) {
        return this.transform(SVGPathDataTransformer.X_AXIS_SYMMETRY(xOffset));
    };
    TransformableSVG.prototype.ySymmetry = function (yOffset) {
        return this.transform(SVGPathDataTransformer.Y_AXIS_SYMMETRY(yOffset));
    };
    TransformableSVG.prototype.annotateArcs = function () {
        return this.transform(SVGPathDataTransformer.ANNOTATE_ARCS());
    };
    return TransformableSVG;
}());
export { TransformableSVG };
//# sourceMappingURL=TransformableSVG.js.map