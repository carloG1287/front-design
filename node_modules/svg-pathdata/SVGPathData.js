var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var _a;
import { encodeSVGPath } from "./SVGPathDataEncoder";
import { SVGPathDataParser } from "./SVGPathDataParser";
import { SVGPathDataTransformer } from "./SVGPathDataTransformer";
import { TransformableSVG } from "./TransformableSVG";
var SVGPathData = /** @class */ (function (_super) {
    __extends(SVGPathData, _super);
    function SVGPathData(content) {
        var _this = _super.call(this) || this;
        if ("string" === typeof content) {
            _this.commands = SVGPathData.parse(content);
        }
        else {
            _this.commands = content;
        }
        return _this;
    }
    SVGPathData.prototype.encode = function () {
        return SVGPathData.encode(this.commands);
    };
    SVGPathData.prototype.getBounds = function () {
        var boundsTransform = SVGPathDataTransformer.CALCULATE_BOUNDS();
        this.transform(boundsTransform);
        return boundsTransform;
    };
    SVGPathData.prototype.transform = function (transformFunction) {
        var newCommands = [];
        for (var _i = 0, _a = this.commands; _i < _a.length; _i++) {
            var command = _a[_i];
            var transformedCommand = transformFunction(command);
            if (Array.isArray(transformedCommand)) {
                newCommands.push.apply(newCommands, transformedCommand);
            }
            else {
                newCommands.push(transformedCommand);
            }
        }
        this.commands = newCommands;
        return this;
    };
    SVGPathData.encode = function (commands) {
        return encodeSVGPath(commands);
    };
    SVGPathData.parse = function (path) {
        var parser = new SVGPathDataParser();
        var commands = [];
        parser.parse(path, commands);
        parser.finish(commands);
        return commands;
    };
    SVGPathData.CLOSE_PATH = 1;
    SVGPathData.MOVE_TO = 2;
    SVGPathData.HORIZ_LINE_TO = 4;
    SVGPathData.VERT_LINE_TO = 8;
    SVGPathData.LINE_TO = 16;
    SVGPathData.CURVE_TO = 32;
    SVGPathData.SMOOTH_CURVE_TO = 64;
    SVGPathData.QUAD_TO = 128;
    SVGPathData.SMOOTH_QUAD_TO = 256;
    SVGPathData.ARC = 512;
    SVGPathData.LINE_COMMANDS = SVGPathData.LINE_TO | SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO;
    SVGPathData.DRAWING_COMMANDS = SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO | SVGPathData.LINE_TO |
        SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO | SVGPathData.QUAD_TO |
        SVGPathData.SMOOTH_QUAD_TO | SVGPathData.ARC;
    return SVGPathData;
}(TransformableSVG));
export { SVGPathData };
export var COMMAND_ARG_COUNTS = (_a = {},
    _a[SVGPathData.MOVE_TO] = 2,
    _a[SVGPathData.LINE_TO] = 2,
    _a[SVGPathData.HORIZ_LINE_TO] = 1,
    _a[SVGPathData.VERT_LINE_TO] = 1,
    _a[SVGPathData.CLOSE_PATH] = 0,
    _a[SVGPathData.QUAD_TO] = 4,
    _a[SVGPathData.SMOOTH_QUAD_TO] = 2,
    _a[SVGPathData.CURVE_TO] = 6,
    _a[SVGPathData.SMOOTH_CURVE_TO] = 4,
    _a[SVGPathData.ARC] = 7,
    _a);
export { encodeSVGPath } from "./SVGPathDataEncoder";
export { SVGPathDataParser } from "./SVGPathDataParser";
export { SVGPathDataTransformer } from "./SVGPathDataTransformer";
//# sourceMappingURL=SVGPathData.js.map